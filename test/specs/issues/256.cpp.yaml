- source: 'class basic_string {'
- source: "\tbasic_string() noexcept(noexcept(Allocator())) : basic_string(Allocator()) {}"
- source: "\texplicit basic_string(const Allocator &alloc) noexcept"
- source: "\t    : __string({._s = {{}, _SSO_Cap}}, alloc){};"
- source: "\t// see LWG 3076 for defect report, disabling comes from libc++"
- source: "\ttemplate <"
- source: "\t    class = std::enable_if_t<std::__is_allocator<Allocator>::value, nullptr_t>>"
- source: "\tbasic_string(size_type count, CharT ch, const Allocator &alloc = Allocator())"
- source: "\t    : __string({}, alloc) {"
- source: "\t\tCharT *buf = _New_allocate(count);"
- source: "\t\tfor(size_t s = 0; s < count; s++) { traits_type::assign(buf[s], ch); }"
- source: "\t\ttraits_type::assign(buf[count], CharT());"
- source: "\t}"
- source: '};'
