- scopesBegin:
    - meta.block.struct.cpp
    - meta.head.struct.cpp
  scopes:
    - storage.type.struct.cpp
  source: struct
- scopes:
    - entity.name.type.struct.cpp
  source: copy_storage_helper
- scopesBegin:
    - meta.template.call.cpp
  scopes:
    - punctuation.section.angle-brackets.begin.template.call.cpp
  source: <
- scopes:
    - storage.type.user-defined.cpp
  source: pointerT
- scopes:
    - comma.cpp
    - punctuation.separator.template.argument.cpp
  source: ','
- scopes:
    - storage.type.user-defined.cpp
  source: hashT
- scopes:
    - comma.cpp
    - punctuation.separator.template.argument.cpp
  source: ','
- scopes:
    - storage.type.user-defined.cpp
  source: allocatorT
- scopes:
    - comma.cpp
    - punctuation.separator.template.argument.cpp
  source: ','
- scopes:
    - constant.language.false.cpp
  source: 'false'
- scopesEnd:
    - meta.template.call.cpp
  scopes:
    - punctuation.section.angle-brackets.end.template.call.cpp
  source: '>'
- scopesBegin:
    - comment.line.double-slash.cpp
  scopes:
    - punctuation.definition.comment.cpp
  source: //
- scopesEnd:
    - comment.line.double-slash.cpp
  source: ' copyableT'
- scopesEnd:
    - meta.head.struct.cpp
  scopes:
    - punctuation.section.block.begin.bracket.curly.struct.cpp
  source: '{'
- scopesBegin:
    - meta.body.struct.cpp
    - support.other.attribute.cpp
  scopes:
    - punctuation.section.attribute.begin.cpp
  source: '[['
- scopes:
    - entity.other.attribute.noreturn.cpp
  source: noreturn
- scopesEnd:
    - support.other.attribute.cpp
  scopes:
    - punctuation.section.attribute.end.cpp
  source: ']]'
- scopes:
    - storage.type.primitive.cpp
  source: void
- scopesBegin:
    - meta.function.definition.parameters.operator-overload.cpp
  scopes:
    - keyword.other.operator.overload.cpp
  source: operator
- scopes:
    - entity.name.operator.overloadee.cpp
  source: ()
- scopes:
    - punctuation.section.parameters.begin.bracket.round.operator-overload.cpp
  source: (
- source: 'pointerT '
- scopesBegin:
    - comment.block.cpp
  scopes:
    - punctuation.definition.comment.begin.cpp
  source: /*
- source: ptr
- scopesEnd:
    - comment.block.cpp
  scopes:
    - punctuation.definition.comment.end.cpp
  source: '*/'
- scopes:
    - comma.cpp
    - punctuation.separator.delimiter.cpp
  source: ','
- scopes:
    - storage.modifier.specifier.const.cpp
  source: const
- source: ' hashT'
- scopes:
    - keyword.operator.cpp
  source: '&'
- scopesBegin:
    - comment.block.cpp
  scopes:
    - punctuation.definition.comment.begin.cpp
  source: /*
- source: hf
- scopesEnd:
    - comment.block.cpp
  scopes:
    - punctuation.definition.comment.end.cpp
  source: '*/'
- scopes:
    - comma.cpp
    - punctuation.separator.delimiter.cpp
  source: ','
- source: ' pointerT '
- scopesBegin:
    - comment.block.cpp
  scopes:
    - punctuation.definition.comment.begin.cpp
  source: /*
- source: ptr_old
- scopesEnd:
    - comment.block.cpp
  scopes:
    - punctuation.definition.comment.end.cpp
  source: '*/'
- scopes:
    - comma.cpp
    - punctuation.separator.delimiter.cpp
  source: ','
- scopes:
    - storage.type.cpp
  source: size_t
- scopesBegin:
    - comment.block.cpp
  scopes:
    - punctuation.definition.comment.begin.cpp
  source: /*
- source: 'off'
- scopesEnd:
    - comment.block.cpp
  scopes:
    - punctuation.definition.comment.end.cpp
  source: '*/'
- scopes:
    - comma.cpp
    - punctuation.separator.delimiter.cpp
  source: ','
- scopes:
    - storage.type.cpp
  source: size_t
- scopesBegin:
    - comment.block.cpp
  scopes:
    - punctuation.definition.comment.begin.cpp
  source: /*
- source: cnt
- scopesEnd:
    - comment.block.cpp
  scopes:
    - punctuation.definition.comment.end.cpp
  source: '*/'
- scopesEnd:
    - meta.function.definition.parameters.operator-overload.cpp
  scopes:
    - punctuation.section.parameters.end.bracket.round.operator-overload.cpp
  source: )
- scopes:
    - storage.modifier.specifier.functional.post-parameters.const.cpp
  source: const
- scopesBegin:
    - meta.block.cpp
  scopes:
    - punctuation.section.block.begin.bracket.curly.cpp
  source: '{'
- scopesBegin:
    - comment.line.double-slash.cpp
  scopes:
    - punctuation.definition.comment.cpp
  source: //
- source: ' `allocatorT::value_type` is not copy-constructible.'
- scopes:
    - punctuation.definition.comment.cpp
  source: //
- scopesEnd:
    - comment.line.double-slash.cpp
  source: ' Throw an exception unconditionally, even when there is nothing to copy.'
- scopesBegin:
    - meta.scope-resolution.cpp
  scopes:
    - entity.name.type.namespace.scope-resolution.cpp
  source: noadl
- scopesEnd:
    - meta.scope-resolution.cpp
  scopes:
    - punctuation.separator.namespace.access.cpp
  source: '::'
- scopesBegin:
    - meta.function-call.cpp
  scopes:
    - entity.name.function.call.cpp
  source: sprintf_and_throw
- scopesBegin:
    - meta.template.call.cpp
  scopes:
    - keyword.operator.comparison.cpp
  source: <
- scopes:
    - storage.type.user-defined.cpp
  source: domain_error
- scopesEnd:
    - meta.template.call.cpp
  scopes:
    - keyword.operator.comparison.cpp
  source: '>'
- scopes:
    - punctuation.section.arguments.begin.bracket.round.cpp
  source: (
- scopesBegin:
    - string.quoted.double.cpp
  scopes:
    - punctuation.definition.string.begin.cpp
  source: '"'
- source: 'cow_hashmap: `'
- scopes:
    - constant.other.placeholder.cpp
  source: '%s'
- source: '` is not copy-constructible.'
- scopesEnd:
    - string.quoted.double.cpp
  scopes:
    - punctuation.definition.string.end.cpp
  source: '"'
- scopes:
    - comma.cpp
    - punctuation.separator.delimiter.cpp
  source: ','
- scopes:
    - keyword.operator.functionlike.cpp
    - keyword.operator.typeid.cpp
  source: typeid
- scopes:
    - punctuation.section.arguments.begin.bracket.round.operator.typeid.cpp
  source: (
- scopesBegin:
    - meta.arguments.operator.typeid
  scopes:
    - storage.modifier.cpp
  source: typename
- scopesBegin:
    - meta.scope-resolution.cpp
  scopes:
    - entity.name.type.namespace.scope-resolution.cpp
  source: allocatorT
- scopesEnd:
    - meta.scope-resolution.cpp
  scopes:
    - punctuation.separator.namespace.access.cpp
  source: '::'
- scopesEnd:
    - meta.arguments.operator.typeid
  source: value_type
- scopes:
    - punctuation.section.arguments.end.bracket.round.operator.typeid.cpp
  source: )
- scopes:
    - punctuation.separator.dot-access.cpp
  source: .
- scopes:
    - entity.name.function.member.cpp
  source: name
- scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member.cpp
  source: (
- scopes:
    - punctuation.section.arguments.end.bracket.round.function.member.cpp
  source: )
- scopesEnd:
    - meta.function-call.cpp
  scopes:
    - punctuation.section.arguments.end.bracket.round.cpp
  source: )
- scopes:
    - punctuation.terminator.statement.cpp
  source: ;
- scopesEnd:
    - meta.block.cpp
  scopes:
    - punctuation.section.block.end.bracket.curly.cpp
  source: '}'
- scopesEnd:
    - meta.body.struct.cpp
  scopes:
    - punctuation.section.block.end.bracket.curly.struct.cpp
  source: '}'
- scopesEnd:
    - meta.block.struct.cpp
  scopes:
    - punctuation.terminator.statement.cpp
  source: ;
- scopesBegin:
    - meta.template.definition.cpp
  scopes:
    - storage.type.template.cpp
  source: template
- scopes:
    - punctuation.section.angle-brackets.start.template.definition.cpp
  source: <
- scopes:
    - storage.type.template.argument.typename
    - .cpp
  source: 'typename '
- scopes:
    - entity.name.type.template.cpp
  source: pointerT
- scopes:
    - comma.cpp
    - punctuation.separator.template.argument.cpp
  source: ','
- scopes:
    - storage.type.template.argument.typename
    - .cpp
  source: 'typename '
- scopes:
    - entity.name.type.template.cpp
  source: hashT
- scopes:
    - comma.cpp
    - punctuation.separator.template.argument.cpp
  source: ','
- scopes:
    - storage.type.template.argument.typename
    - .cpp
  source: 'typename '
- scopes:
    - entity.name.type.template.cpp
  source: allocatorT
- scopesEnd:
    - meta.template.definition.cpp
  scopes:
    - punctuation.section.angle-brackets.end.template.definition.cpp
  source: '>'
- scopesBegin:
    - meta.block.struct.cpp
    - meta.head.struct.cpp
  scopes:
    - storage.type.struct.cpp
  source: struct
- scopes:
    - entity.name.type.struct.cpp
  source: copy_storage_helper
- scopesBegin:
    - meta.template.call.cpp
  scopes:
    - punctuation.section.angle-brackets.begin.template.call.cpp
  source: <
- scopes:
    - storage.type.user-defined.cpp
  source: pointerT
- scopes:
    - comma.cpp
    - punctuation.separator.template.argument.cpp
  source: ','
- scopes:
    - storage.type.user-defined.cpp
  source: hashT
- scopes:
    - comma.cpp
    - punctuation.separator.template.argument.cpp
  source: ','
- scopes:
    - storage.type.user-defined.cpp
  source: allocatorT
- scopes:
    - comma.cpp
    - punctuation.separator.template.argument.cpp
  source: ','
- scopes:
    - constant.language.false.cpp
  source: 'false'
- scopesEnd:
    - meta.template.call.cpp
  scopes:
    - punctuation.section.angle-brackets.end.template.call.cpp
  source: '>'
- scopesBegin:
    - comment.line.double-slash.cpp
  scopes:
    - punctuation.definition.comment.cpp
  source: //
- scopesEnd:
    - comment.line.double-slash.cpp
  source: ' copyableT'
- scopesEnd:
    - meta.head.struct.cpp
  scopes:
    - punctuation.section.block.begin.bracket.curly.struct.cpp
  source: '{'
- scopesBegin:
    - meta.body.struct.cpp
    - support.other.attribute.cpp
  scopes:
    - punctuation.section.attribute.begin.cpp
  source: '[['
- scopes:
    - entity.other.attribute.noreturn.cpp
  source: noreturn
- scopesEnd:
    - support.other.attribute.cpp
  scopes:
    - punctuation.section.attribute.end.cpp
  source: ']]'
- scopes:
    - storage.type.primitive.cpp
  source: void
- scopesBegin:
    - meta.function.definition.parameters.operator-overload.cpp
  scopes:
    - keyword.other.operator.overload.cpp
  source: operator
- scopes:
    - entity.name.operator.overloadee.cpp
  source: ()
- scopes:
    - punctuation.section.parameters.begin.bracket.round.operator-overload.cpp
  source: (
- source: 'pointerT '
- scopesBegin:
    - comment.block.cpp
  scopes:
    - punctuation.definition.comment.begin.cpp
  source: /*
- source: ptr
- scopesEnd:
    - comment.block.cpp
  scopes:
    - punctuation.definition.comment.end.cpp
  source: '*/'
- scopes:
    - comma.cpp
    - punctuation.separator.delimiter.cpp
  source: ','
- scopes:
    - storage.modifier.specifier.const.cpp
  source: const
- source: ' hashT'
- scopes:
    - keyword.operator.cpp
  source: '&'
- scopesBegin:
    - comment.block.cpp
  scopes:
    - punctuation.definition.comment.begin.cpp
  source: /*
- source: hf
- scopesEnd:
    - comment.block.cpp
  scopes:
    - punctuation.definition.comment.end.cpp
  source: '*/'
- scopes:
    - comma.cpp
    - punctuation.separator.delimiter.cpp
  source: ','
- source: ' pointerT '
- scopesBegin:
    - comment.block.cpp
  scopes:
    - punctuation.definition.comment.begin.cpp
  source: /*
- source: ptr_old
- scopesEnd:
    - comment.block.cpp
  scopes:
    - punctuation.definition.comment.end.cpp
  source: '*/'
- scopes:
    - comma.cpp
    - punctuation.separator.delimiter.cpp
  source: ','
- scopes:
    - storage.type.cpp
  source: size_t
- scopesBegin:
    - comment.block.cpp
  scopes:
    - punctuation.definition.comment.begin.cpp
  source: /*
- source: 'off'
- scopesEnd:
    - comment.block.cpp
  scopes:
    - punctuation.definition.comment.end.cpp
  source: '*/'
- scopes:
    - comma.cpp
    - punctuation.separator.delimiter.cpp
  source: ','
- scopes:
    - storage.type.cpp
  source: size_t
- scopesBegin:
    - comment.block.cpp
  scopes:
    - punctuation.definition.comment.begin.cpp
  source: /*
- source: cnt
- scopesEnd:
    - comment.block.cpp
  scopes:
    - punctuation.definition.comment.end.cpp
  source: '*/'
- scopesEnd:
    - meta.function.definition.parameters.operator-overload.cpp
  scopes:
    - punctuation.section.parameters.end.bracket.round.operator-overload.cpp
  source: )
- scopes:
    - storage.modifier.specifier.functional.post-parameters.const.cpp
  source: const
- scopesBegin:
    - meta.block.cpp
  scopes:
    - punctuation.section.block.begin.bracket.curly.cpp
  source: '{'
- scopesBegin:
    - comment.line.double-slash.cpp
  scopes:
    - punctuation.definition.comment.cpp
  source: //
- source: ' `allocatorT::value_type` is not copy-constructible.'
- scopes:
    - punctuation.definition.comment.cpp
  source: //
- scopesEnd:
    - comment.line.double-slash.cpp
  source: ' Throw an exception unconditionally, even when there is nothing to copy.'
- scopesBegin:
    - meta.scope-resolution.cpp
  scopes:
    - entity.name.type.namespace.scope-resolution.cpp
  source: noadl
- scopesEnd:
    - meta.scope-resolution.cpp
  scopes:
    - punctuation.separator.namespace.access.cpp
  source: '::'
- scopesBegin:
    - meta.function-call.cpp
  scopes:
    - entity.name.function.call.cpp
  source: sprintf_and_throw
- scopesBegin:
    - meta.template.call.cpp
  scopes:
    - keyword.operator.comparison.cpp
  source: <
- scopes:
    - storage.type.user-defined.cpp
  source: domain_error
- scopesEnd:
    - meta.template.call.cpp
  scopes:
    - keyword.operator.comparison.cpp
  source: '>'
- scopes:
    - punctuation.section.arguments.begin.bracket.round.cpp
  source: (
- scopesBegin:
    - string.quoted.double.cpp
  scopes:
    - punctuation.definition.string.begin.cpp
  source: '"'
- source: 'cow_hashmap: `'
- scopes:
    - constant.other.placeholder.cpp
  source: '%s'
- source: '` is not copy-constructible.'
- scopesEnd:
    - string.quoted.double.cpp
  scopes:
    - punctuation.definition.string.end.cpp
  source: '"'
- scopes:
    - comma.cpp
    - punctuation.separator.delimiter.cpp
  source: ','
- scopes:
    - keyword.operator.functionlike.cpp
    - keyword.operator.typeid.cpp
  source: typeid
- scopes:
    - punctuation.section.arguments.begin.bracket.round.operator.typeid.cpp
  source: (
- scopesBegin:
    - meta.arguments.operator.typeid
  scopes:
    - storage.modifier.cpp
  source: typename
- scopesBegin:
    - meta.scope-resolution.cpp
  scopes:
    - entity.name.type.namespace.scope-resolution.cpp
  source: allocatorT
- scopesEnd:
    - meta.scope-resolution.cpp
  scopes:
    - punctuation.separator.namespace.access.cpp
  source: '::'
- scopesEnd:
    - meta.arguments.operator.typeid
  source: value_type
- scopes:
    - punctuation.section.arguments.end.bracket.round.operator.typeid.cpp
  source: )
- scopes:
    - punctuation.separator.dot-access.cpp
  source: .
- scopes:
    - entity.name.function.member.cpp
  source: name
- scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member.cpp
  source: (
- scopes:
    - punctuation.section.arguments.end.bracket.round.function.member.cpp
  source: )
- scopesEnd:
    - meta.function-call.cpp
  scopes:
    - punctuation.section.arguments.end.bracket.round.cpp
  source: )
- scopes:
    - punctuation.terminator.statement.cpp
  source: ;
- scopesEnd:
    - meta.block.cpp
  scopes:
    - punctuation.section.block.end.bracket.curly.cpp
  source: '}'
- scopesEnd:
    - meta.body.struct.cpp
  scopes:
    - punctuation.section.block.end.bracket.curly.struct.cpp
  source: '}'
- scopes:
    - punctuation.terminator.statement.cpp
  source: ;
