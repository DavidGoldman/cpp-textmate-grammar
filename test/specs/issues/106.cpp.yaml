- source: template
  scopes:
    - storage.type.template
- source: <
  scopes:
    - punctuation.section.angle-brackets.start.template.definition
- source: 'bool '
  scopesBegin:
    - meta.template.definition
  scopes:
    - storage.type.template
- source: check
  scopes:
    - entity.name.type.template
- source: =
  scopes:
    - keyword.operator.assignment
- source: '!'
  scopes:
    - keyword.operator.logical
- source: Identity
  scopes:
    - storage.type.template.argument.Identity
- source: ','
  scopes:
    - comma
    - punctuation.separator.template.argument
- source: class
  scopes:
    - entity.name.type.template
- source: =
  scopes:
    - keyword.operator.assignment
- source: std
  scopes:
    - entity.name.scope-resolution.template.definition
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution.template.definition
- source: enable_if_t
  scopes:
    - support.type.posix-reserved
- source: <
  scopesBegin:
    - meta.template.call
    - meta.template.call
  scopes:
    - punctuation.section.angle-brackets.begin.template.call
- source: check
  scopes:
    - storage.type.user-defined
- source: '>'
  scopes:
    - punctuation.section.angle-brackets.end.template.call
  scopesEnd:
    - meta.template.definition
    - meta.template.call
    - meta.template.call
- source: '>'
  scopes:
    - punctuation.section.angle-brackets.end.template.definition
- source: 'result_type '
- source: operator
  scopesBegin:
    - meta.function.definition.parameters.operator-overload
  scopes:
    - keyword.other.operator.overload
- source: ()
  scopes:
    - entity.name.operator.overloadee
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round.operator-overload
- source: 'argument_type '
- source: k
  scopes:
    - variable.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round.operator-overload
  scopesEnd:
    - meta.function.definition.parameters.operator-overload
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: template
  scopes:
    - storage.type.template
- source: <
  scopes:
    - punctuation.section.angle-brackets.start.template.definition
- source: 'class '
  scopesBegin:
    - meta.template.definition
  scopes:
    - storage.type.template.argument.class
    - ''
- source: A
  scopes:
    - entity.name.type.template
- source: ','
  scopes:
    - comma
    - punctuation.separator.template.argument
- source: 'class '
  scopes:
    - storage.type.template
- source: B
  scopes:
    - entity.name.type.template
- source: =
  scopes:
    - keyword.operator.assignment
- source: C
  scopes:
    - storage.type.template.argument.C
- source: ','
  scopes:
    - comma
    - punctuation.separator.template.argument
- source: 'typename '
  scopes:
    - storage.type.template
- source: D
  scopes:
    - entity.name.type.template
- source: =
  scopes:
    - keyword.operator.assignment
- source: E
  scopes:
    - storage.type.template.argument.E
  scopesEnd:
    - meta.template.definition
- source: '>'
  scopes:
    - punctuation.section.angle-brackets.end.template.definition
