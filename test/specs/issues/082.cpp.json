[
    {
        "source": "struct",
        "scopesBegin": [
            "meta.block.struct.cpp",
            "meta.head.struct.cpp"
        ],
        "scopes": [
            "storage.type.struct.cpp"
        ]
    },
    {
        "source": "copy_storage_helper",
        "scopes": [
            "entity.name.type.struct.cpp"
        ]
    },
    {
        "source": "<",
        "scopesBegin": [
            "meta.template.call.cpp"
        ],
        "scopes": [
            "punctuation.section.angle-brackets.begin.template.call.cpp"
        ]
    },
    {
        "source": "pointerT",
        "scopes": [
            "storage.type.user-defined.cpp"
        ]
    },
    {
        "source": ",",
        "scopes": [
            "comma.cpp",
            "punctuation.separator.template.argument.cpp"
        ]
    },
    {
        "source": "hashT",
        "scopes": [
            "storage.type.user-defined.cpp"
        ]
    },
    {
        "source": ",",
        "scopes": [
            "comma.cpp",
            "punctuation.separator.template.argument.cpp"
        ]
    },
    {
        "source": "allocatorT",
        "scopes": [
            "storage.type.user-defined.cpp"
        ]
    },
    {
        "source": ",",
        "scopes": [
            "comma.cpp",
            "punctuation.separator.template.argument.cpp"
        ]
    },
    {
        "source": "false",
        "scopes": [
            "constant.language.false.cpp"
        ]
    },
    {
        "source": ">",
        "scopes": [
            "punctuation.section.angle-brackets.end.template.call.cpp"
        ],
        "scopesEnd": [
            "meta.template.call.cpp"
        ]
    },
    {
        "source": "//",
        "scopesBegin": [
            "comment.line.double-slash.cpp"
        ],
        "scopes": [
            "punctuation.definition.comment.cpp"
        ]
    },
    {
        "source": " copyableT",
        "scopesEnd": [
            "comment.line.double-slash.cpp"
        ]
    },
    {
        "source": "{",
        "scopes": [
            "punctuation.section.block.begin.bracket.curly.struct.cpp"
        ],
        "scopesEnd": [
            "meta.head.struct.cpp"
        ]
    },
    {
        "source": "[[",
        "scopesBegin": [
            "meta.body.struct.cpp",
            "support.other.attribute.cpp"
        ],
        "scopes": [
            "punctuation.section.attribute.begin.cpp"
        ]
    },
    {
        "source": "noreturn",
        "scopes": [
            "entity.other.attribute.noreturn.cpp"
        ]
    },
    {
        "source": "]]",
        "scopes": [
            "punctuation.section.attribute.end.cpp"
        ],
        "scopesEnd": [
            "support.other.attribute.cpp"
        ]
    },
    {
        "source": "void",
        "scopes": [
            "storage.type.primitive.cpp"
        ]
    },
    {
        "source": "operator",
        "scopesBegin": [
            "meta.function.definition.parameters.operator-overload.cpp"
        ],
        "scopes": [
            "keyword.other.operator.overload.cpp"
        ]
    },
    {
        "source": "()",
        "scopes": [
            "entity.name.operator.overloadee.cpp"
        ]
    },
    {
        "source": "(",
        "scopes": [
            "punctuation.section.parameters.begin.bracket.round.operator-overload.cpp"
        ]
    },
    {
        "source": "pointerT "
    },
    {
        "source": "/*",
        "scopesBegin": [
            "comment.block.cpp"
        ],
        "scopes": [
            "punctuation.definition.comment.begin.cpp"
        ]
    },
    {
        "source": "ptr"
    },
    {
        "source": "*/",
        "scopes": [
            "punctuation.definition.comment.end.cpp"
        ],
        "scopesEnd": [
            "comment.block.cpp"
        ]
    },
    {
        "source": ",",
        "scopes": [
            "comma.cpp",
            "punctuation.separator.delimiter.cpp"
        ]
    },
    {
        "source": "const",
        "scopes": [
            "storage.modifier.specifier.const.cpp"
        ]
    },
    {
        "source": " hashT"
    },
    {
        "source": "&",
        "scopes": [
            "keyword.operator.cpp"
        ]
    },
    {
        "source": "/*",
        "scopesBegin": [
            "comment.block.cpp"
        ],
        "scopes": [
            "punctuation.definition.comment.begin.cpp"
        ]
    },
    {
        "source": "hf"
    },
    {
        "source": "*/",
        "scopes": [
            "punctuation.definition.comment.end.cpp"
        ],
        "scopesEnd": [
            "comment.block.cpp"
        ]
    },
    {
        "source": ",",
        "scopes": [
            "comma.cpp",
            "punctuation.separator.delimiter.cpp"
        ]
    },
    {
        "source": " pointerT "
    },
    {
        "source": "/*",
        "scopesBegin": [
            "comment.block.cpp"
        ],
        "scopes": [
            "punctuation.definition.comment.begin.cpp"
        ]
    },
    {
        "source": "ptr_old"
    },
    {
        "source": "*/",
        "scopes": [
            "punctuation.definition.comment.end.cpp"
        ],
        "scopesEnd": [
            "comment.block.cpp"
        ]
    },
    {
        "source": ",",
        "scopes": [
            "comma.cpp",
            "punctuation.separator.delimiter.cpp"
        ]
    },
    {
        "source": "size_t",
        "scopes": [
            "storage.type.cpp"
        ]
    },
    {
        "source": "/*",
        "scopesBegin": [
            "comment.block.cpp"
        ],
        "scopes": [
            "punctuation.definition.comment.begin.cpp"
        ]
    },
    {
        "source": "off"
    },
    {
        "source": "*/",
        "scopes": [
            "punctuation.definition.comment.end.cpp"
        ],
        "scopesEnd": [
            "comment.block.cpp"
        ]
    },
    {
        "source": ",",
        "scopes": [
            "comma.cpp",
            "punctuation.separator.delimiter.cpp"
        ]
    },
    {
        "source": "size_t",
        "scopes": [
            "storage.type.cpp"
        ]
    },
    {
        "source": "/*",
        "scopesBegin": [
            "comment.block.cpp"
        ],
        "scopes": [
            "punctuation.definition.comment.begin.cpp"
        ]
    },
    {
        "source": "cnt"
    },
    {
        "source": "*/",
        "scopes": [
            "punctuation.definition.comment.end.cpp"
        ],
        "scopesEnd": [
            "comment.block.cpp"
        ]
    },
    {
        "source": ")",
        "scopes": [
            "punctuation.section.parameters.end.bracket.round.operator-overload.cpp"
        ],
        "scopesEnd": [
            "meta.function.definition.parameters.operator-overload.cpp"
        ]
    },
    {
        "source": "const",
        "scopes": [
            "storage.modifier.specifier.functional.post-parameters.const.cpp"
        ]
    },
    {
        "source": "{",
        "scopesBegin": [
            "meta.block.cpp"
        ],
        "scopes": [
            "punctuation.section.block.begin.bracket.curly.cpp"
        ]
    },
    {
        "source": "//",
        "scopesBegin": [
            "comment.line.double-slash.cpp"
        ],
        "scopes": [
            "punctuation.definition.comment.cpp"
        ]
    },
    {
        "source": " `allocatorT::value_type` is not copy-constructible."
    },
    {
        "source": "//",
        "scopes": [
            "punctuation.definition.comment.cpp"
        ]
    },
    {
        "source": " Throw an exception unconditionally, even when there is nothing to copy.",
        "scopesEnd": [
            "comment.line.double-slash.cpp"
        ]
    },
    {
        "source": "noadl",
        "scopesBegin": [
            "meta.scope-resolution.cpp"
        ],
        "scopes": [
            "entity.name.type.namespace.scope-resolution.cpp"
        ]
    },
    {
        "source": "::",
        "scopes": [
            "punctuation.separator.namespace.access.cpp"
        ],
        "scopesEnd": [
            "meta.scope-resolution.cpp"
        ]
    },
    {
        "source": "sprintf_and_throw",
        "scopesBegin": [
            "meta.function-call.cpp"
        ],
        "scopes": [
            "entity.name.function.call.cpp"
        ]
    },
    {
        "source": "<",
        "scopesBegin": [
            "meta.template.call.cpp"
        ],
        "scopes": [
            "keyword.operator.comparison.cpp"
        ]
    },
    {
        "source": "domain_error",
        "scopes": [
            "storage.type.user-defined.cpp"
        ]
    },
    {
        "source": ">",
        "scopes": [
            "keyword.operator.comparison.cpp"
        ],
        "scopesEnd": [
            "meta.template.call.cpp"
        ]
    },
    {
        "source": "(",
        "scopes": [
            "punctuation.section.arguments.begin.bracket.round.cpp"
        ]
    },
    {
        "source": "\"",
        "scopesBegin": [
            "string.quoted.double.cpp"
        ],
        "scopes": [
            "punctuation.definition.string.begin.cpp"
        ]
    },
    {
        "source": "cow_hashmap: `"
    },
    {
        "source": "%s",
        "scopes": [
            "constant.other.placeholder.cpp"
        ]
    },
    {
        "source": "` is not copy-constructible."
    },
    {
        "source": "\"",
        "scopes": [
            "punctuation.definition.string.end.cpp"
        ],
        "scopesEnd": [
            "string.quoted.double.cpp"
        ]
    },
    {
        "source": ",",
        "scopes": [
            "comma.cpp",
            "punctuation.separator.delimiter.cpp"
        ]
    },
    {
        "source": "typeid",
        "scopes": [
            "keyword.operator.functionlike.cpp",
            "keyword.operator.typeid.cpp"
        ]
    },
    {
        "source": "(",
        "scopes": [
            "punctuation.section.arguments.begin.bracket.round.operator.typeid.cpp"
        ]
    },
    {
        "source": "typename",
        "scopesBegin": [
            "meta.arguments.operator.typeid"
        ],
        "scopes": [
            "storage.modifier.cpp"
        ]
    },
    {
        "source": "allocatorT",
        "scopesBegin": [
            "meta.scope-resolution.cpp"
        ],
        "scopes": [
            "entity.name.type.namespace.scope-resolution.cpp"
        ]
    },
    {
        "source": "::",
        "scopes": [
            "punctuation.separator.namespace.access.cpp"
        ],
        "scopesEnd": [
            "meta.scope-resolution.cpp"
        ]
    },
    {
        "source": "value_type",
        "scopesEnd": [
            "meta.arguments.operator.typeid"
        ]
    },
    {
        "source": ")",
        "scopes": [
            "punctuation.section.arguments.end.bracket.round.operator.typeid.cpp"
        ]
    },
    {
        "source": ".",
        "scopes": [
            "punctuation.separator.dot-access.cpp"
        ]
    },
    {
        "source": "name",
        "scopes": [
            "entity.name.function.member.cpp"
        ]
    },
    {
        "source": "(",
        "scopes": [
            "punctuation.section.arguments.begin.bracket.round.function.member.cpp"
        ]
    },
    {
        "source": ")",
        "scopes": [
            "punctuation.section.arguments.end.bracket.round.function.member.cpp"
        ]
    },
    {
        "source": ")",
        "scopes": [
            "punctuation.section.arguments.end.bracket.round.cpp"
        ],
        "scopesEnd": [
            "meta.function-call.cpp"
        ]
    },
    {
        "source": ";",
        "scopes": [
            "punctuation.terminator.statement.cpp"
        ]
    },
    {
        "source": "}",
        "scopes": [
            "punctuation.section.block.end.bracket.curly.cpp"
        ],
        "scopesEnd": [
            "meta.block.cpp"
        ]
    },
    {
        "source": "}",
        "scopes": [
            "punctuation.section.block.end.bracket.curly.struct.cpp"
        ],
        "scopesEnd": [
            "meta.body.struct.cpp"
        ]
    },
    {
        "source": ";",
        "scopes": [
            "punctuation.terminator.statement.cpp"
        ],
        "scopesEnd": [
            "meta.block.struct.cpp"
        ]
    },
    {
        "source": "template",
        "scopesBegin": [
            "meta.template.definition.cpp"
        ],
        "scopes": [
            "storage.type.template.cpp"
        ]
    },
    {
        "source": "<",
        "scopes": [
            "punctuation.section.angle-brackets.start.template.definition.cpp"
        ]
    },
    {
        "source": "typename ",
        "scopes": [
            "storage.type.template.argument.typename",
            ".cpp"
        ]
    },
    {
        "source": "pointerT",
        "scopes": [
            "entity.name.type.template.cpp"
        ]
    },
    {
        "source": ",",
        "scopes": [
            "comma.cpp",
            "punctuation.separator.template.argument.cpp"
        ]
    },
    {
        "source": "typename ",
        "scopes": [
            "storage.type.template.argument.typename",
            ".cpp"
        ]
    },
    {
        "source": "hashT",
        "scopes": [
            "entity.name.type.template.cpp"
        ]
    },
    {
        "source": ",",
        "scopes": [
            "comma.cpp",
            "punctuation.separator.template.argument.cpp"
        ]
    },
    {
        "source": "typename ",
        "scopes": [
            "storage.type.template.argument.typename",
            ".cpp"
        ]
    },
    {
        "source": "allocatorT",
        "scopes": [
            "entity.name.type.template.cpp"
        ]
    },
    {
        "source": ">",
        "scopes": [
            "punctuation.section.angle-brackets.end.template.definition.cpp"
        ],
        "scopesEnd": [
            "meta.template.definition.cpp"
        ]
    },
    {
        "source": "struct",
        "scopesBegin": [
            "meta.block.struct.cpp",
            "meta.head.struct.cpp"
        ],
        "scopes": [
            "storage.type.struct.cpp"
        ]
    },
    {
        "source": "copy_storage_helper",
        "scopes": [
            "entity.name.type.struct.cpp"
        ]
    },
    {
        "source": "<",
        "scopesBegin": [
            "meta.template.call.cpp"
        ],
        "scopes": [
            "punctuation.section.angle-brackets.begin.template.call.cpp"
        ]
    },
    {
        "source": "pointerT",
        "scopes": [
            "storage.type.user-defined.cpp"
        ]
    },
    {
        "source": ",",
        "scopes": [
            "comma.cpp",
            "punctuation.separator.template.argument.cpp"
        ]
    },
    {
        "source": "hashT",
        "scopes": [
            "storage.type.user-defined.cpp"
        ]
    },
    {
        "source": ",",
        "scopes": [
            "comma.cpp",
            "punctuation.separator.template.argument.cpp"
        ]
    },
    {
        "source": "allocatorT",
        "scopes": [
            "storage.type.user-defined.cpp"
        ]
    },
    {
        "source": ",",
        "scopes": [
            "comma.cpp",
            "punctuation.separator.template.argument.cpp"
        ]
    },
    {
        "source": "false",
        "scopes": [
            "constant.language.false.cpp"
        ]
    },
    {
        "source": ">",
        "scopes": [
            "punctuation.section.angle-brackets.end.template.call.cpp"
        ],
        "scopesEnd": [
            "meta.template.call.cpp"
        ]
    },
    {
        "source": "//",
        "scopesBegin": [
            "comment.line.double-slash.cpp"
        ],
        "scopes": [
            "punctuation.definition.comment.cpp"
        ]
    },
    {
        "source": " copyableT",
        "scopesEnd": [
            "comment.line.double-slash.cpp"
        ]
    },
    {
        "source": "{",
        "scopes": [
            "punctuation.section.block.begin.bracket.curly.struct.cpp"
        ],
        "scopesEnd": [
            "meta.head.struct.cpp"
        ]
    },
    {
        "source": "[[",
        "scopesBegin": [
            "meta.body.struct.cpp",
            "support.other.attribute.cpp"
        ],
        "scopes": [
            "punctuation.section.attribute.begin.cpp"
        ]
    },
    {
        "source": "noreturn",
        "scopes": [
            "entity.other.attribute.noreturn.cpp"
        ]
    },
    {
        "source": "]]",
        "scopes": [
            "punctuation.section.attribute.end.cpp"
        ],
        "scopesEnd": [
            "support.other.attribute.cpp"
        ]
    },
    {
        "source": "void",
        "scopes": [
            "storage.type.primitive.cpp"
        ]
    },
    {
        "source": "operator",
        "scopesBegin": [
            "meta.function.definition.parameters.operator-overload.cpp"
        ],
        "scopes": [
            "keyword.other.operator.overload.cpp"
        ]
    },
    {
        "source": "()",
        "scopes": [
            "entity.name.operator.overloadee.cpp"
        ]
    },
    {
        "source": "(",
        "scopes": [
            "punctuation.section.parameters.begin.bracket.round.operator-overload.cpp"
        ]
    },
    {
        "source": "pointerT "
    },
    {
        "source": "/*",
        "scopesBegin": [
            "comment.block.cpp"
        ],
        "scopes": [
            "punctuation.definition.comment.begin.cpp"
        ]
    },
    {
        "source": "ptr"
    },
    {
        "source": "*/",
        "scopes": [
            "punctuation.definition.comment.end.cpp"
        ],
        "scopesEnd": [
            "comment.block.cpp"
        ]
    },
    {
        "source": ",",
        "scopes": [
            "comma.cpp",
            "punctuation.separator.delimiter.cpp"
        ]
    },
    {
        "source": "const",
        "scopes": [
            "storage.modifier.specifier.const.cpp"
        ]
    },
    {
        "source": " hashT"
    },
    {
        "source": "&",
        "scopes": [
            "keyword.operator.cpp"
        ]
    },
    {
        "source": "/*",
        "scopesBegin": [
            "comment.block.cpp"
        ],
        "scopes": [
            "punctuation.definition.comment.begin.cpp"
        ]
    },
    {
        "source": "hf"
    },
    {
        "source": "*/",
        "scopes": [
            "punctuation.definition.comment.end.cpp"
        ],
        "scopesEnd": [
            "comment.block.cpp"
        ]
    },
    {
        "source": ",",
        "scopes": [
            "comma.cpp",
            "punctuation.separator.delimiter.cpp"
        ]
    },
    {
        "source": " pointerT "
    },
    {
        "source": "/*",
        "scopesBegin": [
            "comment.block.cpp"
        ],
        "scopes": [
            "punctuation.definition.comment.begin.cpp"
        ]
    },
    {
        "source": "ptr_old"
    },
    {
        "source": "*/",
        "scopes": [
            "punctuation.definition.comment.end.cpp"
        ],
        "scopesEnd": [
            "comment.block.cpp"
        ]
    },
    {
        "source": ",",
        "scopes": [
            "comma.cpp",
            "punctuation.separator.delimiter.cpp"
        ]
    },
    {
        "source": "size_t",
        "scopes": [
            "storage.type.cpp"
        ]
    },
    {
        "source": "/*",
        "scopesBegin": [
            "comment.block.cpp"
        ],
        "scopes": [
            "punctuation.definition.comment.begin.cpp"
        ]
    },
    {
        "source": "off"
    },
    {
        "source": "*/",
        "scopes": [
            "punctuation.definition.comment.end.cpp"
        ],
        "scopesEnd": [
            "comment.block.cpp"
        ]
    },
    {
        "source": ",",
        "scopes": [
            "comma.cpp",
            "punctuation.separator.delimiter.cpp"
        ]
    },
    {
        "source": "size_t",
        "scopes": [
            "storage.type.cpp"
        ]
    },
    {
        "source": "/*",
        "scopesBegin": [
            "comment.block.cpp"
        ],
        "scopes": [
            "punctuation.definition.comment.begin.cpp"
        ]
    },
    {
        "source": "cnt"
    },
    {
        "source": "*/",
        "scopes": [
            "punctuation.definition.comment.end.cpp"
        ],
        "scopesEnd": [
            "comment.block.cpp"
        ]
    },
    {
        "source": ")",
        "scopes": [
            "punctuation.section.parameters.end.bracket.round.operator-overload.cpp"
        ],
        "scopesEnd": [
            "meta.function.definition.parameters.operator-overload.cpp"
        ]
    },
    {
        "source": "const",
        "scopes": [
            "storage.modifier.specifier.functional.post-parameters.const.cpp"
        ]
    },
    {
        "source": "{",
        "scopesBegin": [
            "meta.block.cpp"
        ],
        "scopes": [
            "punctuation.section.block.begin.bracket.curly.cpp"
        ]
    },
    {
        "source": "//",
        "scopesBegin": [
            "comment.line.double-slash.cpp"
        ],
        "scopes": [
            "punctuation.definition.comment.cpp"
        ]
    },
    {
        "source": " `allocatorT::value_type` is not copy-constructible."
    },
    {
        "source": "//",
        "scopes": [
            "punctuation.definition.comment.cpp"
        ]
    },
    {
        "source": " Throw an exception unconditionally, even when there is nothing to copy.",
        "scopesEnd": [
            "comment.line.double-slash.cpp"
        ]
    },
    {
        "source": "noadl",
        "scopesBegin": [
            "meta.scope-resolution.cpp"
        ],
        "scopes": [
            "entity.name.type.namespace.scope-resolution.cpp"
        ]
    },
    {
        "source": "::",
        "scopes": [
            "punctuation.separator.namespace.access.cpp"
        ],
        "scopesEnd": [
            "meta.scope-resolution.cpp"
        ]
    },
    {
        "source": "sprintf_and_throw",
        "scopesBegin": [
            "meta.function-call.cpp"
        ],
        "scopes": [
            "entity.name.function.call.cpp"
        ]
    },
    {
        "source": "<",
        "scopesBegin": [
            "meta.template.call.cpp"
        ],
        "scopes": [
            "keyword.operator.comparison.cpp"
        ]
    },
    {
        "source": "domain_error",
        "scopes": [
            "storage.type.user-defined.cpp"
        ]
    },
    {
        "source": ">",
        "scopes": [
            "keyword.operator.comparison.cpp"
        ],
        "scopesEnd": [
            "meta.template.call.cpp"
        ]
    },
    {
        "source": "(",
        "scopes": [
            "punctuation.section.arguments.begin.bracket.round.cpp"
        ]
    },
    {
        "source": "\"",
        "scopesBegin": [
            "string.quoted.double.cpp"
        ],
        "scopes": [
            "punctuation.definition.string.begin.cpp"
        ]
    },
    {
        "source": "cow_hashmap: `"
    },
    {
        "source": "%s",
        "scopes": [
            "constant.other.placeholder.cpp"
        ]
    },
    {
        "source": "` is not copy-constructible."
    },
    {
        "source": "\"",
        "scopes": [
            "punctuation.definition.string.end.cpp"
        ],
        "scopesEnd": [
            "string.quoted.double.cpp"
        ]
    },
    {
        "source": ",",
        "scopes": [
            "comma.cpp",
            "punctuation.separator.delimiter.cpp"
        ]
    },
    {
        "source": "typeid",
        "scopes": [
            "keyword.operator.functionlike.cpp",
            "keyword.operator.typeid.cpp"
        ]
    },
    {
        "source": "(",
        "scopes": [
            "punctuation.section.arguments.begin.bracket.round.operator.typeid.cpp"
        ]
    },
    {
        "source": "typename",
        "scopesBegin": [
            "meta.arguments.operator.typeid"
        ],
        "scopes": [
            "storage.modifier.cpp"
        ]
    },
    {
        "source": "allocatorT",
        "scopesBegin": [
            "meta.scope-resolution.cpp"
        ],
        "scopes": [
            "entity.name.type.namespace.scope-resolution.cpp"
        ]
    },
    {
        "source": "::",
        "scopes": [
            "punctuation.separator.namespace.access.cpp"
        ],
        "scopesEnd": [
            "meta.scope-resolution.cpp"
        ]
    },
    {
        "source": "value_type",
        "scopesEnd": [
            "meta.arguments.operator.typeid"
        ]
    },
    {
        "source": ")",
        "scopes": [
            "punctuation.section.arguments.end.bracket.round.operator.typeid.cpp"
        ]
    },
    {
        "source": ".",
        "scopes": [
            "punctuation.separator.dot-access.cpp"
        ]
    },
    {
        "source": "name",
        "scopes": [
            "entity.name.function.member.cpp"
        ]
    },
    {
        "source": "(",
        "scopes": [
            "punctuation.section.arguments.begin.bracket.round.function.member.cpp"
        ]
    },
    {
        "source": ")",
        "scopes": [
            "punctuation.section.arguments.end.bracket.round.function.member.cpp"
        ]
    },
    {
        "source": ")",
        "scopes": [
            "punctuation.section.arguments.end.bracket.round.cpp"
        ],
        "scopesEnd": [
            "meta.function-call.cpp"
        ]
    },
    {
        "source": ";",
        "scopes": [
            "punctuation.terminator.statement.cpp"
        ]
    },
    {
        "source": "}",
        "scopes": [
            "punctuation.section.block.end.bracket.curly.cpp"
        ],
        "scopesEnd": [
            "meta.block.cpp"
        ]
    },
    {
        "source": "}",
        "scopes": [
            "punctuation.section.block.end.bracket.curly.struct.cpp"
        ],
        "scopesEnd": [
            "meta.body.struct.cpp"
        ]
    },
    {
        "source": ";",
        "scopes": [
            "punctuation.terminator.statement.cpp"
        ]
    }
]