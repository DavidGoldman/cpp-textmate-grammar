- scopes:
    - storage.type.primitive.cpp
  source: void
- scopesBegin:
    - meta.function.definition.parameters.cpp
    - meta.function.definition.parameters.cpp
  scopes:
    - entity.name.function.cpp
  source: function
- scopes:
    - punctuation.section.parameters.begin.bracket.round.cpp
  source: (
- scopesEnd:
    - meta.function.definition.parameters.cpp
    - meta.function.definition.parameters.cpp
  scopes:
    - punctuation.section.parameters.end.bracket.round.cpp
  source: )
- scopesBegin:
    - meta.block.cpp
  scopes:
    - punctuation.section.block.begin.bracket.curly.cpp
  source: '{'
- scopesBegin:
    - meta.function-call.cpp
  scopes:
    - entity.name.function.call.cpp
  source: putIfExists
- scopesBegin:
    - meta.template.call.cpp
  scopes:
    - keyword.operator.comparison.cpp
  source: <
- scopes:
    - storage.type.user-defined.cpp
  source: string
- scopesEnd:
    - meta.template.call.cpp
  scopes:
    - keyword.operator.comparison.cpp
  source: '>'
- scopes:
    - punctuation.section.arguments.begin.bracket.round.cpp
  source: (
- scopes:
    - variable.other.object.access.cpp
  source: cn
- scopes:
    - punctuation.separator.dot-access.cpp
  source: .
- scopes:
    - variable.other.property.cpp
  source: second
- scopes:
    - comma.cpp
    - punctuation.separator.delimiter.cpp
  source: ','
- source: ' common'
- scopes:
    - comma.cpp
    - punctuation.separator.delimiter.cpp
  source: ','
- scopesBegin:
    - string.quoted.double.cpp
  scopes:
    - punctuation.definition.string.begin.cpp
  source: '"'
- source: type
- scopesEnd:
    - string.quoted.double.cpp
  scopes:
    - punctuation.definition.string.end.cpp
  source: '"'
- scopesEnd:
    - meta.function-call.cpp
  scopes:
    - punctuation.section.arguments.end.bracket.round.cpp
  source: )
- scopes:
    - punctuation.terminator.statement.cpp
  source: ;
- scopesBegin:
    - meta.function-call.cpp
  scopes:
    - entity.name.function.call.cpp
  source: putIfExists
- scopesBegin:
    - meta.template.call.cpp
  scopes:
    - keyword.operator.comparison.cpp
  source: <
- scopesBegin:
    - meta.scope-resolution.cpp
  scopes:
    - entity.name.type.namespace.scope-resolution.cpp
  source: std
- scopesEnd:
    - meta.scope-resolution.cpp
  scopes:
    - punctuation.separator.namespace.access.cpp
  source: '::'
- scopes:
    - storage.type.user-defined.cpp
  source: string
- scopesEnd:
    - meta.template.call.cpp
  scopes:
    - keyword.operator.comparison.cpp
  source: '>'
- scopes:
    - punctuation.section.arguments.begin.bracket.round.cpp
  source: (
- scopes:
    - variable.other.object.access.cpp
  source: cn
- scopes:
    - punctuation.separator.dot-access.cpp
  source: .
- scopes:
    - variable.other.property.cpp
  source: second
- scopes:
    - comma.cpp
    - punctuation.separator.delimiter.cpp
  source: ','
- source: ' common'
- scopes:
    - comma.cpp
    - punctuation.separator.delimiter.cpp
  source: ','
- scopesBegin:
    - string.quoted.double.cpp
  scopes:
    - punctuation.definition.string.begin.cpp
  source: '"'
- source: type
- scopesEnd:
    - string.quoted.double.cpp
  scopes:
    - punctuation.definition.string.end.cpp
  source: '"'
- scopesEnd:
    - meta.function-call.cpp
  scopes:
    - punctuation.section.arguments.end.bracket.round.cpp
  source: )
- scopes:
    - punctuation.terminator.statement.cpp
  source: ;
- scopes:
    - punctuation.section.block.end.bracket.curly.cpp
  source: '}'
