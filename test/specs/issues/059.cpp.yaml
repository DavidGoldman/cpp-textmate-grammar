- source: void
  scopes:
    - storage.type.primitive.cpp
- source: function
  scopesBegin:
    - meta.function.definition.parameters.cpp
    - meta.function.definition.parameters.cpp
  scopes:
    - entity.name.function.cpp
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round.cpp
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round.cpp
  scopesEnd:
    - meta.function.definition.parameters.cpp
    - meta.function.definition.parameters.cpp
- source: '{'
  scopesBegin:
    - meta.block.cpp
  scopes:
    - punctuation.section.block.begin.bracket.curly.cpp
- source: auto
  scopes:
    - storage.type.primitive.cpp
- source: ' postWakeup '
- source: =
  scopes:
    - keyword.operator.assignment.cpp
- source: wpi
  scopesBegin:
    - meta.scope-resolution.cpp
  scopes:
    - entity.name.type.namespace.scope-resolution.cpp
- source: '::'
  scopes:
    - punctuation.separator.namespace.access.cpp
- source: uv
  scopesBegin:
    - meta.scope-resolution.cpp
  scopes:
    - entity.name.type.namespace.scope-resolution.cpp
- source: '::'
  scopes:
    - punctuation.separator.namespace.access.cpp
  scopesEnd:
    - meta.scope-resolution.cpp
- source: Async
  scopes:
    - entity.name.type.namespace.scope-resolution.cpp
- source: <
  scopesBegin:
    - meta.template.call.cpp
    - keyword.operator.comparison.cpp
- source: '>'
  scopesEnd:
    - meta.template.call.cpp
    - keyword.operator.comparison.cpp
- source: '::'
  scopes:
    - punctuation.separator.namespace.access.cpp
  scopesEnd:
    - meta.scope-resolution.cpp
- source: Create
  scopesBegin:
    - meta.function-call.cpp
  scopes:
    - entity.name.function.call.cpp
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.cpp
- source: loop
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.cpp
  scopesEnd:
    - meta.function-call.cpp
- source: ;
  scopes:
    - punctuation.terminator.statement.cpp
- source: '    m_postMessageWakeup'
- source: =
  scopes:
    - keyword.operator.assignment.cpp
- source: ' postWakeup'
- source: ;
  scopes:
    - punctuation.terminator.statement.cpp
- source: postWakeup
  scopes:
    - variable.other.object.access.cpp
- source: '->'
  scopes:
    - punctuation.separator.pointer-access.cpp
- source: wakeup.
  scopes:
    - variable.other.object.property.cpp
- source: connect
  scopes:
    - entity.name.function.member.cpp
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member.cpp
- source: '['
  scopesBegin:
    - meta.function-call.member
  scopes:
    - punctuation.definition.capture.begin.lambda.cpp
- source: this
  scopes:
    - meta.lambda.capture.cpp
    - variable.language.this.cpp
- source: ']'
  scopes:
    - punctuation.definition.capture.end.lambda.cpp
- source: '{'
  scopesBegin:
    - meta.function.definition.body.lambda.cpp
  scopes:
    - punctuation.section.block.begin.bracket.curly.lambda.cpp
- source: auto
  scopes:
    - storage.type.primitive.cpp
- source: ' pipe '
- source: =
  scopes:
    - keyword.operator.assignment.cpp
- source: m_pipe
  scopes:
    - variable.other.object.access.cpp
- source: .
  scopes:
    - punctuation.separator.dot-access.cpp
- source: lock
  scopes:
    - entity.name.function.member.cpp
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member.cpp
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member.cpp
- source: ;
  scopes:
    - punctuation.terminator.statement.cpp
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly.lambda.cpp
  scopesEnd:
    - meta.function-call.member
    - meta.function.definition.body.lambda.cpp
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member.cpp
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly.cpp
