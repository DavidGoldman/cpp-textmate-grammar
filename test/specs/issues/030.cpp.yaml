- source: '#pragma once'
- source: '#include <type_traits>'
- source: '#define IsPointDef(...) \'
- source: '    template<> \'
- source: '    struct IsPoint<__VA_ARGS__> \'
- source: '        {\'
- source: '        static const bool isPoint = true;\'
- source: '                }'
- source: '#define ArrayBasedPointDef(T) \'
- source: '    IsPointDef(T); \'
- source: '    template<> \'
- source: '    struct IsArrayBasedPoint<T>:public std::true_type \'
- source: '        {};'
- source: '#define XYBasedPointDef(T) \'
- source: '    IsPointDef(T); \'
- source: '    template<> \'
- source: '    struct IsXYBasedPoint<T>:public std::true_type \'
- source: '{};'
- source: '#define TypeTAndUIsPoint \'
- source: '    template<typename T, typename U, class = typename std::enable_if<IsPoint<T>::isPoint>::type, class = typename std::enable_if<IsPoint<U>::isPoint>::type>'
- source: namespace Navigation
- source: '{'
- source: '    namespace Utils'
- source: '    {'
- source: '        template<typename T>'
- source: '        struct IsPoint'
- source: '        {'
- source: '            static const bool isPoint = false;'
- source: '        };'
- source: '        template<typename T>'
- source: '        struct IsArrayBasedPoint'
- source: '        {'
- source: '            static const bool value = false;'
- source: '        };'
- source: '        template<typename T>'
- source: '        struct IsXYBasedPoint'
- source: '        {'
- source: '            static const bool value = false;'
- source: '        };'
- source: '    }'
- source: '}'
