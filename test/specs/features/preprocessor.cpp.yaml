- source: '#'
  scopesBegin:
    - meta.preprocessor.include
    - keyword.control.directive.include
  scopes:
    - punctuation.definition.directive
- source: include
  scopesEnd:
    - keyword.control.directive.include
- source: <
  scopesBegin:
    - string.quoted.other.lt-gt.include
  scopes:
    - punctuation.definition.string.begin
- source: iostream
- source: '>'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.other.lt-gt.include
- source: '#'
  scopesBegin:
    - keyword.control.directive.include
  scopes:
    - punctuation.definition.directive
- source: include
  scopesEnd:
    - keyword.control.directive.include
- source: '"'
  scopesBegin:
    - string.quoted.double.include
  scopes:
    - punctuation.definition.string.begin
- source: relative_stuff
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.preprocessor.include
    - string.quoted.double.include
- source: '#'
  scopesBegin:
    - meta.preprocessor.macro
    - keyword.control.directive.define
  scopes:
    - punctuation.definition.directive
- source: define
  scopesEnd:
    - keyword.control.directive.define
- source: a
  scopes:
    - entity.name.function.preprocessor
- source: ' thing '
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: '#'
  scopesBegin:
    - keyword.control.directive.define
  scopes:
    - punctuation.definition.directive
- source: define
  scopesEnd:
    - keyword.control.directive.define
- source: a
  scopes:
    - entity.name.function.preprocessor
- source: (
  scopes:
    - punctuation.definition.parameters.begin
- source: arg1
  scopes:
    - variable.parameter.preprocessor
- source: ','
  scopes:
    - punctuation.separator.parameters
- source: arg2
  scopes:
    - variable.parameter.preprocessor
- source: )
  scopes:
    - punctuation.definition.parameters.end
- source: ' arg1 arg2'
- source: '#'
  scopesBegin:
    - keyword.control.directive.define
  scopes:
    - punctuation.definition.directive
- source: define
  scopesEnd:
    - keyword.control.directive.define
- source: a
  scopes:
    - entity.name.function.preprocessor
- source: (
  scopes:
    - punctuation.definition.parameters.begin
- source: arg1
  scopes:
    - variable.parameter.preprocessor
- source: ','
  scopes:
    - punctuation.separator.parameters
- source: arg2
  scopes:
    - variable.parameter.preprocessor
- source: )
  scopes:
    - punctuation.definition.parameters.end
- source: '#macro_variable'
  scopesBegin:
    - variable.other.macro.argument
- source: '##macro_variable'
  scopesEnd:
    - variable.other.macro.argument
- source: '#'
  scopesBegin:
    - keyword.control.directive.define
  scopes:
    - punctuation.definition.directive
- source: define
  scopesEnd:
    - keyword.control.directive.define
- source: thing
  scopes:
    - entity.name.function.preprocessor
- source: class
  scopesBegin:
    - meta.block.class
    - meta.head.class
  scopes:
    - storage.type.class
- source: Stuff
  scopes:
    - entity.name.type.class
  scopesEnd:
    - meta.block.class
    - meta.head.class
- source: '#'
  scopesBegin:
    - keyword.control.directive.define
  scopes:
    - punctuation.definition.directive
- source: define
  scopesEnd:
    - keyword.control.directive.define
- source: thing
  scopes:
    - entity.name.function.preprocessor
- source: struct
  scopesBegin:
    - meta.block.struct
    - meta.head.struct
  scopes:
    - storage.type.struct
- source: Stuff
  scopes:
    - entity.name.type.struct
  scopesEnd:
    - meta.block.struct
    - meta.head.struct
- source: '#'
  scopesBegin:
    - keyword.control.directive.define
  scopes:
    - punctuation.definition.directive
- source: define
  scopesEnd:
    - keyword.control.directive.define
- source: thing
  scopes:
    - entity.name.function.preprocessor
- source: struct
  scopesBegin:
    - meta.block.struct
    - meta.head.struct
  scopes:
    - storage.type.struct
- source: Stuff
  scopes:
    - entity.name.type.struct
- source: \
  scopes:
    - constant.character.escape.line-continuation
  scopesEnd:
    - meta.preprocessor.macro
    - meta.block.struct
    - meta.head.struct
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: '#'
  scopesBegin:
    - meta.preprocessor.pragma
    - keyword.control.directive.pragma
  scopes:
    - punctuation.definition.directive
- source: pragma
  scopesEnd:
    - keyword.control.directive.pragma
- source: once
  scopes:
    - entity.other.attribute-name.pragma.preprocessor
- source: '#'
  scopesBegin:
    - keyword.control.directive.pragma
  scopes:
    - punctuation.definition.directive
- source: pragma
  scopesEnd:
    - keyword.control.directive.pragma
- source: GCC
  scopesBegin:
    - entity.other.attribute-name.pragma.preprocessor
- source: poison
- source: printf
  scopesEnd:
    - meta.preprocessor.pragma
    - entity.other.attribute-name.pragma.preprocessor
- source: '#'
  scopesBegin:
    - meta.preprocessor.include
    - keyword.control.directive.include
  scopes:
    - punctuation.definition.directive
- source: include
  scopesEnd:
    - keyword.control.directive.include
- source: <
  scopesBegin:
    - string.quoted.other.lt-gt.include
  scopes:
    - punctuation.definition.string.begin
- source: type_traits
- source: '>'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.preprocessor.include
    - string.quoted.other.lt-gt.include
- source: '#'
  scopesBegin:
    - meta.preprocessor.macro
    - keyword.control.directive.define
  scopes:
    - punctuation.definition.directive
- source: define
  scopesEnd:
    - keyword.control.directive.define
- source: IsPointDef
  scopes:
    - entity.name.function.preprocessor
- source: (
  scopes:
    - punctuation.definition.parameters.begin
- source: ...
  scopes:
    - punctuation.vararg-ellipses.variable.parameter.preprocessor
- source: )
  scopes:
    - punctuation.definition.parameters.end
- source: \
  scopes:
    - constant.character.escape.line-continuation
  scopesEnd:
    - meta.preprocessor.macro
- source: '    template'
- source: <
  scopesBegin:
    - keyword.operator.comparison
- source: '>'
  scopesEnd:
    - keyword.operator.comparison
- source: \
  scopes:
    - constant.character.escape.line-continuation
- source: struct
  scopesBegin:
    - meta.block.struct
    - meta.head.struct
  scopes:
    - storage.type.struct
- source: IsPoint
  scopes:
    - entity.name.type.struct
- source: <
  scopesBegin:
    - meta.template.call
  scopes:
    - punctuation.section.angle-brackets.begin.template.call
- source: __VA_ARGS__
  scopes:
    - meta.qualified_type
    - entity.name.type
- source: '>'
  scopes:
    - punctuation.section.angle-brackets.end.template.call
  scopesEnd:
    - meta.template.call
- source: \
  scopes:
    - constant.character.escape.line-continuation
- source: '{'
  scopes:
    - punctuation.section.block.begin.bracket.curly.struct
  scopesEnd:
    - meta.head.struct
- source: \
  scopesBegin:
    - meta.body.struct
  scopes:
    - constant.character.escape.line-continuation
- source: static
  scopes:
    - storage.modifier.specifier.static
- source: const
  scopes:
    - storage.modifier.specifier.const
- source: bool
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: ' isPoint '
- source: =
  scopes:
    - keyword.operator.assignment
- source: 'true'
  scopes:
    - constant.language.true
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: \
  scopes:
    - constant.character.escape.line-continuation
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly.struct
  scopesEnd:
    - meta.body.struct
- source: '#'
  scopesBegin:
    - meta.tail.struct
    - meta.preprocessor.macro
    - keyword.control.directive.define
  scopes:
    - punctuation.definition.directive
- source: define
  scopesEnd:
    - keyword.control.directive.define
- source: ArrayBasedPointDef
  scopes:
    - entity.name.function.preprocessor
- source: (
  scopes:
    - punctuation.definition.parameters.begin
- source: T
  scopes:
    - variable.parameter.preprocessor
- source: )
  scopes:
    - punctuation.definition.parameters.end
- source: \
  scopes:
    - constant.character.escape.line-continuation
  scopesEnd:
    - meta.preprocessor.macro
- source: IsPointDef
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: T
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
  scopesEnd:
    - meta.tail.struct
- source: ;
  scopes:
    - punctuation.terminator.statement
  scopesEnd:
    - meta.block.struct
- source: \
  scopes:
    - constant.character.escape.line-continuation
- source: '    template'
- source: <
  scopesBegin:
    - keyword.operator.comparison
- source: '>'
  scopesEnd:
    - keyword.operator.comparison
- source: \
  scopes:
    - constant.character.escape.line-continuation
- source: struct
  scopesBegin:
    - meta.block.struct
    - meta.head.struct
  scopes:
    - storage.type.struct
- source: IsArrayBasedPoint
  scopes:
    - entity.name.type.struct
- source: <
  scopesBegin:
    - meta.template.call
  scopes:
    - punctuation.section.angle-brackets.begin.template.call
- source: T
  scopes:
    - meta.qualified_type
    - entity.name.type
- source: '>'
  scopes:
    - punctuation.section.angle-brackets.end.template.call
  scopesEnd:
    - meta.template.call
- source: ':'
- source: public
  scopes:
    - storage.type.modifier.access.public
- source: std
  scopesBegin:
    - meta.qualified_type
  scopes:
    - entity.name.scope-resolution
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution
- source: true_type
  scopes:
    - entity.name.type
  scopesEnd:
    - meta.qualified_type
- source: \
  scopes:
    - constant.character.escape.line-continuation
- source: '{'
  scopes:
    - punctuation.section.block.begin.bracket.curly.struct
