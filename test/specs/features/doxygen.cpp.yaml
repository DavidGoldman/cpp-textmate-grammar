- source: /*!
- source: ' * ... text ...'
- source: ' */'
- source: /*!
- source: ' ... text ...'
- source: '*/'
- source: ///
- source: /// ... text ...
- source: ///
- source: //!
- source: //!... text ...
- source: //!
- source: /////////////////////////////////////////////////
- source: /// ... text ...
- source: /////////////////////////////////////////////////
- source: '//! Brief description, which is'
- source: //! really a detailed description since it spans multiple lines.
- source: /*! Another detailed description!
- source: ' */'
- source: int var; /*!< Detailed description after the member */
- source: /********************************************//**
- source: ' *  ... text'
- source: ' ***********************************************/'
- source: /**
- source: ' * A brief history of JavaDoc-style (C-style) comments.'
- source: ' *'
- source: ' * This is the typical JavaDoc-style C-style comment. It starts with two'
- source: ' * asterisks.'
- source: ' *'
- source: ' * @param theory Even if there is only one possible unified theory. it is just a'
- source: ' *               set of rules and equations.'
- source: ' */'
- source: void cstyle( int theory );
- source: >-
    /*******************************************************************************
- source: ' * A brief history of JavaDoc-style (C-style) banner comments.'
- source: ' *'
- source: ' * This is the typical JavaDoc-style C-style "banner" comment. It starts with'
- source: ' * a forward slash followed by some number, n, of asterisks, where n > 2. It''s'
- source: ' * written this way to be more "visible" to developers who are reading the'
- source: ' * source code.'
- source: ' *'
- source: ' * Often, developers are unaware that this is not (by default) a valid Doxygen'
- source: ' * comment block!'
- source: ' *'
- source: ' * However, as long as JAVADOC_BLOCK = YES is added to the Doxyfile, it will'
- source: ' * work as expected.'
- source: ' *'
- source: ' * This style of commenting behaves well with clang-format.'
- source: ' *'
- source: ' * @param theory Even if there is only one possible unified theory. it is just a'
- source: ' *               set of rules and equations.'
- source: ' ******************************************************************************/'
- source: void javadocBanner( int theory );
- source: >-
    /***************************************************************************//**
- source: ' * A brief history of Doxygen-style banner comments.'
- source: ' *'
- source: ' * This is a Doxygen-style C-style "banner" comment. It starts with a "normal"'
- source: ' * comment and is then converted to a "special" comment block near the end of'
- source: ' * the first line. It is written this way to be more "visible" to developers'
- source: ' * who are reading the source code.'
- source: ' * This style of commenting behaves poorly with clang-format.'
- source: ' *'
- source: ' * @param theory Even if there is only one possible unified theory. it is just a'
- source: ' *               set of rules and equations.'
- source: ' ******************************************************************************/'
- source: void doxygenBanner( int theory );
- source: '//!  A test class. '
- source: /*!
- source: '  A more elaborate class description.'
- source: '*/'
- source: class QTstyle_Test
- source: '{'
- source: '  public:'
- source: '    //! An enum.'
- source: '    /*! More detailed enum description. */'
- source: '    enum TEnum { '
- source: '                 TVal1, /*!< Enum value TVal1. */  '
- source: '                 TVal2, /*!< Enum value TVal2. */  '
- source: '                 TVal3  /*!< Enum value TVal3. */  '
- source: '               } '
- source: '         //! Enum pointer.'
- source: '         /*! Details. */'
- source: '         *enumPtr, '
- source: '         //! Enum variable.'
- source: '         /*! Details. */'
- source: '         enumVar;  '
- source: '    //! A constructor.'
- source: '    /*!'
- source: '      A more elaborate description of the constructor.'
- source: '    */'
- source: '    QTstyle_Test();'
- source: '    //! A destructor.'
- source: '    /*!'
- source: '      A more elaborate description of the destructor.'
- source: '    */'
- source: '   ~QTstyle_Test();'
- source: '    //! A normal member taking two arguments and returning an integer value.'
- source: '    /*!'
- source: '      \param a an integer argument.'
- source: '      \param s a constant character pointer.'
- source: '      \return The test results'
- source: '      \sa QTstyle_Test(), ~QTstyle_Test(), testMeToo() and publicVar()'
- source: '    */'
- source: '    int testMe(int a,const char *s);'
- source: '    //! A pure virtual member.'
- source: '    /*!'
  scopesBegin:
    - comment.block.documentation
  scopes:
    - punctuation.definition.comment.begin.documentation
- source: \sa
  scopes:
    - storage.type.class.doxygen
- source: ' testMe()'
- source: \param
  scopes:
    - storage.type.class.doxygen
- source: c1
  scopes:
    - variable.parameter
- source: ' the first argument.'
- source: \param
  scopes:
    - storage.type.class.doxygen
- source: c2
  scopes:
    - variable.parameter
- source: ' the second argument.'
- source: '*/'
  scopes:
    - punctuation.definition.comment.end.documentation
  scopesEnd:
    - comment.block.documentation
- source: virtual
  scopesBegin:
    - meta.function.definition
  scopes:
    - storage.modifier.virtual
- source: void
  scopes:
    - meta.qualified_type
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: testMeToo
  scopesBegin:
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: char
  scopesBegin:
    - meta.function.definition.parameters
    - meta.parameter
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: c1
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: char
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: c2
  scopes:
    - variable.parameter
  scopesEnd:
    - meta.function.definition.parameters
    - meta.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
- source: =
  scopes:
    - keyword.operator.assignment
- source: '0'
  scopes:
    - constant.numeric.decimal
  scopesEnd:
    - meta.function.definition
    - meta.head.function.definition
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: //!
  scopesBegin:
    - comment.line.double-slash.documentation
  scopes:
    - punctuation.definition.comment.documentation
- source: ' A public variable.'
  scopesEnd:
    - comment.line.double-slash.documentation
- source: '    /*!'
- source: '      Details.'
- source: '    */'
- source: '    int publicVar;'
- source: '    //! A function variable.'
- source: '    /*!'
- source: '      Details.'
- source: '    */'
- source: '    int (*handler)(int a,int b);'
- source: '};'
