require_relative "./tokens.rb"
require_relative "../textmate_tools.rb"
require_relative "../shared/numeric.rb"

Dir.chdir __dir__

objective_cpp_grammar = Grammar.new(
  name: "Objective-C++",
  scope_name: "source.objcpp",
  version: "https://github.com/jeff-hykin/cpp-textmate-grammar/blob/master/syntaxes/objc.tmLanguage.json",
  information_for_contributors: [
    "This code was auto generated by a much-more-readble ruby file: https://github.com/jeff-hykin/cpp-textmate-grammar/blob/master/objective-c/generate.rb",
    "This file essentially an updated/improved fork of the atom syntax",
  ],
)

objective_cpp_grammar[:$initial_context] = [
  :cpp_lang,
  {
    "begin" => "((@)(interface|protocol))(?!.+;)\\s+([A-Za-z_][A-Za-z0-9_]*)\\s*((:)(?:\\s*)([A-Za-z][A-Za-z0-9]*))?(\\s|\\n)?",
    "captures" => {
      "1" => {
        "name" => "storage.type",
      },
      "2" => {
        "name" => "punctuation.definition.storage.type",
      },
      "4" => {
        "name" => "entity.name.type",
      },
      "6" => {
        "name" => "punctuation.definition.entity.other.inherited-class",
      },
      "7" => {
        "name" => "entity.other.inherited-class",
      },
      "8" => {
        "name" => "meta.divider",
      },
      "9" => {
        "name" => "meta.inherited-class",
      },
    },
    "contentName" => "meta.scope.interface",
    "end" => "((@)end)\\b",
    "name" => "meta.interface-or-protocol",
    "patterns" => [
      {
        "include" => "#interface_innards",
      },
    ],
  },
  {
    "begin" => "((@)(implementation))\\s+([A-Za-z_][A-Za-z0-9_]*)\\s*(?::\\s*([A-Za-z][A-Za-z0-9]*))?",
    "captures" => {
      "1" => {
        "name" => "storage.type",
      },
      "2" => {
        "name" => "punctuation.definition.storage.type",
      },
      "4" => {
        "name" => "entity.name.type",
      },
      "5" => {
        "name" => "entity.other.inherited-class",
      },
    },
    "contentName" => "meta.scope.implementation",
    "end" => "((@)end)\\b",
    "name" => "meta.implementation",
    "patterns" => [
      {
        "include" => "#implementation_innards",
      },
    ],
  },
  {
    "begin" => "@\"",
    "beginCaptures" => {
      "0" => {
        "name" => "punctuation.definition.string.begin",
      },
    },
    "end" => "\"",
    "endCaptures" => {
      "0" => {
        "name" => "punctuation.definition.string.end",
      },
    },
    "name" => "string.quoted.double",
    "patterns" => [
      {
        "include" => "source.c#string_escaped_char",
      },
      {
        "match" => "(?x)%\n\t\t\t\t\t\t(\\d+\\$)?                             # field (argument #)\n\t\t\t\t\t\t[#0\\- +']*                          # flags\n\t\t\t\t\t\t((-?\\d+)|\\*(-?\\d+\\$)?)?              # minimum field width\n\t\t\t\t\t\t(\\.((-?\\d+)|\\*(-?\\d+\\$)?)?)?         # precision\n\t\t\t\t\t\t[@]                                  # conversion type\n\t\t\t\t\t",
        "name" => "constant.other.placeholder",
      },
      {
        "include" => "source.c#string_placeholder",
      },
    ],
  },
  {
    "begin" => "\\b(id)\\s*(?=<)",
    "beginCaptures" => {
      "1" => {
        "name" => "storage.type",
      },
    },
    "end" => "(?<=>)",
    "name" => "meta.id-with-protocol",
    "patterns" => [
      {
        "include" => "#protocol_list",
      },
    ],
  },
  {
    "match" => "\\b(NS_DURING|NS_HANDLER|NS_ENDHANDLER)\\b",
    "name" => "keyword.control.macro",
  },
  {
    "captures" => {
      "1" => {
        "name" => "punctuation.definition.keyword",
      },
    },
    "match" => "(@)(try|catch|finally|throw)\\b",
    "name" => "keyword.control.exception",
  },
  {
    "captures" => {
      "1" => {
        "name" => "punctuation.definition.keyword",
      },
    },
    "match" => "(@)(synchronized)\\b",
    "name" => "keyword.control.synchronize",
  },
  {
    "captures" => {
      "1" => {
        "name" => "punctuation.definition.keyword",
      },
    },
    "match" => "(@)(required|optional)\\b",
    "name" => "keyword.control.protocol-specification",
  },
  {
    "captures" => {
      "1" => {
        "name" => "punctuation.definition.keyword",
      },
    },
    "match" => "(@)(defs|encode)\\b",
    "name" => "keyword.other",
  },
  {
    "match" => "\\bid\\b",
    "name" => "storage.type.id",
  },
  {
    "match" => "\\b(IBOutlet|IBAction|BOOL|SEL|id|unichar|IMP|Class|instancetype)\\b",
    "name" => "storage.type",
  },
  {
    "captures" => {
      "1" => {
        "name" => "punctuation.definition.storage.type",
      },
    },
    "match" => "(@)(class|protocol)\\b",
    "name" => "storage.type",
  },
  {
    "begin" => "((@)selector)\\s*(\\()",
    "beginCaptures" => {
      "1" => {
        "name" => "storage.type",
      },
      "2" => {
        "name" => "punctuation.definition.storage.type",
      },
      "3" => {
        "name" => "punctuation.definition.storage.type",
      },
    },
    "contentName" => "meta.selector.method-name",
    "end" => "(\\))",
    "endCaptures" => {
      "1" => {
        "name" => "punctuation.definition.storage.type",
      },
    },
    "name" => "meta.selector",
    "patterns" => [
      {
        "captures" => {
          "1" => {
            "name" => "punctuation.separator.arguments",
          },
        },
        "match" => "\\b(?:[a-zA-Z_:][\\w]*)+",
        "name" => "support.function.any-method.name-of-parameter",
      },
    ],
  },
  {
    "captures" => {
      "1" => {
        "name" => "punctuation.definition.storage.modifier",
      },
    },
    "match" => "(@)(synchronized|public|package|private|protected)\\b",
    "name" => "storage.modifier",
  },
  {
    "match" => "\\b(YES|NO|Nil|nil)\\b",
    "name" => "constant.language",
  },
  {
    "match" => "\\bNSApp\\b",
    "name" => "support.variable.foundation",
  },
  {
    "captures" => {
      "1" => {
        "name" => "punctuation.whitespace.support.function.cocoa.leopard",
      },
      "2" => {
        "name" => "support.function.cocoa.leopard",
      },
    },
    "match" => "(\\s*)\\b(NS(Rect(ToCGRect|FromCGRect)|MakeCollectable|S(tringFromProtocol|ize(ToCGSize|FromCGSize))|Draw(NinePartImage|ThreePartImage)|P(oint(ToCGPoint|FromCGPoint)|rotocolFromString)|EventMaskFromType|Value))\\b",
  },
  {
    "captures" => {
      "1" => {
        "name" => "punctuation.whitespace.support.function.leading.cocoa",
      },
      "2" => {
        "name" => "support.function.cocoa",
      },
    },
    "match" => "(\\s*)\\b(NS(R(ound(DownToMultipleOfPageSize|UpToMultipleOfPageSize)|un(CriticalAlertPanel(RelativeToWindow)?|InformationalAlertPanel(RelativeToWindow)?|AlertPanel(RelativeToWindow)?)|e(set(MapTable|HashTable)|c(ycleZone|t(Clip(List)?|F(ill(UsingOperation|List(UsingOperation|With(Grays|Colors(UsingOperation)?))?)?|romString))|ordAllocationEvent)|turnAddress|leaseAlertPanel|a(dPixel|l(MemoryAvailable|locateCollectable))|gisterServicesProvider)|angeFromString)|Get(SizeAndAlignment|CriticalAlertPanel|InformationalAlertPanel|UncaughtExceptionHandler|FileType(s)?|WindowServerMemory|AlertPanel)|M(i(n(X|Y)|d(X|Y))|ouseInRect|a(p(Remove|Get|Member|Insert(IfAbsent|KnownAbsent)?)|ke(R(ect|ange)|Size|Point)|x(Range|X|Y)))|B(itsPer(SampleFromDepth|PixelFromDepth)|e(stDepth|ep|gin(CriticalAlertSheet|InformationalAlertSheet|AlertSheet)))|S(ho(uldRetainWithZone|w(sServicesMenuItem|AnimationEffect))|tringFrom(R(ect|ange)|MapTable|S(ize|elector)|HashTable|Class|Point)|izeFromString|e(t(ShowsServicesMenuItem|ZoneName|UncaughtExceptionHandler|FocusRingStyle)|lectorFromString|archPathForDirectoriesInDomains)|wap(Big(ShortToHost|IntToHost|DoubleToHost|FloatToHost|Long(ToHost|LongToHost))|Short|Host(ShortTo(Big|Little)|IntTo(Big|Little)|DoubleTo(Big|Little)|FloatTo(Big|Little)|Long(To(Big|Little)|LongTo(Big|Little)))|Int|Double|Float|L(ittle(ShortToHost|IntToHost|DoubleToHost|FloatToHost|Long(ToHost|LongToHost))|ong(Long)?)))|H(ighlightRect|o(stByteOrder|meDirectory(ForUser)?)|eight|ash(Remove|Get|Insert(IfAbsent|KnownAbsent)?)|FSType(CodeFromFileType|OfFile))|N(umberOfColorComponents|ext(MapEnumeratorPair|HashEnumeratorItem))|C(o(n(tainsRect|vert(GlyphsToPackedGlyphs|Swapped(DoubleToHost|FloatToHost)|Host(DoubleToSwapped|FloatToSwapped)))|unt(MapTable|HashTable|Frames|Windows(ForContext)?)|py(M(emoryPages|apTableWithZone)|Bits|HashTableWithZone|Object)|lorSpaceFromDepth|mpare(MapTables|HashTables))|lassFromString|reate(MapTable(WithZone)?|HashTable(WithZone)?|Zone|File(namePboardType|ContentsPboardType)))|TemporaryDirectory|I(s(ControllerMarker|EmptyRect|FreedObject)|n(setRect|crementExtraRefCount|te(r(sect(sRect|ionR(ect|ange))|faceStyleForKey)|gralRect)))|Zone(Realloc|Malloc|Name|Calloc|Fr(omPointer|ee))|O(penStepRootDirectory|ffsetRect)|D(i(sableScreenUpdates|videRect)|ottedFrameRect|e(c(imal(Round|Multiply|S(tring|ubtract)|Normalize|Co(py|mpa(ct|re))|IsNotANumber|Divide|Power|Add)|rementExtraRefCountWasZero)|faultMallocZone|allocate(MemoryPages|Object))|raw(Gr(oove|ayBezel)|B(itmap|utton)|ColorTiledRects|TiledRects|DarkBezel|W(hiteBezel|indowBackground)|LightBezel))|U(serName|n(ionR(ect|ange)|registerServicesProvider)|pdateDynamicServices)|Java(Bundle(Setup|Cleanup)|Setup(VirtualMachine)?|Needs(ToLoadClasses|VirtualMachine)|ClassesF(orBundle|romPath)|ObjectNamedInPath|ProvidesClasses)|P(oint(InRect|FromString)|erformService|lanarFromDepth|ageSize)|E(n(d(MapTableEnumeration|HashTableEnumeration)|umerate(MapTable|HashTable)|ableScreenUpdates)|qual(R(ects|anges)|Sizes|Points)|raseRect|xtraRefCount)|F(ileTypeForHFSTypeCode|ullUserName|r(ee(MapTable|HashTable)|ame(Rect(WithWidth(UsingOperation)?)?|Address)))|Wi(ndowList(ForContext)?|dth)|Lo(cationInRange|g(v|PageSize)?)|A(ccessibility(R(oleDescription(ForUIElement)?|aiseBadArgumentException)|Unignored(Children(ForOnlyChild)?|Descendant|Ancestor)|PostNotification|ActionDescription)|pplication(Main|Load)|vailableWindowDepths|ll(MapTable(Values|Keys)|HashTableObjects|ocate(MemoryPages|Collectable|Object)))))\\b",
  },
  {
    "match" => "\\bNS(RuleEditor|G(arbageCollector|radient)|MapTable|HashTable|Co(ndition|llectionView(Item)?)|T(oolbarItemGroup|extInputClient|r(eeNode|ackingArea))|InvocationOperation|Operation(Queue)?|D(ictionaryController|ockTile)|P(ointer(Functions|Array)|athC(o(ntrol(Delegate)?|mponentCell)|ell(Delegate)?)|r(intPanelAccessorizing|edicateEditor(RowTemplate)?))|ViewController|FastEnumeration|Animat(ionContext|ablePropertyContainer))\\b",
    "name" => "support.class.cocoa.leopard",
  },
  {
    "match" => "\\bNS(R(u(nLoop|ler(Marker|View))|e(sponder|cursiveLock|lativeSpecifier)|an(domSpecifier|geSpecifier))|G(etCommand|lyph(Generator|Storage|Info)|raphicsContext)|XML(Node|D(ocument|TD(Node)?)|Parser|Element)|M(iddleSpecifier|ov(ie(View)?|eCommand)|utable(S(tring|et)|C(haracterSet|opying)|IndexSet|D(ictionary|ata)|URLRequest|ParagraphStyle|A(ttributedString|rray))|e(ssagePort(NameServer)?|nu(Item(Cell)?|View)?|t(hodSignature|adata(Item|Query(ResultGroup|AttributeValueTuple)?)))|a(ch(BootstrapServer|Port)|trix))|B(itmapImageRep|ox|u(ndle|tton(Cell)?)|ezierPath|rowser(Cell)?)|S(hadow|c(anner|r(ipt(SuiteRegistry|C(o(ercionHandler|mmand(Description)?)|lassDescription)|ObjectSpecifier|ExecutionContext|WhoseTest)|oll(er|View)|een))|t(epper(Cell)?|atus(Bar|Item)|r(ing|eam))|imple(HorizontalTypesetter|CString)|o(cketPort(NameServer)?|und|rtDescriptor)|p(e(cifierTest|ech(Recognizer|Synthesizer)|ll(Server|Checker))|litView)|e(cureTextField(Cell)?|t(Command)?|archField(Cell)?|rializer|gmentedC(ontrol|ell))|lider(Cell)?|avePanel)|H(ost|TTP(Cookie(Storage)?|URLResponse)|elpManager)|N(ib(Con(nector|trolConnector)|OutletConnector)?|otification(Center|Queue)?|u(ll|mber(Formatter)?)|etService(Browser)?|ameSpecifier)|C(ha(ngeSpelling|racterSet)|o(n(stantString|nection|trol(ler)?|ditionLock)|d(ing|er)|unt(Command|edSet)|pying|lor(Space|P(ick(ing(Custom|Default)|er)|anel)|Well|List)?|m(p(oundPredicate|arisonPredicate)|boBox(Cell)?))|u(stomImageRep|rsor)|IImageRep|ell|l(ipView|o(seCommand|neCommand)|assDescription)|a(ched(ImageRep|URLResponse)|lendar(Date)?)|reateCommand)|T(hread|ypesetter|ime(Zone|r)|o(olbar(Item(Validations)?)?|kenField(Cell)?)|ext(Block|Storage|Container|Tab(le(Block)?)?|Input|View|Field(Cell)?|List|Attachment(Cell)?)?|a(sk|b(le(Header(Cell|View)|Column|View)|View(Item)?))|reeController)|I(n(dex(S(pecifier|et)|Path)|put(Manager|S(tream|erv(iceProvider|er(MouseTracker)?)))|vocation)|gnoreMisspelledWords|mage(Rep|Cell|View)?)|O(ut(putStream|lineView)|pen(GL(Context|Pixel(Buffer|Format)|View)|Panel)|bj(CTypeSerializationCallBack|ect(Controller)?))|D(i(st(antObject(Request)?|ributed(NotificationCenter|Lock))|ctionary|rectoryEnumerator)|ocument(Controller)?|e(serializer|cimalNumber(Behaviors|Handler)?|leteCommand)|at(e(Components|Picker(Cell)?|Formatter)?|a)|ra(wer|ggingInfo))|U(ser(InterfaceValidations|Defaults(Controller)?)|RL(Re(sponse|quest)|Handle(Client)?|C(onnection|ache|redential(Storage)?)|Download(Delegate)?|Prot(ocol(Client)?|ectionSpace)|AuthenticationChallenge(Sender)?)?|n(iqueIDSpecifier|doManager|archiver))|P(ipe|o(sitionalSpecifier|pUpButton(Cell)?|rt(Message|NameServer|Coder)?)|ICTImageRep|ersistentDocument|DFImageRep|a(steboard|nel|ragraphStyle|geLayout)|r(int(Info|er|Operation|Panel)|o(cessInfo|tocolChecker|perty(Specifier|ListSerialization)|gressIndicator|xy)|edicate))|E(numerator|vent|PSImageRep|rror|x(ception|istsCommand|pression))|V(iew(Animation)?|al(idated(ToobarItem|UserInterfaceItem)|ue(Transformer)?))|Keyed(Unarchiver|Archiver)|Qui(ckDrawView|tCommand)|F(ile(Manager|Handle|Wrapper)|o(nt(Manager|Descriptor|Panel)?|rm(Cell|atter)))|W(hoseSpecifier|indow(Controller)?|orkspace)|L(o(c(k(ing)?|ale)|gicalTest)|evelIndicator(Cell)?|ayoutManager)|A(ssertionHandler|nimation|ctionCell|ttributedString|utoreleasePool|TSTypesetter|ppl(ication|e(Script|Event(Manager|Descriptor)))|ffineTransform|lert|r(chiver|ray(Controller)?)))\\b",
    "name" => "support.class.cocoa",
  },
  {
    "match" => "\\bNS(R(oundingMode|ule(Editor(RowType|NestingMode)|rOrientation)|e(questUserAttentionType|lativePosition))|G(lyphInscription|radientDrawingOptions)|XML(NodeKind|D(ocumentContentKind|TDNodeKind)|ParserError)|M(ultibyteGlyphPacking|apTableOptions)|B(itmapFormat|oxType|ezierPathElement|ackgroundStyle|rowserDropOperation)|S(tr(ing(CompareOptions|DrawingOptions|EncodingConversionOptions)|eam(Status|Event))|p(eechBoundary|litViewDividerStyle)|e(archPathD(irectory|omainMask)|gmentS(tyle|witchTracking))|liderType|aveOptions)|H(TTPCookieAcceptPolicy|ashTableOptions)|N(otification(SuspensionBehavior|Coalescing)|umberFormatter(RoundingMode|Behavior|Style|PadPosition)|etService(sError|Options))|C(haracterCollection|o(lor(RenderingIntent|SpaceModel|PanelMode)|mp(oundPredicateType|arisonPredicateModifier))|ellStateValue|al(culationError|endarUnit))|T(ypesetterControlCharacterAction|imeZoneNameStyle|e(stComparisonOperation|xt(Block(Dimension|V(erticalAlignment|alueType)|Layer)|TableLayoutAlgorithm|FieldBezelStyle))|ableView(SelectionHighlightStyle|ColumnAutoresizingStyle)|rackingAreaOptions)|I(n(sertionPosition|te(rfaceStyle|ger))|mage(RepLoadStatus|Scaling|CacheMode|FrameStyle|LoadStatus|Alignment))|Ope(nGLPixelFormatAttribute|rationQueuePriority)|Date(Picker(Mode|Style)|Formatter(Behavior|Style))|U(RL(RequestCachePolicy|HandleStatus|C(acheStoragePolicy|redentialPersistence))|Integer)|P(o(stingStyle|int(ingDeviceType|erFunctionsOptions)|pUpArrowPosition)|athStyle|r(int(ing(Orientation|PaginationMode)|erTableStatus|PanelOptions)|opertyList(MutabilityOptions|Format)|edicateOperatorType))|ExpressionType|KeyValue(SetMutationKind|Change)|QTMovieLoopMode|F(indPanel(SubstringMatchType|Action)|o(nt(RenderingMode|FamilyClass)|cusRingPlacement))|W(hoseSubelementIdentifier|ind(ingRule|ow(B(utton|ackingLocation)|SharingType|CollectionBehavior)))|L(ine(MovementDirection|SweepDirection|CapStyle|JoinStyle)|evelIndicatorStyle)|Animation(BlockingMode|Curve))\\b",
    "name" => "support.type.cocoa.leopard",
  },
  {
    "match" => "\\bC(I(Sampler|Co(ntext|lor)|Image(Accumulator)?|PlugIn(Registration)?|Vector|Kernel|Filter(Generator|Shape)?)|A(Renderer|MediaTiming(Function)?|BasicAnimation|ScrollLayer|Constraint(LayoutManager)?|T(iledLayer|extLayer|rans(ition|action))|OpenGLLayer|PropertyAnimation|KeyframeAnimation|Layer|A(nimation(Group)?|ction)))\\b",
    "name" => "support.class.quartz",
  },
  {
    "match" => "\\bC(G(Float|Point|Size|Rect)|IFormat|AConstraintAttribute)\\b",
    "name" => "support.type.quartz",
  },
  {
    "match" => "\\bNS(R(ect(Edge)?|ange)|G(lyph(Relation|LayoutMode)?|radientType)|M(odalSession|a(trixMode|p(Table|Enumerator)))|B(itmapImageFileType|orderType|uttonType|ezelStyle|ackingStoreType|rowserColumnResizingType)|S(cr(oll(er(Part|Arrow)|ArrowPosition)|eenAuxiliaryOpaque)|tringEncoding|ize|ocketNativeHandle|election(Granularity|Direction|Affinity)|wapped(Double|Float)|aveOperationType)|Ha(sh(Table|Enumerator)|ndler(2)?)|C(o(ntrol(Size|Tint)|mp(ositingOperation|arisonResult))|ell(State|Type|ImagePosition|Attribute))|T(hreadPrivate|ypesetterGlyphInfo|i(ckMarkPosition|tlePosition|meInterval)|o(ol(TipTag|bar(SizeMode|DisplayMode))|kenStyle)|IFFCompression|ext(TabType|Alignment)|ab(State|leViewDropOperation|ViewType)|rackingRectTag)|ImageInterpolation|Zone|OpenGL(ContextAuxiliary|PixelFormatAuxiliary)|D(ocumentChangeType|atePickerElementFlags|ra(werState|gOperation))|UsableScrollerParts|P(oint|r(intingPageOrder|ogressIndicator(Style|Th(ickness|readInfo))))|EventType|KeyValueObservingOptions|Fo(nt(SymbolicTraits|TraitMask|Action)|cusRingType)|W(indow(OrderingMode|Depth)|orkspace(IconCreationOptions|LaunchOptions)|ritingDirection)|L(ineBreakMode|ayout(Status|Direction))|A(nimation(Progress|Effect)|ppl(ication(TerminateReply|DelegateReply|PrintReply)|eEventManagerSuspensionID)|ffineTransformStruct|lertStyle))\\b",
    "name" => "support.type.cocoa",
  },
  {
    "match" => "\\bNS(NotFound|Ordered(Ascending|Descending|Same))\\b",
    "name" => "support.constant.cocoa",
  },
  {
    "match" => "\\bNS(MenuDidBeginTracking|ViewDidUpdateTrackingAreas)?Notification\\b",
    "name" => "support.constant.notification.cocoa.leopard",
  },
  {
    "match" => "\\bNS(Menu(Did(RemoveItem|SendAction|ChangeItem|EndTracking|AddItem)|WillSendAction)|S(ystemColorsDidChange|plitView(DidResizeSubviews|WillResizeSubviews))|C(o(nt(extHelpModeDid(Deactivate|Activate)|rolT(intDidChange|extDid(BeginEditing|Change|EndEditing)))|lor(PanelColorDidChange|ListDidChange)|mboBox(Selection(IsChanging|DidChange)|Will(Dismiss|PopUp)))|lassDescriptionNeededForClass)|T(oolbar(DidRemoveItem|WillAddItem)|ext(Storage(DidProcessEditing|WillProcessEditing)|Did(BeginEditing|Change|EndEditing)|View(DidChange(Selection|TypingAttributes)|WillChangeNotifyingTextView))|ableView(Selection(IsChanging|DidChange)|ColumnDid(Resize|Move)))|ImageRepRegistryDidChange|OutlineView(Selection(IsChanging|DidChange)|ColumnDid(Resize|Move)|Item(Did(Collapse|Expand)|Will(Collapse|Expand)))|Drawer(Did(Close|Open)|Will(Close|Open))|PopUpButton(CellWillPopUp|WillPopUp)|View(GlobalFrameDidChange|BoundsDidChange|F(ocusDidChange|rameDidChange))|FontSetChanged|W(indow(Did(Resi(ze|gn(Main|Key))|M(iniaturize|ove)|Become(Main|Key)|ChangeScreen(|Profile)|Deminiaturize|Update|E(ndSheet|xpose))|Will(M(iniaturize|ove)|BeginSheet|Close))|orkspace(SessionDid(ResignActive|BecomeActive)|Did(Mount|TerminateApplication|Unmount|PerformFileOperation|Wake|LaunchApplication)|Will(Sleep|Unmount|PowerOff|LaunchApplication)))|A(ntialiasThresholdChanged|ppl(ication(Did(ResignActive|BecomeActive|Hide|ChangeScreenParameters|U(nhide|pdate)|FinishLaunching)|Will(ResignActive|BecomeActive|Hide|Terminate|U(nhide|pdate)|FinishLaunching))|eEventManagerWillProcessFirstEvent)))Notification\\b",
    "name" => "support.constant.notification.cocoa",
  },
  {
    "match" => "\\bNS(RuleEditor(RowType(Simple|Compound)|NestingMode(Si(ngle|mple)|Compound|List))|GradientDraws(BeforeStartingLocation|AfterEndingLocation)|M(inusSetExpressionType|a(chPortDeallocate(ReceiveRight|SendRight|None)|pTable(StrongMemory|CopyIn|ZeroingWeakMemory|ObjectPointerPersonality)))|B(oxCustom|undleExecutableArchitecture(X86|I386|PPC(64)?)|etweenPredicateOperatorType|ackgroundStyle(Raised|Dark|L(ight|owered)))|S(tring(DrawingTruncatesLastVisibleLine|EncodingConversion(ExternalRepresentation|AllowLossy))|ubqueryExpressionType|p(e(ech(SentenceBoundary|ImmediateBoundary|WordBoundary)|llingState(GrammarFlag|SpellingFlag))|litViewDividerStyleThi(n|ck))|e(rvice(RequestTimedOutError|M(iscellaneousError|alformedServiceDictionaryError)|InvalidPasteboardDataError|ErrorM(inimum|aximum)|Application(NotFoundError|LaunchFailedError))|gmentStyle(Round(Rect|ed)|SmallSquare|Capsule|Textured(Rounded|Square)|Automatic)))|H(UDWindowMask|ashTable(StrongMemory|CopyIn|ZeroingWeakMemory|ObjectPointerPersonality))|N(oModeColorPanel|etServiceNoAutoRename)|C(hangeRedone|o(ntainsPredicateOperatorType|l(orRenderingIntent(RelativeColorimetric|Saturation|Default|Perceptual|AbsoluteColorimetric)|lectorDisabledOption))|ellHit(None|ContentArea|TrackableArea|EditableTextArea))|T(imeZoneNameStyle(S(hort(Standard|DaylightSaving)|tandard)|DaylightSaving)|extFieldDatePickerStyle|ableViewSelectionHighlightStyle(Regular|SourceList)|racking(Mouse(Moved|EnteredAndExited)|CursorUpdate|InVisibleRect|EnabledDuringMouseDrag|A(ssumeInside|ctive(In(KeyWindow|ActiveApp)|WhenFirstResponder|Always))))|I(n(tersectSetExpressionType|dexedColorSpaceModel)|mageScale(None|Proportionally(Down|UpOrDown)|AxesIndependently))|Ope(nGLPFAAllowOfflineRenderers|rationQueue(DefaultMaxConcurrentOperationCount|Priority(High|Normal|Very(High|Low)|Low)))|D(iacriticInsensitiveSearch|ownloadsDirectory)|U(nionSetExpressionType|TF(16(BigEndianStringEncoding|StringEncoding|LittleEndianStringEncoding)|32(BigEndianStringEncoding|StringEncoding|LittleEndianStringEncoding)))|P(ointerFunctions(Ma(chVirtualMemory|llocMemory)|Str(ongMemory|uctPersonality)|C(StringPersonality|opyIn)|IntegerPersonality|ZeroingWeakMemory|O(paque(Memory|Personality)|bjectP(ointerPersonality|ersonality)))|at(hStyle(Standard|NavigationBar|PopUp)|ternColorSpaceModel)|rintPanelShows(Scaling|Copies|Orientation|P(a(perSize|ge(Range|SetupAccessory))|review)))|Executable(RuntimeMismatchError|NotLoadableError|ErrorM(inimum|aximum)|L(inkError|oadError)|ArchitectureMismatchError)|KeyValueObservingOption(Initial|Prior)|F(i(ndPanelSubstringMatchType(StartsWith|Contains|EndsWith|FullWord)|leRead(TooLargeError|UnknownStringEncodingError))|orcedOrderingSearch)|Wi(ndow(BackingLocation(MainMemory|Default|VideoMemory)|Sharing(Read(Only|Write)|None)|CollectionBehavior(MoveToActiveSpace|CanJoinAllSpaces|Default))|dthInsensitiveSearch)|AggregateExpressionType)\\b",
    "name" => "support.constant.cocoa.leopard",
  },
  {
    "match" => "\\bNS(R(GB(ModeColorPanel|ColorSpaceModel)|ight(Mouse(D(own(Mask)?|ragged(Mask)?)|Up(Mask)?)|T(ext(Movement|Alignment)|ab(sBezelBorder|StopType))|ArrowFunctionKey)|ound(RectBezelStyle|Bankers|ed(BezelStyle|TokenStyle|DisclosureBezelStyle)|Down|Up|Plain|Line(CapStyle|JoinStyle))|un(StoppedResponse|ContinuesResponse|AbortedResponse)|e(s(izableWindowMask|et(CursorRectsRunLoopOrdering|FunctionKey))|ce(ssedBezelStyle|iver(sCantHandleCommandScriptError|EvaluationScriptError))|turnTextMovement|doFunctionKey|quiredArgumentsMissingScriptError|l(evancyLevelIndicatorStyle|ative(Before|After))|gular(SquareBezelStyle|ControlSize)|moveTraitFontAction)|a(n(domSubelement|geDateMode)|tingLevelIndicatorStyle|dio(ModeMatrix|Button)))|G(IFFileType|lyph(Below|Inscribe(B(elow|ase)|Over(strike|Below)|Above)|Layout(WithPrevious|A(tAPoint|gainstAPoint))|A(ttribute(BidiLevel|Soft|Inscribe|Elastic)|bove))|r(ooveBorder|eaterThan(Comparison|OrEqualTo(Comparison|PredicateOperatorType)|PredicateOperatorType)|a(y(ModeColorPanel|ColorSpaceModel)|dient(None|Con(cave(Strong|Weak)|vex(Strong|Weak)))|phiteControlTint)))|XML(N(o(tationDeclarationKind|de(CompactEmptyElement|IsCDATA|OptionsNone|Use(SingleQuotes|DoubleQuotes)|Pre(serve(NamespaceOrder|C(haracterReferences|DATA)|DTD|Prefixes|E(ntities|mptyElements)|Quotes|Whitespace|A(ttributeOrder|ll))|ttyPrint)|ExpandEmptyElement))|amespaceKind)|CommentKind|TextKind|InvalidKind|D(ocument(X(MLKind|HTMLKind|Include)|HTMLKind|T(idy(XML|HTML)|extKind)|IncludeContentTypeDeclaration|Validate|Kind)|TDKind)|P(arser(GTRequiredError|XMLDeclNot(StartedError|FinishedError)|Mi(splaced(XMLDeclarationError|CDATAEndStringError)|xedContentDeclNot(StartedError|FinishedError))|S(t(andaloneValueError|ringNot(StartedError|ClosedError))|paceRequiredError|eparatorRequiredError)|N(MTOKENRequiredError|o(t(ationNot(StartedError|FinishedError)|WellBalancedError)|DTDError)|amespaceDeclarationError|AMERequiredError)|C(haracterRef(In(DTDError|PrologError|EpilogError)|AtEOFError)|o(nditionalSectionNot(StartedError|FinishedError)|mment(NotFinishedError|ContainsDoubleHyphenError))|DATANotFinishedError)|TagNameMismatchError|In(ternalError|valid(HexCharacterRefError|C(haracter(RefError|InEntityError|Error)|onditionalSectionError)|DecimalCharacterRefError|URIError|Encoding(NameError|Error)))|OutOfMemoryError|D(ocumentStartError|elegateAbortedParseError|OCTYPEDeclNotFinishedError)|U(RI(RequiredError|FragmentError)|n(declaredEntityError|parsedEntityError|knownEncodingError|finishedTagError))|P(CDATARequiredError|ublicIdentifierRequiredError|arsedEntityRef(MissingSemiError|NoNameError|In(Internal(SubsetError|Error)|PrologError|EpilogError)|AtEOFError)|r(ocessingInstructionNot(StartedError|FinishedError)|ematureDocumentEndError))|E(n(codingNotSupportedError|tity(Ref(In(DTDError|PrologError|EpilogError)|erence(MissingSemiError|WithoutNameError)|LoopError|AtEOFError)|BoundaryError|Not(StartedError|FinishedError)|Is(ParameterError|ExternalError)|ValueRequiredError))|qualExpectedError|lementContentDeclNot(StartedError|FinishedError)|xt(ernalS(tandaloneEntityError|ubsetNotFinishedError)|raContentError)|mptyDocumentError)|L(iteralNot(StartedError|FinishedError)|T(RequiredError|SlashRequiredError)|essThanSymbolInAttributeError)|Attribute(RedefinedError|HasNoValueError|Not(StartedError|FinishedError)|ListNot(StartedError|FinishedError)))|rocessingInstructionKind)|E(ntity(GeneralKind|DeclarationKind|UnparsedKind|P(ar(sedKind|ameterKind)|redefined))|lement(Declaration(MixedKind|UndefinedKind|E(lementKind|mptyKind)|Kind|AnyKind)|Kind))|Attribute(N(MToken(sKind|Kind)|otationKind)|CDATAKind|ID(Ref(sKind|Kind)|Kind)|DeclarationKind|En(tit(yKind|iesKind)|umerationKind)|Kind))|M(i(n(XEdge|iaturizableWindowMask|YEdge|uteCalendarUnit)|terLineJoinStyle|ddleSubelement|xedState)|o(nthCalendarUnit|deSwitchFunctionKey|use(Moved(Mask)?|E(ntered(Mask)?|ventSubtype|xited(Mask)?))|veToBezierPathElement|mentary(ChangeButton|Push(Button|InButton)|Light(Button)?))|enuFunctionKey|a(c(intoshInterfaceStyle|OSRomanStringEncoding)|tchesPredicateOperatorType|ppedRead|x(XEdge|YEdge))|ACHOperatingSystem)|B(MPFileType|o(ttomTabsBezelBorder|ldFontMask|rderlessWindowMask|x(Se(condary|parator)|OldStyle|Primary))|uttLineCapStyle|e(zelBorder|velLineJoinStyle|low(Bottom|Top)|gin(sWith(Comparison|PredicateOperatorType)|FunctionKey))|lueControlTint|ack(spaceCharacter|tabTextMovement|ingStore(Retained|Buffered|Nonretained)|TabCharacter|wardsSearch|groundTab)|r(owser(NoColumnResizing|UserColumnResizing|AutoColumnResizing)|eakFunctionKey))|S(h(ift(JISStringEncoding|KeyMask)|ow(ControlGlyphs|InvisibleGlyphs)|adowlessSquareBezelStyle)|y(s(ReqFunctionKey|tem(D(omainMask|efined(Mask)?)|FunctionKey))|mbolStringEncoding)|c(a(nnedOption|le(None|ToFit|Proportionally))|r(oll(er(NoPart|Increment(Page|Line|Arrow)|Decrement(Page|Line|Arrow)|Knob(Slot)?|Arrows(M(inEnd|axEnd)|None|DefaultSetting))|Wheel(Mask)?|LockFunctionKey)|eenChangedEventType))|t(opFunctionKey|r(ingDrawing(OneShot|DisableScreenFontSubstitution|Uses(DeviceMetrics|FontLeading|LineFragmentOrigin))|eam(Status(Reading|NotOpen|Closed|Open(ing)?|Error|Writing|AtEnd)|Event(Has(BytesAvailable|SpaceAvailable)|None|OpenCompleted|E(ndEncountered|rrorOccurred)))))|i(ngle(DateMode|UnderlineStyle)|ze(DownFontAction|UpFontAction))|olarisOperatingSystem|unOSOperatingSystem|pecialPageOrder|e(condCalendarUnit|lect(By(Character|Paragraph|Word)|i(ng(Next|Previous)|onAffinity(Downstream|Upstream))|edTab|FunctionKey)|gmentSwitchTracking(Momentary|Select(One|Any)))|quareLineCapStyle|witchButton|ave(ToOperation|Op(tions(Yes|No|Ask)|eration)|AsOperation)|mall(SquareBezelStyle|C(ontrolSize|apsFontMask)|IconButtonBezelStyle))|H(ighlightModeMatrix|SBModeColorPanel|o(ur(Minute(SecondDatePickerElementFlag|DatePickerElementFlag)|CalendarUnit)|rizontalRuler|meFunctionKey)|TTPCookieAcceptPolicy(Never|OnlyFromMainDocumentDomain|Always)|e(lp(ButtonBezelStyle|KeyMask|FunctionKey)|avierFontAction)|PUXOperatingSystem)|Year(MonthDa(yDatePickerElementFlag|tePickerElementFlag)|CalendarUnit)|N(o(n(StandardCharacterSetFontMask|ZeroWindingRule|activatingPanelMask|LossyASCIIStringEncoding)|Border|t(ification(SuspensionBehavior(Hold|Coalesce|D(eliverImmediately|rop))|NoCoalescing|CoalescingOn(Sender|Name)|DeliverImmediately|PostToAllSessions)|PredicateType|EqualToPredicateOperatorType)|S(cr(iptError|ollerParts)|ubelement|pecifierError)|CellMask|T(itle|opLevelContainersSpecifierError|abs(BezelBorder|NoBorder|LineBorder))|I(nterfaceStyle|mage)|UnderlineStyle|FontChangeAction)|u(ll(Glyph|CellType)|m(eric(Search|PadKeyMask)|berFormatter(Round(Half(Down|Up|Even)|Ceiling|Down|Up|Floor)|Behavior(10|Default)|S(cientificStyle|pellOutStyle)|NoStyle|CurrencyStyle|DecimalStyle|P(ercentStyle|ad(Before(Suffix|Prefix)|After(Suffix|Prefix))))))|e(t(Services(BadArgumentError|NotFoundError|C(ollisionError|ancelledError)|TimeoutError|InvalidError|UnknownError|ActivityInProgress)|workDomainMask)|wlineCharacter|xt(StepInterfaceStyle|FunctionKey))|EXTSTEPStringEncoding|a(t(iveShortGlyphPacking|uralTextAlignment)|rrowFontMask))|C(hange(ReadOtherContents|GrayCell(Mask)?|BackgroundCell(Mask)?|Cleared|Done|Undone|Autosaved)|MYK(ModeColorPanel|ColorSpaceModel)|ircular(BezelStyle|Slider)|o(n(stantValueExpressionType|t(inuousCapacityLevelIndicatorStyle|entsCellMask|ain(sComparison|erSpecifierError)|rol(Glyph|KeyMask))|densedFontMask)|lor(Panel(RGBModeMask|GrayModeMask|HSBModeMask|C(MYKModeMask|olorListModeMask|ustomPaletteModeMask|rayonModeMask)|WheelModeMask|AllModesMask)|ListModeColorPanel)|reServiceDirectory|m(p(osite(XOR|Source(In|O(ut|ver)|Atop)|Highlight|C(opy|lear)|Destination(In|O(ut|ver)|Atop)|Plus(Darker|Lighter))|ressedFontMask)|mandKeyMask))|u(stom(SelectorPredicateOperatorType|PaletteModeColorPanel)|r(sor(Update(Mask)?|PointingDevice)|veToBezierPathElement))|e(nterT(extAlignment|abStopType)|ll(State|H(ighlighted|as(Image(Horizontal|OnLeftOrBottom)|OverlappingImage))|ChangesContents|Is(Bordered|InsetButton)|Disabled|Editable|LightsBy(Gray|Background|Contents)|AllowsMixedState))|l(ipPagination|o(s(ePathBezierPathElement|ableWindowMask)|ckAndCalendarDatePickerStyle)|ear(ControlTint|DisplayFunctionKey|LineFunctionKey))|a(seInsensitive(Search|PredicateOption)|n(notCreateScriptCommandError|cel(Button|TextMovement))|chesDirectory|lculation(NoError|Overflow|DivideByZero|Underflow|LossOfPrecision)|rriageReturnCharacter)|r(itical(Request|AlertStyle)|ayonModeColorPanel))|T(hick(SquareBezelStyle|erSquareBezelStyle)|ypesetter(Behavior|HorizontalTabAction|ContainerBreakAction|ZeroAdvancementAction|OriginalBehavior|ParagraphBreakAction|WhitespaceAction|L(ineBreakAction|atestBehavior))|i(ckMark(Right|Below|Left|Above)|tledWindowMask|meZoneDatePickerElementFlag)|o(olbarItemVisibilityPriority(Standard|High|User|Low)|pTabsBezelBorder|ggleButton)|IFF(Compression(N(one|EXT)|CCITTFAX(3|4)|OldJPEG|JPEG|PackBits|LZW)|FileType)|e(rminate(Now|Cancel|Later)|xt(Read(InapplicableDocumentTypeError|WriteErrorM(inimum|aximum))|Block(M(i(nimum(Height|Width)|ddleAlignment)|a(rgin|ximum(Height|Width)))|B(o(ttomAlignment|rder)|aselineAlignment)|Height|TopAlignment|P(ercentageValueType|adding)|Width|AbsoluteValueType)|StorageEdited(Characters|Attributes)|CellType|ured(RoundedBezelStyle|BackgroundWindowMask|SquareBezelStyle)|Table(FixedLayoutAlgorithm|AutomaticLayoutAlgorithm)|Field(RoundedBezel|SquareBezel|AndStepperDatePickerStyle)|WriteInapplicableDocumentTypeError|ListPrependEnclosingMarker))|woByteGlyphPacking|ab(Character|TextMovement|le(tP(oint(Mask|EventSubtype)?|roximity(Mask|EventSubtype)?)|Column(NoResizing|UserResizingMask|AutoresizingMask)|View(ReverseSequentialColumnAutoresizingStyle|GridNone|S(olid(HorizontalGridLineMask|VerticalGridLineMask)|equentialColumnAutoresizingStyle)|NoColumnAutoresizing|UniformColumnAutoresizingStyle|FirstColumnOnlyAutoresizingStyle|LastColumnOnlyAutoresizingStyle)))|rackModeMatrix)|I(n(sert(CharFunctionKey|FunctionKey|LineFunctionKey)|t(Type|ernalS(criptError|pecifierError))|dexSubelement|validIndexSpecifierError|formational(Request|AlertStyle)|PredicateOperatorType)|talicFontMask|SO(2022JPStringEncoding|Latin(1StringEncoding|2StringEncoding))|dentityMappingCharacterCollection|llegalTextMovement|mage(R(ight|ep(MatchesDevice|LoadStatus(ReadingHeader|Completed|InvalidData|Un(expectedEOF|knownType)|WillNeedAllData)))|Below|C(ellType|ache(BySize|Never|Default|Always))|Interpolation(High|None|Default|Low)|O(nly|verlaps)|Frame(Gr(oove|ayBezel)|Button|None|Photo)|L(oadStatus(ReadError|C(ompleted|ancelled)|InvalidData|UnexpectedEOF)|eft)|A(lign(Right|Bottom(Right|Left)?|Center|Top(Right|Left)?|Left)|bove)))|O(n(State|eByteGlyphPacking|OffButton|lyScrollerArrows)|ther(Mouse(D(own(Mask)?|ragged(Mask)?)|Up(Mask)?)|TextMovement)|SF1OperatingSystem|pe(n(GL(GO(Re(setLibrary|tainRenderers)|ClearFormatCache|FormatCacheSize)|PFA(R(obust|endererID)|M(inimumPolicy|ulti(sample|Screen)|PSafe|aximumPolicy)|BackingStore|S(creenMask|te(ncilSize|reo)|ingleRenderer|upersample|ample(s|Buffers|Alpha))|NoRecovery|C(o(lor(Size|Float)|mpliant)|losestPolicy)|OffScreen|D(oubleBuffer|epthSize)|PixelBuffer|VirtualScreenCount|FullScreen|Window|A(cc(umSize|elerated)|ux(Buffers|DepthStencil)|l(phaSize|lRenderers))))|StepUnicodeReservedBase)|rationNotSupportedForKeyS(criptError|pecifierError))|ffState|KButton|rPredicateType|bjC(B(itfield|oolType)|S(hortType|tr(ingType|uctType)|electorType)|NoType|CharType|ObjectType|DoubleType|UnionType|PointerType|VoidType|FloatType|Long(Type|longType)|ArrayType))|D(i(s(c(losureBezelStyle|reteCapacityLevelIndicatorStyle)|playWindowRunLoopOrdering)|acriticInsensitivePredicateOption|rect(Selection|PredicateModifier))|o(c(ModalWindowMask|ument(Directory|ationDirectory))|ubleType|wn(TextMovement|ArrowFunctionKey))|e(s(cendingPageOrder|ktopDirectory)|cimalTabStopType|v(ice(NColorSpaceModel|IndependentModifierFlagsMask)|eloper(Directory|ApplicationDirectory))|fault(ControlTint|TokenStyle)|lete(Char(acter|FunctionKey)|FunctionKey|LineFunctionKey)|moApplicationDirectory)|a(yCalendarUnit|teFormatter(MediumStyle|Behavior(10|Default)|ShortStyle|NoStyle|FullStyle|LongStyle))|ra(wer(Clos(ingState|edState)|Open(ingState|State))|gOperation(Generic|Move|None|Copy|Delete|Private|Every|Link|All)))|U(ser(CancelledError|D(irectory|omainMask)|FunctionKey)|RL(Handle(NotLoaded|Load(Succeeded|InProgress|Failed))|CredentialPersistence(None|Permanent|ForSession))|n(scaledWindowMask|cachedRead|i(codeStringEncoding|talicFontMask|fiedTitleAndToolbarWindowMask)|d(o(CloseGroupingRunLoopOrdering|FunctionKey)|e(finedDateComponent|rline(Style(Single|None|Thick|Double)|Pattern(Solid|D(ot|ash(Dot(Dot)?)?)))))|known(ColorSpaceModel|P(ointingDevice|ageOrder)|KeyS(criptError|pecifierError))|boldFontMask)|tilityWindowMask|TF8StringEncoding|p(dateWindowsRunLoopOrdering|TextMovement|ArrowFunctionKey))|J(ustifiedTextAlignment|PEG(2000FileType|FileType)|apaneseEUC(GlyphPacking|StringEncoding))|P(o(s(t(Now|erFontMask|WhenIdle|ASAP)|iti(on(Replace|Be(fore|ginning)|End|After)|ve(IntType|DoubleType|FloatType)))|pUp(NoArrow|ArrowAt(Bottom|Center))|werOffEventType|rtraitOrientation)|NGFileType|ush(InCell(Mask)?|OnPushOffButton)|e(n(TipMask|UpperSideMask|PointingDevice|LowerSideMask)|riodic(Mask)?)|P(S(caleField|tatus(Title|Field)|aveButton)|N(ote(Title|Field)|ame(Title|Field))|CopiesField|TitleField|ImageButton|OptionsButton|P(a(perFeedButton|ge(Range(To|From)|ChoiceMatrix))|reviewButton)|LayoutButton)|lainTextTokenStyle|a(useFunctionKey|ragraphSeparatorCharacter|ge(DownFunctionKey|UpFunctionKey))|r(int(ing(ReplyLater|Success|Cancelled|Failure)|ScreenFunctionKey|erTable(NotFound|OK|Error)|FunctionKey)|o(p(ertyList(XMLFormat|MutableContainers(AndLeaves)?|BinaryFormat|Immutable|OpenStepFormat)|rietaryStringEncoding)|gressIndicator(BarStyle|SpinningStyle|Preferred(SmallThickness|Thickness|LargeThickness|AquaThickness)))|e(ssedTab|vFunctionKey))|L(HeightForm|CancelButton|TitleField|ImageButton|O(KButton|rientationMatrix)|UnitsButton|PaperNameButton|WidthForm))|E(n(terCharacter|d(sWith(Comparison|PredicateOperatorType)|FunctionKey))|v(e(nOddWindingRule|rySubelement)|aluatedObjectExpressionType)|qualTo(Comparison|PredicateOperatorType)|ra(serPointingDevice|CalendarUnit|DatePickerElementFlag)|x(clude(10|QuickDrawElementsIconCreationOption)|pandedFontMask|ecuteFunctionKey))|V(i(ew(M(in(XMargin|YMargin)|ax(XMargin|YMargin))|HeightSizable|NotSizable|WidthSizable)|aPanelFontAction)|erticalRuler|a(lidationErrorM(inimum|aximum)|riableExpressionType))|Key(SpecifierEvaluationScriptError|Down(Mask)?|Up(Mask)?|PathExpressionType|Value(MinusSetMutation|SetSetMutation|Change(Re(placement|moval)|Setting|Insertion)|IntersectSetMutation|ObservingOption(New|Old)|UnionSetMutation|ValidationError))|QTMovie(NormalPlayback|Looping(BackAndForthPlayback|Playback))|F(1(1FunctionKey|7FunctionKey|2FunctionKey|8FunctionKey|3FunctionKey|9FunctionKey|4FunctionKey|5FunctionKey|FunctionKey|0FunctionKey|6FunctionKey)|7FunctionKey|i(nd(PanelAction(Replace(A(ndFind|ll(InSelection)?))?|S(howFindPanel|e(tFindString|lectAll(InSelection)?))|Next|Previous)|FunctionKey)|tPagination|le(Read(No(SuchFileError|PermissionError)|CorruptFileError|In(validFileNameError|applicableStringEncodingError)|Un(supportedSchemeError|knownError))|HandlingPanel(CancelButton|OKButton)|NoSuchFileError|ErrorM(inimum|aximum)|Write(NoPermissionError|In(validFileNameError|applicableStringEncodingError)|OutOfSpaceError|Un(supportedSchemeError|knownError))|LockingError)|xedPitchFontMask)|2(1FunctionKey|7FunctionKey|2FunctionKey|8FunctionKey|3FunctionKey|9FunctionKey|4FunctionKey|5FunctionKey|FunctionKey|0FunctionKey|6FunctionKey)|o(nt(Mo(noSpaceTrait|dernSerifsClass)|BoldTrait|S(ymbolicClass|criptsClass|labSerifsClass|ansSerifClass)|C(o(ndensedTrait|llectionApplicationOnlyMask)|larendonSerifsClass)|TransitionalSerifsClass|I(ntegerAdvancementsRenderingMode|talicTrait)|O(ldStyleSerifsClass|rnamentalsClass)|DefaultRenderingMode|U(nknownClass|IOptimizedTrait)|Panel(S(hadowEffectModeMask|t(andardModesMask|rikethroughEffectModeMask)|izeModeMask)|CollectionModeMask|TextColorEffectModeMask|DocumentColorEffectModeMask|UnderlineEffectModeMask|FaceModeMask|All(ModesMask|EffectsModeMask))|ExpandedTrait|VerticalTrait|F(amilyClassMask|reeformSerifsClass)|Antialiased(RenderingMode|IntegerAdvancementsRenderingMode))|cusRing(Below|Type(None|Default|Exterior)|Only|Above)|urByteGlyphPacking|rm(attingError(M(inimum|aximum))?|FeedCharacter))|8FunctionKey|unction(ExpressionType|KeyMask)|3(1FunctionKey|2FunctionKey|3FunctionKey|4FunctionKey|5FunctionKey|FunctionKey|0FunctionKey)|9FunctionKey|4FunctionKey|P(RevertButton|S(ize(Title|Field)|etButton)|CurrentField|Preview(Button|Field))|l(oat(ingPointSamplesBitmapFormat|Type)|agsChanged(Mask)?)|axButton|5FunctionKey|6FunctionKey)|W(heelModeColorPanel|indow(s(NTOperatingSystem|CP125(1StringEncoding|2StringEncoding|3StringEncoding|4StringEncoding|0StringEncoding)|95(InterfaceStyle|OperatingSystem))|M(iniaturizeButton|ovedEventType)|Below|CloseButton|ToolbarButton|ZoomButton|Out|DocumentIconButton|ExposedEventType|Above)|orkspaceLaunch(NewInstance|InhibitingBackgroundOnly|Default|PreferringClassic|WithoutA(ctivation|ddingToRecents)|A(sync|nd(Hide(Others)?|Print)|llowingClassicStartup))|eek(day(CalendarUnit|OrdinalCalendarUnit)|CalendarUnit)|a(ntsBidiLevels|rningAlertStyle)|r(itingDirection(RightToLeft|Natural|LeftToRight)|apCalendarComponents))|L(i(stModeMatrix|ne(Moves(Right|Down|Up|Left)|B(order|reakBy(C(harWrapping|lipping)|Truncating(Middle|Head|Tail)|WordWrapping))|S(eparatorCharacter|weep(Right|Down|Up|Left))|ToBezierPathElement|DoesntMove|arSlider)|teralSearch|kePredicateOperatorType|ghterFontAction|braryDirectory)|ocalDomainMask|e(ssThan(Comparison|OrEqualTo(Comparison|PredicateOperatorType)|PredicateOperatorType)|ft(Mouse(D(own(Mask)?|ragged(Mask)?)|Up(Mask)?)|T(ext(Movement|Alignment)|ab(sBezelBorder|StopType))|ArrowFunctionKey))|a(yout(RightToLeft|NotDone|CantFit|OutOfGlyphs|Done|LeftToRight)|ndscapeOrientation)|ABColorSpaceModel)|A(sc(iiWithDoubleByteEUCGlyphPacking|endingPageOrder)|n(y(Type|PredicateModifier|EventMask)|choredSearch|imation(Blocking|Nonblocking(Threaded)?|E(ffect(DisappearingItemDefault|Poof)|ase(In(Out)?|Out))|Linear)|dPredicateType)|t(Bottom|tachmentCharacter|omicWrite|Top)|SCIIStringEncoding|d(obe(GB1CharacterCollection|CNS1CharacterCollection|Japan(1CharacterCollection|2CharacterCollection)|Korea1CharacterCollection)|dTraitFontAction|minApplicationDirectory)|uto(saveOperation|Pagination)|pp(lication(SupportDirectory|D(irectory|e(fined(Mask)?|legateReply(Success|Cancel|Failure)|activatedEventType))|ActivatedEventType)|KitDefined(Mask)?)|l(ternateKeyMask|pha(ShiftKeyMask|NonpremultipliedBitmapFormat|FirstBitmapFormat)|ert(SecondButtonReturn|ThirdButtonReturn|OtherReturn|DefaultReturn|ErrorReturn|FirstButtonReturn|AlternateReturn)|l(ScrollerParts|DomainsMask|PredicateModifier|LibrariesDirectory|ApplicationsDirectory))|rgument(sWrongScriptError|EvaluationScriptError)|bove(Bottom|Top)|WTEventType))\\b",
    "name" => "support.constant.cocoa",
  },
  {
    "include" => "#c_lang",
  },
  {
    "include" => "#bracketed_content",
  },
]
objective_cpp_grammar[:"c_lang"] = {
  "patterns": [
    {
      "include": "#preprocessor-rule-enabled",
    },
    {
      "include": "#preprocessor-rule-disabled",
    },
    {
      "include": "#preprocessor-rule-conditional",
    },
    {
      "include": "#comments",
    },
    {
      "include": "#switch_statement",
    },
    {
      "match": "\\b(break|continue|do|else|for|goto|if|_Pragma|return|while)\\b",
      "name": "keyword.control.c",
    },
    {
      "include": "#storage_types",
    },
    {
      "match": "typedef",
      "name": "keyword.other.typedef.c",
    },
    {
      "match": "\\b(const|extern|register|restrict|static|volatile|inline)\\b",
      "name": "storage.modifier.c",
    },
    {
      "match": "\\bk[A-Z]\\w*\\b",
      "name": "constant.other.variable.mac-classic.c",
    },
    {
      "match": "\\bg[A-Z]\\w*\\b",
      "name": "variable.other.readwrite.global.mac-classic.c",
    },
    {
      "match": "\\bs[A-Z]\\w*\\b",
      "name": "variable.other.readwrite.static.mac-classic.c",
    },
    {
      "match": "\\b(NULL|true|false|TRUE|FALSE)\\b",
      "name": "constant.language.c",
    },
    {
      "include": "#operators",
    },
    {
      "include": "#numbers",
    },
    {
      "include": "#strings",
    },
    {
      "begin": "(?x)\n^\\s* ((\\#)\\s*define) \\s+\t# define\n((?<id>[a-zA-Z_$][\\w$]*))\t  # macro name\n(?:\n  (\\()\n\t(\n\t  \\s* \\g<id> \\s*\t\t # first argument\n\t  ((,) \\s* \\g<id> \\s*)*  # additional arguments\n\t  (?:\\.\\.\\.)?\t\t\t# varargs ellipsis?\n\t)\n  (\\))\n)?",
      "beginCaptures": {
        "1": {
          "name": "keyword.control.directive.define.c",
        },
        "2": {
          "name": "punctuation.definition.directive.c",
        },
        "3": {
          "name": "entity.name.function.preprocessor.c",
        },
        "5": {
          "name": "punctuation.definition.parameters.begin.c",
        },
        "6": {
          "name": "variable.parameter.preprocessor.c",
        },
        "8": {
          "name": "punctuation.separator.parameters.c",
        },
        "9": {
          "name": "punctuation.definition.parameters.end.c",
        },
      },
      "end": "(?=(?://|/\\*))|(?<!\\\\)(?=\\n)",
      "name": "meta.preprocessor.macro.c",
      "patterns": [
        {
          "include": "#preprocessor-rule-define-line-contents",
        },
      ],
    },
    {
      "begin": "^\\s*((#)\\s*(error|warning))\\b\\s*",
      "beginCaptures": {
        "1": {
          "name": "keyword.control.directive.diagnostic.$3.c",
        },
        "2": {
          "name": "punctuation.definition.directive.c",
        },
      },
      "end": "(?<!\\\\)(?=\\n)",
      "name": "meta.preprocessor.diagnostic.c",
      "patterns": [
        {
          "begin": "\"",
          "beginCaptures": {
            "0": {
              "name": "punctuation.definition.string.begin.c",
            },
          },
          "end": "\"|(?<!\\\\)(?=\\s*\\n)",
          "endCaptures": {
            "0": {
              "name": "punctuation.definition.string.end.c",
            },
          },
          "name": "string.quoted.double.c",
          "patterns": [
            {
              "include": "#line_continuation_character",
            },
          ],
        },
        {
          "begin": "'",
          "beginCaptures": {
            "0": {
              "name": "punctuation.definition.string.begin.c",
            },
          },
          "end": "'|(?<!\\\\)(?=\\s*\\n)",
          "endCaptures": {
            "0": {
              "name": "punctuation.definition.string.end.c",
            },
          },
          "name": "string.quoted.single.c",
          "patterns": [
            {
              "include": "#line_continuation_character",
            },
          ],
        },
        {
          "begin": "[^'\"]",
          "end": "(?<!\\\\)(?=\\s*\\n)",
          "name": "string.unquoted.single.c",
          "patterns": [
            {
              "include": "#line_continuation_character",
            },
            {
              "include": "#comments",
            },
          ],
        },
      ],
    },
    {
      "begin": "^\\s*((#)\\s*(include(?:_next)?|import))\\b\\s*",
      "beginCaptures": {
        "1": {
          "name": "keyword.control.directive.$3.c",
        },
        "2": {
          "name": "punctuation.definition.directive.c",
        },
      },
      "end": "(?=(?://|/\\*))|(?<!\\\\)(?=\\n)",
      "name": "meta.preprocessor.include.c",
      "patterns": [
        {
          "include": "#line_continuation_character",
        },
        {
          "begin": "\"",
          "beginCaptures": {
            "0": {
              "name": "punctuation.definition.string.begin.c",
            },
          },
          "end": "\"",
          "endCaptures": {
            "0": {
              "name": "punctuation.definition.string.end.c",
            },
          },
          "name": "string.quoted.double.include.c",
        },
        {
          "begin": "<",
          "beginCaptures": {
            "0": {
              "name": "punctuation.definition.string.begin.c",
            },
          },
          "end": ">",
          "endCaptures": {
            "0": {
              "name": "punctuation.definition.string.end.c",
            },
          },
          "name": "string.quoted.other.lt-gt.include.c",
        },
      ],
    },
    {
      "include": "#pragma-mark",
    },
    {
      "begin": "^\\s*((#)\\s*line)\\b",
      "beginCaptures": {
        "1": {
          "name": "keyword.control.directive.line.c",
        },
        "2": {
          "name": "punctuation.definition.directive.c",
        },
      },
      "end": "(?=(?://|/\\*))|(?<!\\\\)(?=\\n)",
      "name": "meta.preprocessor.c",
      "patterns": [
        {
          "include": "#strings",
        },
        {
          "include": "#numbers",
        },
        {
          "include": "#line_continuation_character",
        },
      ],
    },
    {
      "begin": "^\\s*(?:((#)\\s*undef))\\b",
      "beginCaptures": {
        "1": {
          "name": "keyword.control.directive.undef.c",
        },
        "2": {
          "name": "punctuation.definition.directive.c",
        },
      },
      "end": "(?=(?://|/\\*))|(?<!\\\\)(?=\\n)",
      "name": "meta.preprocessor.c",
      "patterns": [
        {
          "match": "[a-zA-Z_$][\\w$]*",
          "name": "entity.name.function.preprocessor.c",
        },
        {
          "include": "#line_continuation_character",
        },
      ],
    },
    {
      "begin": "^\\s*(?:((#)\\s*pragma))\\b",
      "beginCaptures": {
        "1": {
          "name": "keyword.control.directive.pragma.c",
        },
        "2": {
          "name": "punctuation.definition.directive.c",
        },
      },
      "end": "(?=(?://|/\\*))|(?<!\\\\)(?=\\n)",
      "name": "meta.preprocessor.pragma.c",
      "patterns": [
        {
          "include": "#strings",
        },
        {
          "match": "[a-zA-Z_$][\\w\\-$]*",
          "name": "entity.other.attribute-name.pragma.preprocessor.c",
        },
        {
          "include": "#numbers",
        },
        {
          "include": "#line_continuation_character",
        },
      ],
    },
    {
      "match": "\\b(u_char|u_short|u_int|u_long|ushort|uint|u_quad_t|quad_t|qaddr_t|caddr_t|daddr_t|div_t|dev_t|fixpt_t|blkcnt_t|blksize_t|gid_t|in_addr_t|in_port_t|ino_t|key_t|mode_t|nlink_t|id_t|pid_t|off_t|segsz_t|swblk_t|uid_t|id_t|clock_t|size_t|ssize_t|time_t|useconds_t|suseconds_t)\\b",
      "name": "support.type.sys-types.c",
    },
    {
      "match": "\\b(pthread_attr_t|pthread_cond_t|pthread_condattr_t|pthread_mutex_t|pthread_mutexattr_t|pthread_once_t|pthread_rwlock_t|pthread_rwlockattr_t|pthread_t|pthread_key_t)\\b",
      "name": "support.type.pthread.c",
    },
    {
      "match": "(?x) \\b\n(int8_t|int16_t|int32_t|int64_t|uint8_t|uint16_t|uint32_t|uint64_t|int_least8_t\n|int_least16_t|int_least32_t|int_least64_t|uint_least8_t|uint_least16_t|uint_least32_t\n|uint_least64_t|int_fast8_t|int_fast16_t|int_fast32_t|int_fast64_t|uint_fast8_t\n|uint_fast16_t|uint_fast32_t|uint_fast64_t|intptr_t|uintptr_t|intmax_t|intmax_t\n|uintmax_t|uintmax_t)\n\\b",
      "name": "support.type.stdint.c",
    },
    {
      "match": "\\b(noErr|kNilOptions|kInvalidID|kVariableLengthArray)\\b",
      "name": "support.constant.mac-classic.c",
    },
    {
      "match": "(?x) \\b\n(AbsoluteTime|Boolean|Byte|ByteCount|ByteOffset|BytePtr|CompTimeValue|ConstLogicalAddress|ConstStrFileNameParam\n|ConstStringPtr|Duration|Fixed|FixedPtr|Float32|Float32Point|Float64|Float80|Float96|FourCharCode|Fract|FractPtr\n|Handle|ItemCount|LogicalAddress|OptionBits|OSErr|OSStatus|OSType|OSTypePtr|PhysicalAddress|ProcessSerialNumber\n|ProcessSerialNumberPtr|ProcHandle|Ptr|ResType|ResTypePtr|ShortFixed|ShortFixedPtr|SignedByte|SInt16|SInt32|SInt64\n|SInt8|Size|StrFileName|StringHandle|StringPtr|TimeBase|TimeRecord|TimeScale|TimeValue|TimeValue64|UInt16|UInt32\n|UInt64|UInt8|UniChar|UniCharCount|UniCharCountPtr|UniCharPtr|UnicodeScalarValue|UniversalProcHandle|UniversalProcPtr\n|UnsignedFixed|UnsignedFixedPtr|UnsignedWide|UTF16Char|UTF32Char|UTF8Char)\n\\b",
      "name": "support.type.mac-classic.c",
    },
    {
      "match": "\\b([A-Za-z0-9_]+_t)\\b",
      "name": "support.type.posix-reserved.c",
    },
    {
      "include": "#block",
    },
    {
      "include": "#parens",
    },
    {
      "name": "meta.function.c",
      "begin": "(?<!\\w)(?!\\s*(?:not|compl|sizeof|not_eq|bitand|xor|bitor|and|or|and_eq|xor_eq|or_eq|alignof|alignas|_Alignof|_Alignas|while|for|do|if|else|goto|switch|return|break|case|continue|default|void|char|short|int|signed|unsigned|long|float|double|bool|_Bool|_Complex|_Imaginary|u_char|u_short|u_int|u_long|ushort|uint|u_quad_t|quad_t|qaddr_t|caddr_t|daddr_t|div_t|dev_t|fixpt_t|blkcnt_t|blksize_t|gid_t|in_addr_t|in_port_t|ino_t|key_t|mode_t|nlink_t|id_t|pid_t|off_t|segsz_t|swblk_t|uid_t|id_t|clock_t|size_t|ssize_t|time_t|useconds_t|suseconds_t|pthread_attr_t|pthread_cond_t|pthread_condattr_t|pthread_mutex_t|pthread_mutexattr_t|pthread_once_t|pthread_rwlock_t|pthread_rwlockattr_t|pthread_t|pthread_key_t|int8_t|int16_t|int32_t|int64_t|uint8_t|uint16_t|uint32_t|uint64_t|int_least8_t|int_least16_t|int_least32_t|int_least64_t|uint_least8_t|uint_least16_t|uint_least32_t|uint_least64_t|int_fast8_t|int_fast16_t|int_fast32_t|int_fast64_t|uint_fast8_t|uint_fast16_t|uint_fast32_t|uint_fast64_t|intptr_t|uintptr_t|intmax_t|intmax_t|uintmax_t|uintmax_t|NULL|true|false|memory_order|atomic_bool|atomic_char|atomic_schar|atomic_uchar|atomic_short|atomic_ushort|atomic_int|atomic_uint|atomic_long|atomic_ulong|atomic_llong|atomic_ullong|atomic_char16_t|atomic_char32_t|atomic_wchar_t|atomic_int_least8_t|atomic_uint_least8_t|atomic_int_least16_t|atomic_uint_least16_t|atomic_int_least32_t|atomic_uint_least32_t|atomic_int_least64_t|atomic_uint_least64_t|atomic_int_fast8_t|atomic_uint_fast8_t|atomic_int_fast16_t|atomic_uint_fast16_t|atomic_int_fast32_t|atomic_uint_fast32_t|atomic_int_fast64_t|atomic_uint_fast64_t|atomic_intptr_t|atomic_uintptr_t|atomic_size_t|atomic_ptrdiff_t|atomic_intmax_t|atomic_uintmax_t|struct|union|enum|typedef|auto|register|static|extern|thread_local|inline|_Noreturn|const|volatile|restrict|_Atomic)\\s*\\()(?=[a-zA-Z_]\\w*\\s*\\()",
      "end": "(?<=\\))",
      "patterns": [
        {
          "include": "#function-innards",
        },
      ],
    },
    {
      "include": "#line_continuation_character",
    },
    {
      "name": "meta.bracket.square.access.c",
      "begin": "([a-zA-Z_][a-zA-Z_0-9]*|(?<=[\\]\\)]))?(\\[)(?!\\])",
      "beginCaptures": {
        "1": {
          "name": "variable.object.c",
        },
        "2": {
          "name": "punctuation.definition.begin.bracket.square.c",
        },
      },
      "end": "\\]",
      "endCaptures": {
        "0": {
          "name": "punctuation.definition.end.bracket.square.c",
        },
      },
      "patterns": [
        {
          "include": "#function-call-innards",
        },
      ],
    },
    {
      "name": "storage.modifier.array.bracket.square.c",
      "match": "\\[\\s*\\]",
    },
    {
      "match": ";",
      "name": "punctuation.terminator.statement.c",
    },
    {
      "match": ",",
      "name": "punctuation.separator.delimiter.c",
    },
  ],
  "repository": {
    "probably_a_parameter": {
      "match": "(?<=(?:[a-zA-Z_0-9] |[&*>\\]\\)]))\\s*([a-zA-Z_]\\w*)\\s*(?=(?:\\[\\]\\s*)?(?:,|\\)))",
      "captures": {
        "1": {
          "name": "variable.parameter.probably.c",
        },
      },
    },
    "access-method": {
      "name": "meta.function-call.member.c",
      "begin": "([a-zA-Z_][a-zA-Z_0-9]*|(?<=[\\]\\)]))\\s*(?:(\\.)|(->))((?:(?:[a-zA-Z_][a-zA-Z_0-9]*)\\s*(?:(?:\\.)|(?:->)))*)\\s*([a-zA-Z_][a-zA-Z_0-9]*)(\\()",
      "beginCaptures": {
        "1": {
          "name": "variable.object.c",
        },
        "2": {
          "name": "punctuation.separator.dot-access.c",
        },
        "3": {
          "name": "punctuation.separator.pointer-access.c",
        },
        "4": {
          "patterns": [
            {
              "match": "\\.",
              "name": "punctuation.separator.dot-access.c",
            },
            {
              "match": "->",
              "name": "punctuation.separator.pointer-access.c",
            },
            {
              "match": "[a-zA-Z_][a-zA-Z_0-9]*",
              "name": "variable.object.c",
            },
            {
              "name": "everything.else.c",
              "match": ".+",
            },
          ],
        },
        "5": {
          "name": "entity.name.function.member.c",
        },
        "6": {
          "name": "punctuation.section.arguments.begin.bracket.round.function.member.c",
        },
      },
      "end": "\\)",
      "endCaptures": {
        "0": {
          "name": "punctuation.section.arguments.end.bracket.round.function.member.c",
        },
      },
      "patterns": [
        {
          "include": "#function-call-innards",
        },
      ],
    },
    "block": {
      "patterns": [
        {
          "begin": "{",
          "beginCaptures": {
            "0": {
              "name": "punctuation.section.block.begin.bracket.curly.c",
            },
          },
          "end": "}|(?=\\s*#\\s*(?:elif|else|endif)\\b)",
          "endCaptures": {
            "0": {
              "name": "punctuation.section.block.end.bracket.curly.c",
            },
          },
          "name": "meta.block.c",
          "patterns": [
            {
              "include": "#block_innards",
            },
          ],
        },
      ],
    },
    "block_innards": {
      "patterns": [
        {
          "include": "#preprocessor-rule-enabled-block",
        },
        {
          "include": "#preprocessor-rule-disabled-block",
        },
        {
          "include": "#preprocessor-rule-conditional-block",
        },
        {
          "include": "#method_access",
        },
        {
          "include": "#member_access",
        },
        {
          "include": "#c_function_call",
        },
        {
          "name": "meta.initialization.c",
          "begin": "(?x)\n(?:\n  (?:\n\t(?=\\s)(?<!else|new|return)\n\t(?<=\\w) \\s+(and|and_eq|bitand|bitor|compl|not|not_eq|or|or_eq|typeid|xor|xor_eq|alignof|alignas)  # or word + space before name\n  )\n)\n(\n  (?:[A-Za-z_][A-Za-z0-9_]*+ | :: )++   # actual name\n  |\n  (?:(?<=operator) (?:[-*&<>=+!]+ | \\(\\) | \\[\\]))\n)\n\\s*(\\() # opening bracket",
          "beginCaptures": {
            "1": {
              "name": "variable.other.c",
            },
            "2": {
              "name": "punctuation.section.parens.begin.bracket.round.initialization.c",
            },
          },
          "end": "\\)",
          "endCaptures": {
            "0": {
              "name": "punctuation.section.parens.end.bracket.round.initialization.c",
            },
          },
          "patterns": [
            {
              "include": "#function-call-innards",
            },
          ],
        },
        {
          "begin": "{",
          "beginCaptures": {
            "0": {
              "name": "punctuation.section.block.begin.bracket.curly.c",
            },
          },
          "end": "}|(?=\\s*#\\s*(?:elif|else|endif)\\b)",
          "endCaptures": {
            "0": {
              "name": "punctuation.section.block.end.bracket.curly.c",
            },
          },
          "patterns": [
            {
              "include": "#block_innards",
            },
          ],
        },
        {
          "include": "#parens-block",
        },
        {
          "include": "$base",
        },
      ],
    },
    "c_function_call": {
      "begin": "(?x)\n(?!(?:while|for|do|if|else|switch|catch|enumerate|return|typeid|alignof|alignas|sizeof|[cr]?iterate|and|and_eq|bitand|bitor|compl|not|not_eq|or|or_eq|typeid|xor|xor_eq|alignof|alignas)\\s*\\()\n(?=\n(?:[A-Za-z_][A-Za-z0-9_]*+|::)++\\s*\\(  # actual name\n|\n(?:(?<=operator)(?:[-*&<>=+!]+|\\(\\)|\\[\\]))\\s*\\(\n)",
      "end": "(?<=\\))(?!\\w)",
      "name": "meta.function-call.c",
      "patterns": [
        {
          "include": "#function-call-innards",
        },
      ],
    },
    "comments": {
      "patterns": [
        {
          "captures": {
            "1": {
              "name": "meta.toc-list.banner.block.c",
            },
          },
          "match": "^/\\* =(\\s*.*?)\\s*= \\*/$\\n?",
          "name": "comment.block.c",
        },
        {
          "begin": "/\\*",
          "beginCaptures": {
            "0": {
              "name": "punctuation.definition.comment.begin.c",
            },
          },
          "end": "\\*/",
          "endCaptures": {
            "0": {
              "name": "punctuation.definition.comment.end.c",
            },
          },
          "name": "comment.block.c",
        },
        {
          "captures": {
            "1": {
              "name": "meta.toc-list.banner.line.c",
            },
          },
          "match": "^// =(\\s*.*?)\\s*=\\s*$\\n?",
          "name": "comment.line.banner.c",
        },
        {
          "begin": "(^[ \\t]+)?(?=//)",
          "beginCaptures": {
            "1": {
              "name": "punctuation.whitespace.comment.leading.c",
            },
          },
          "end": "(?!\\G)",
          "patterns": [
            {
              "begin": "//",
              "beginCaptures": {
                "0": {
                  "name": "punctuation.definition.comment.c",
                },
              },
              "end": "(?=\\n)",
              "name": "comment.line.double-slash.c",
              "patterns": [
                {
                  "include": "#line_continuation_character",
                },
              ],
            },
          ],
        },
      ],
    },
    "disabled": {
      "begin": "^\\s*#\\s*if(n?def)?\\b.*$",
      "end": "^\\s*#\\s*endif\\b",
      "patterns": [
        {
          "include": "#disabled",
        },
        {
          "include": "#pragma-mark",
        },
      ],
    },
    "line_continuation_character": {
      "patterns": [
        {
          "match": "(\\\\)\\n",
          "captures": {
            "1": {
              "name": "constant.character.escape.line-continuation.c",
            },
          },
        },
      ],
    },
    "parens": {
      "name": "meta.parens.c",
      "begin": "\\(",
      "beginCaptures": {
        "0": {
          "name": "punctuation.section.parens.begin.bracket.round.c",
        },
      },
      "end": "\\)",
      "endCaptures": {
        "0": {
          "name": "punctuation.section.parens.end.bracket.round.c",
        },
      },
      "patterns": [
        {
          "include": "$base",
        },
      ],
    },
    "parens-block": {
      "name": "meta.parens.block.c",
      "begin": "\\(",
      "beginCaptures": {
        "0": {
          "name": "punctuation.section.parens.begin.bracket.round.c",
        },
      },
      "end": "\\)",
      "endCaptures": {
        "0": {
          "name": "punctuation.section.parens.end.bracket.round.c",
        },
      },
      "patterns": [
        {
          "include": "#block_innards",
        },
        {
          "match": "(?-mix:(?<!:):(?!:))",
          "name": "punctuation.range-based.c",
        },
      ],
    },
    "pragma-mark": {
      "captures": {
        "1": {
          "name": "meta.preprocessor.pragma.c",
        },
        "2": {
          "name": "keyword.control.directive.pragma.pragma-mark.c",
        },
        "3": {
          "name": "punctuation.definition.directive.c",
        },
        "4": {
          "name": "entity.name.tag.pragma-mark.c",
        },
      },
      "match": "^\\s*(((#)\\s*pragma\\s+mark)\\s+(.*))",
      "name": "meta.section.c",
    },
    "operators": {
      "patterns": [
        {
          "match": "(?<![\\w$])(sizeof)(?![\\w$])",
          "name": "keyword.operator.sizeof.c",
        },
        {
          "match": "--",
          "name": "keyword.operator.decrement.c",
        },
        {
          "match": "\\+\\+",
          "name": "keyword.operator.increment.c",
        },
        {
          "match": "%=|\\+=|-=|\\*=|(?<!\\()/=",
          "name": "keyword.operator.assignment.compound.c",
        },
        {
          "match": "&=|\\^=|<<=|>>=|\\|=",
          "name": "keyword.operator.assignment.compound.bitwise.c",
        },
        {
          "match": "<<|>>",
          "name": "keyword.operator.bitwise.shift.c",
        },
        {
          "match": "!=|<=|>=|==|<|>",
          "name": "keyword.operator.comparison.c",
        },
        {
          "match": "&&|!|\\|\\|",
          "name": "keyword.operator.logical.c",
        },
        {
          "match": "&|\\||\\^|~",
          "name": "keyword.operator.c",
        },
        {
          "match": "=",
          "name": "keyword.operator.assignment.c",
        },
        {
          "match": "%|\\*|/|-|\\+",
          "name": "keyword.operator.c",
        },
        {
          "begin": "(\\?)",
          "beginCaptures": {
            "1": {
              "name": "keyword.operator.ternary.c",
            },
          },
          "end": "(:)",
          "endCaptures": {
            "1": {
              "name": "keyword.operator.ternary.c",
            },
          },
          "patterns": [
            {
              "include": "#function-call-innards",
            },
            {
              "include": "$base",
            },
          ],
        },
      ],
    },
    "strings": {
      "patterns": [
        {
          "begin": "\"",
          "beginCaptures": {
            "0": {
              "name": "punctuation.definition.string.begin.c",
            },
          },
          "end": "\"",
          "endCaptures": {
            "0": {
              "name": "punctuation.definition.string.end.c",
            },
          },
          "name": "string.quoted.double.c",
          "patterns": [
            {
              "include": "#string_escaped_char",
            },
            {
              "include": "#string_placeholder",
            },
            {
              "include": "#line_continuation_character",
            },
          ],
        },
        {
          "begin": "'",
          "beginCaptures": {
            "0": {
              "name": "punctuation.definition.string.begin.c",
            },
          },
          "end": "'",
          "endCaptures": {
            "0": {
              "name": "punctuation.definition.string.end.c",
            },
          },
          "name": "string.quoted.single.c",
          "patterns": [
            {
              "include": "#string_escaped_char",
            },
            {
              "include": "#line_continuation_character",
            },
          ],
        },
      ],
    },
    "string_escaped_char": {
      "patterns": [
        {
          "match": "(?x)\\\\ (\n\\\\\t\t\t |\n[abefnprtv'\"?]   |\n[0-3]\\d{,2}\t |\n[4-7]\\d?\t\t|\nx[a-fA-F0-9]{,2} |\nu[a-fA-F0-9]{,4} |\nU[a-fA-F0-9]{,8} )",
          "name": "constant.character.escape.c",
        },
        {
          "match": "\\\\.",
          "name": "invalid.illegal.unknown-escape.c",
        },
      ],
    },
    "string_placeholder": {
      "patterns": [
        {
          "match": "(?x) %\n(\\d+\\$)?\t\t\t\t\t\t   # field (argument #)\n[#0\\- +']*\t\t\t\t\t\t  # flags\n[,;:_]?\t\t\t\t\t\t\t  # separator character (AltiVec)\n((-?\\d+)|\\*(-?\\d+\\$)?)?\t\t  # minimum field width\n(\\.((-?\\d+)|\\*(-?\\d+\\$)?)?)?\t# precision\n(hh|h|ll|l|j|t|z|q|L|vh|vl|v|hv|hl)? # length modifier\n[diouxXDOUeEfFgGaACcSspn%]\t\t   # conversion type",
          "name": "constant.other.placeholder.c",
        },
        {
          "match": "(%)(?!\"\\s*(PRI|SCN))",
          "captures": {
            "1": {
              "name": "invalid.illegal.placeholder.c",
            },
          },
        },
      ],
    },
    "storage_types": {
      "patterns": [
        {
          "match": "(?-mix:(?<!\\w)(?:void|char|short|int|signed|unsigned|long|float|double|bool|_Bool)(?!\\w))",
          "name": "storage.type.built-in.primitive.c",
        },
        {
          "match": "(?-mix:(?<!\\w)(?:_Complex|_Imaginary|u_char|u_short|u_int|u_long|ushort|uint|u_quad_t|quad_t|qaddr_t|caddr_t|daddr_t|div_t|dev_t|fixpt_t|blkcnt_t|blksize_t|gid_t|in_addr_t|in_port_t|ino_t|key_t|mode_t|nlink_t|id_t|pid_t|off_t|segsz_t|swblk_t|uid_t|id_t|clock_t|size_t|ssize_t|time_t|useconds_t|suseconds_t|pthread_attr_t|pthread_cond_t|pthread_condattr_t|pthread_mutex_t|pthread_mutexattr_t|pthread_once_t|pthread_rwlock_t|pthread_rwlockattr_t|pthread_t|pthread_key_t|int8_t|int16_t|int32_t|int64_t|uint8_t|uint16_t|uint32_t|uint64_t|int_least8_t|int_least16_t|int_least32_t|int_least64_t|uint_least8_t|uint_least16_t|uint_least32_t|uint_least64_t|int_fast8_t|int_fast16_t|int_fast32_t|int_fast64_t|uint_fast8_t|uint_fast16_t|uint_fast32_t|uint_fast64_t|intptr_t|uintptr_t|intmax_t|intmax_t|uintmax_t|uintmax_t|memory_order|atomic_bool|atomic_char|atomic_schar|atomic_uchar|atomic_short|atomic_ushort|atomic_int|atomic_uint|atomic_long|atomic_ulong|atomic_llong|atomic_ullong|atomic_char16_t|atomic_char32_t|atomic_wchar_t|atomic_int_least8_t|atomic_uint_least8_t|atomic_int_least16_t|atomic_uint_least16_t|atomic_int_least32_t|atomic_uint_least32_t|atomic_int_least64_t|atomic_uint_least64_t|atomic_int_fast8_t|atomic_uint_fast8_t|atomic_int_fast16_t|atomic_uint_fast16_t|atomic_int_fast32_t|atomic_uint_fast32_t|atomic_int_fast64_t|atomic_uint_fast64_t|atomic_intptr_t|atomic_uintptr_t|atomic_size_t|atomic_ptrdiff_t|atomic_intmax_t|atomic_uintmax_t)(?!\\w))",
          "name": "storage.type.built-in.c",
        },
        {
          "match": "(?-mix:\\b(asm|__asm__|enum|struct|union)\\b)",
          "name": "storage.type.$1.c",
        },
      ],
    },
    "vararg_ellipses": {
      "match": "(?<!\\.)\\.\\.\\.(?!\\.)",
      "name": "punctuation.vararg-ellipses.c",
    },
    "preprocessor-rule-conditional": {
      "patterns": [
        {
          "begin": "^\\s*((#)\\s*if(?:n?def)?\\b)",
          "beginCaptures": {
            "0": {
              "name": "meta.preprocessor.c",
            },
            "1": {
              "name": "keyword.control.directive.conditional.c",
            },
            "2": {
              "name": "punctuation.definition.directive.c",
            },
          },
          "end": "^\\s*((#)\\s*endif\\b)",
          "endCaptures": {
            "0": {
              "name": "meta.preprocessor.c",
            },
            "1": {
              "name": "keyword.control.directive.conditional.c",
            },
            "2": {
              "name": "punctuation.definition.directive.c",
            },
          },
          "patterns": [
            {
              "begin": "\\G(?=.)(?!//|/\\*(?!.*\\\\\\s*\\n))",
              "end": "(?=//)|(?=/\\*(?!.*\\\\\\s*\\n))|(?<!\\\\)(?=\\n)",
              "name": "meta.preprocessor.c",
              "patterns": [
                {
                  "include": "#preprocessor-rule-conditional-line",
                },
              ],
            },
            {
              "include": "#preprocessor-rule-enabled-elif",
            },
            {
              "include": "#preprocessor-rule-enabled-else",
            },
            {
              "include": "#preprocessor-rule-disabled-elif",
            },
            {
              "begin": "^\\s*((#)\\s*elif\\b)",
              "beginCaptures": {
                "1": {
                  "name": "keyword.control.directive.conditional.c",
                },
                "2": {
                  "name": "punctuation.definition.directive.c",
                },
              },
              "end": "(?=//)|(?=/\\*(?!.*\\\\\\s*\\n))|(?<!\\\\)(?=\\n)",
              "name": "meta.preprocessor.c",
              "patterns": [
                {
                  "include": "#preprocessor-rule-conditional-line",
                },
              ],
            },
            {
              "include": "$base",
            },
          ],
        },
        {
          "match": "^\\s*#\\s*(else|elif|endif)\\b",
          "captures": {
            "0": {
              "name": "invalid.illegal.stray-$1.c",
            },
          },
        },
      ],
    },
    "preprocessor-rule-conditional-block": {
      "patterns": [
        {
          "begin": "^\\s*((#)\\s*if(?:n?def)?\\b)",
          "beginCaptures": {
            "0": {
              "name": "meta.preprocessor.c",
            },
            "1": {
              "name": "keyword.control.directive.conditional.c",
            },
            "2": {
              "name": "punctuation.definition.directive.c",
            },
          },
          "end": "^\\s*((#)\\s*endif\\b)",
          "endCaptures": {
            "0": {
              "name": "meta.preprocessor.c",
            },
            "1": {
              "name": "keyword.control.directive.conditional.c",
            },
            "2": {
              "name": "punctuation.definition.directive.c",
            },
          },
          "patterns": [
            {
              "begin": "\\G(?=.)(?!//|/\\*(?!.*\\\\\\s*\\n))",
              "end": "(?=//)|(?=/\\*(?!.*\\\\\\s*\\n))|(?<!\\\\)(?=\\n)",
              "name": "meta.preprocessor.c",
              "patterns": [
                {
                  "include": "#preprocessor-rule-conditional-line",
                },
              ],
            },
            {
              "include": "#preprocessor-rule-enabled-elif-block",
            },
            {
              "include": "#preprocessor-rule-enabled-else-block",
            },
            {
              "include": "#preprocessor-rule-disabled-elif",
            },
            {
              "begin": "^\\s*((#)\\s*elif\\b)",
              "beginCaptures": {
                "1": {
                  "name": "keyword.control.directive.conditional.c",
                },
                "2": {
                  "name": "punctuation.definition.directive.c",
                },
              },
              "end": "(?=//)|(?=/\\*(?!.*\\\\\\s*\\n))|(?<!\\\\)(?=\\n)",
              "name": "meta.preprocessor.c",
              "patterns": [
                {
                  "include": "#preprocessor-rule-conditional-line",
                },
              ],
            },
            {
              "include": "#block_innards",
            },
          ],
        },
        {
          "match": "^\\s*#\\s*(else|elif|endif)\\b",
          "captures": {
            "0": {
              "name": "invalid.illegal.stray-$1.c",
            },
          },
        },
      ],
    },
    "preprocessor-rule-conditional-line": {
      "patterns": [
        {
          "match": "(?:\\bdefined\\b\\s*$)|(?:\\bdefined\\b(?=\\s*\\(*\\s*(?:(?!defined\\b)[a-zA-Z_$][\\w$]*\\b)\\s*\\)*\\s*(?:\\n|//|/\\*|\\?|\\:|&&|\\|\\||\\\\\\s*\\n)))",
          "name": "keyword.control.directive.conditional.c",
        },
        {
          "match": "\\bdefined\\b",
          "name": "invalid.illegal.macro-name.c",
        },
        {
          "include": "#comments",
        },
        {
          "include": "#strings",
        },
        {
          "include": "#numbers",
        },
        {
          "begin": "\\?",
          "beginCaptures": {
            "0": {
              "name": "keyword.operator.ternary.c",
            },
          },
          "end": ":",
          "endCaptures": {
            "0": {
              "name": "keyword.operator.ternary.c",
            },
          },
          "patterns": [
            {
              "include": "#preprocessor-rule-conditional-line",
            },
          ],
        },
        {
          "include": "#operators",
        },
        {
          "match": "\\b(NULL|true|false|TRUE|FALSE)\\b",
          "name": "constant.language.c",
        },
        {
          "match": "[a-zA-Z_$][\\w$]*",
          "name": "entity.name.function.preprocessor.c",
        },
        {
          "include": "#line_continuation_character",
        },
        {
          "begin": "\\(",
          "beginCaptures": {
            "0": {
              "name": "punctuation.section.parens.begin.bracket.round.c",
            },
          },
          "end": "\\)|(?=//)|(?=/\\*(?!.*\\\\\\s*\\n))|(?<!\\\\)(?=\\n)",
          "endCaptures": {
            "0": {
              "name": "punctuation.section.parens.end.bracket.round.c",
            },
          },
          "patterns": [
            {
              "include": "#preprocessor-rule-conditional-line",
            },
          ],
        },
      ],
    },
    "preprocessor-rule-disabled": {
      "patterns": [
        {
          "begin": "^\\s*((#)\\s*if\\b)(?=\\s*\\(*\\b0+\\b\\)*\\s*(?:$|//|/\\*))",
          "beginCaptures": {
            "0": {
              "name": "meta.preprocessor.c",
            },
            "1": {
              "name": "keyword.control.directive.conditional.c",
            },
            "2": {
              "name": "punctuation.definition.directive.c",
            },
          },
          "end": "^\\s*((#)\\s*endif\\b)",
          "endCaptures": {
            "0": {
              "name": "meta.preprocessor.c",
            },
            "1": {
              "name": "keyword.control.directive.conditional.c",
            },
            "2": {
              "name": "punctuation.definition.directive.c",
            },
          },
          "patterns": [
            {
              "begin": "\\G(?=.)(?!//|/\\*(?!.*\\\\\\s*\\n))",
              "end": "(?=//)|(?=/\\*(?!.*\\\\\\s*\\n))|(?=\\n)",
              "name": "meta.preprocessor.c",
              "patterns": [
                {
                  "include": "#preprocessor-rule-conditional-line",
                },
              ],
            },
            {
              "include": "#comments",
            },
            {
              "include": "#preprocessor-rule-enabled-elif",
            },
            {
              "include": "#preprocessor-rule-enabled-else",
            },
            {
              "include": "#preprocessor-rule-disabled-elif",
            },
            {
              "begin": "^\\s*((#)\\s*elif\\b)",
              "beginCaptures": {
                "0": {
                  "name": "meta.preprocessor.c",
                },
                "1": {
                  "name": "keyword.control.directive.conditional.c",
                },
                "2": {
                  "name": "punctuation.definition.directive.c",
                },
              },
              "end": "(?=^\\s*((#)\\s*(?:elif|else|endif)\\b))",
              "patterns": [
                {
                  "begin": "\\G(?=.)(?!//|/\\*(?!.*\\\\\\s*\\n))",
                  "end": "(?=//)|(?=/\\*(?!.*\\\\\\s*\\n))|(?<!\\\\)(?=\\n)",
                  "name": "meta.preprocessor.c",
                  "patterns": [
                    {
                      "include": "#preprocessor-rule-conditional-line",
                    },
                  ],
                },
                {
                  "include": "$base",
                },
              ],
            },
            {
              "contentName": "comment.block.preprocessor.if-branch.c",
              "begin": "\\n",
              "end": "(?=^\\s*((#)\\s*(?:else|elif|endif)\\b))",
              "patterns": [
                {
                  "include": "#disabled",
                },
                {
                  "include": "#pragma-mark",
                },
              ],
            },
          ],
        },
      ],
    },
    "preprocessor-rule-disabled-block": {
      "patterns": [
        {
          "begin": "^\\s*((#)\\s*if\\b)(?=\\s*\\(*\\b0+\\b\\)*\\s*(?:$|//|/\\*))",
          "beginCaptures": {
            "0": {
              "name": "meta.preprocessor.c",
            },
            "1": {
              "name": "keyword.control.directive.conditional.c",
            },
            "2": {
              "name": "punctuation.definition.directive.c",
            },
          },
          "end": "^\\s*((#)\\s*endif\\b)",
          "endCaptures": {
            "0": {
              "name": "meta.preprocessor.c",
            },
            "1": {
              "name": "keyword.control.directive.conditional.c",
            },
            "2": {
              "name": "punctuation.definition.directive.c",
            },
          },
          "patterns": [
            {
              "begin": "\\G(?=.)(?!//|/\\*(?!.*\\\\\\s*\\n))",
              "end": "(?=//)|(?=/\\*(?!.*\\\\\\s*\\n))|(?=\\n)",
              "name": "meta.preprocessor.c",
              "patterns": [
                {
                  "include": "#preprocessor-rule-conditional-line",
                },
              ],
            },
            {
              "include": "#comments",
            },
            {
              "include": "#preprocessor-rule-enabled-elif-block",
            },
            {
              "include": "#preprocessor-rule-enabled-else-block",
            },
            {
              "include": "#preprocessor-rule-disabled-elif",
            },
            {
              "begin": "^\\s*((#)\\s*elif\\b)",
              "beginCaptures": {
                "0": {
                  "name": "meta.preprocessor.c",
                },
                "1": {
                  "name": "keyword.control.directive.conditional.c",
                },
                "2": {
                  "name": "punctuation.definition.directive.c",
                },
              },
              "end": "(?=^\\s*((#)\\s*(?:elif|else|endif)\\b))",
              "patterns": [
                {
                  "begin": "\\G(?=.)(?!//|/\\*(?!.*\\\\\\s*\\n))",
                  "end": "(?=//)|(?=/\\*(?!.*\\\\\\s*\\n))|(?<!\\\\)(?=\\n)",
                  "name": "meta.preprocessor.c",
                  "patterns": [
                    {
                      "include": "#preprocessor-rule-conditional-line",
                    },
                  ],
                },
                {
                  "include": "#block_innards",
                },
              ],
            },
            {
              "contentName": "comment.block.preprocessor.if-branch.in-block.c",
              "begin": "\\n",
              "end": "(?=^\\s*((#)\\s*(?:else|elif|endif)\\b))",
              "patterns": [
                {
                  "include": "#disabled",
                },
                {
                  "include": "#pragma-mark",
                },
              ],
            },
          ],
        },
      ],
    },
    "preprocessor-rule-disabled-elif": {
      "begin": "^\\s*((#)\\s*elif\\b)(?=\\s*\\(*\\b0+\\b\\)*\\s*(?:$|//|/\\*))",
      "beginCaptures": {
        "0": {
          "name": "meta.preprocessor.c",
        },
        "1": {
          "name": "keyword.control.directive.conditional.c",
        },
        "2": {
          "name": "punctuation.definition.directive.c",
        },
      },
      "end": "(?=^\\s*((#)\\s*(?:elif|else|endif)\\b))",
      "patterns": [
        {
          "begin": "\\G(?=.)(?!//|/\\*(?!.*\\\\\\s*\\n))",
          "end": "(?=//)|(?=/\\*(?!.*\\\\\\s*\\n))|(?<!\\\\)(?=\\n)",
          "name": "meta.preprocessor.c",
          "patterns": [
            {
              "include": "#preprocessor-rule-conditional-line",
            },
          ],
        },
        {
          "include": "#comments",
        },
        {
          "contentName": "comment.block.preprocessor.elif-branch.c",
          "begin": "\\n",
          "end": "(?=^\\s*((#)\\s*(?:else|elif|endif)\\b))",
          "patterns": [
            {
              "include": "#disabled",
            },
            {
              "include": "#pragma-mark",
            },
          ],
        },
      ],
    },
    "preprocessor-rule-enabled": {
      "patterns": [
        {
          "begin": "^\\s*((#)\\s*if\\b)(?=\\s*\\(*\\b0*1\\b\\)*\\s*(?:$|//|/\\*))",
          "beginCaptures": {
            "0": {
              "name": "meta.preprocessor.c",
            },
            "1": {
              "name": "keyword.control.directive.conditional.c",
            },
            "2": {
              "name": "punctuation.definition.directive.c",
            },
            "3": {
              "name": "constant.numeric.preprocessor.c",
            },
          },
          "end": "^\\s*((#)\\s*endif\\b)",
          "endCaptures": {
            "0": {
              "name": "meta.preprocessor.c",
            },
            "1": {
              "name": "keyword.control.directive.conditional.c",
            },
            "2": {
              "name": "punctuation.definition.directive.c",
            },
          },
          "patterns": [
            {
              "begin": "\\G(?=.)(?!//|/\\*(?!.*\\\\\\s*\\n))",
              "end": "(?=//)|(?=/\\*(?!.*\\\\\\s*\\n))|(?=\\n)",
              "name": "meta.preprocessor.c",
              "patterns": [
                {
                  "include": "#preprocessor-rule-conditional-line",
                },
              ],
            },
            {
              "include": "#comments",
            },
            {
              "contentName": "comment.block.preprocessor.else-branch.c",
              "begin": "^\\s*((#)\\s*else\\b)",
              "beginCaptures": {
                "0": {
                  "name": "meta.preprocessor.c",
                },
                "1": {
                  "name": "keyword.control.directive.conditional.c",
                },
                "2": {
                  "name": "punctuation.definition.directive.c",
                },
              },
              "end": "(?=^\\s*((#)\\s*endif\\b))",
              "patterns": [
                {
                  "include": "#disabled",
                },
                {
                  "include": "#pragma-mark",
                },
              ],
            },
            {
              "contentName": "comment.block.preprocessor.if-branch.c",
              "begin": "^\\s*((#)\\s*elif\\b)",
              "beginCaptures": {
                "0": {
                  "name": "meta.preprocessor.c",
                },
                "1": {
                  "name": "keyword.control.directive.conditional.c",
                },
                "2": {
                  "name": "punctuation.definition.directive.c",
                },
              },
              "end": "(?=^\\s*((#)\\s*(?:else|elif|endif)\\b))",
              "patterns": [
                {
                  "include": "#disabled",
                },
                {
                  "include": "#pragma-mark",
                },
              ],
            },
            {
              "begin": "\\n",
              "end": "(?=^\\s*((#)\\s*(?:else|elif|endif)\\b))",
              "patterns": [
                {
                  "include": "$base",
                },
              ],
            },
          ],
        },
      ],
    },
    "preprocessor-rule-enabled-block": {
      "patterns": [
        {
          "begin": "^\\s*((#)\\s*if\\b)(?=\\s*\\(*\\b0*1\\b\\)*\\s*(?:$|//|/\\*))",
          "beginCaptures": {
            "0": {
              "name": "meta.preprocessor.c",
            },
            "1": {
              "name": "keyword.control.directive.conditional.c",
            },
            "2": {
              "name": "punctuation.definition.directive.c",
            },
          },
          "end": "^\\s*((#)\\s*endif\\b)",
          "endCaptures": {
            "0": {
              "name": "meta.preprocessor.c",
            },
            "1": {
              "name": "keyword.control.directive.conditional.c",
            },
            "2": {
              "name": "punctuation.definition.directive.c",
            },
          },
          "patterns": [
            {
              "begin": "\\G(?=.)(?!//|/\\*(?!.*\\\\\\s*\\n))",
              "end": "(?=//)|(?=/\\*(?!.*\\\\\\s*\\n))|(?=\\n)",
              "name": "meta.preprocessor.c",
              "patterns": [
                {
                  "include": "#preprocessor-rule-conditional-line",
                },
              ],
            },
            {
              "include": "#comments",
            },
            {
              "contentName": "comment.block.preprocessor.else-branch.in-block.c",
              "begin": "^\\s*((#)\\s*else\\b)",
              "beginCaptures": {
                "0": {
                  "name": "meta.preprocessor.c",
                },
                "1": {
                  "name": "keyword.control.directive.conditional.c",
                },
                "2": {
                  "name": "punctuation.definition.directive.c",
                },
              },
              "end": "(?=^\\s*((#)\\s*endif\\b))",
              "patterns": [
                {
                  "include": "#disabled",
                },
                {
                  "include": "#pragma-mark",
                },
              ],
            },
            {
              "contentName": "comment.block.preprocessor.if-branch.in-block.c",
              "begin": "^\\s*((#)\\s*elif\\b)",
              "beginCaptures": {
                "0": {
                  "name": "meta.preprocessor.c",
                },
                "1": {
                  "name": "keyword.control.directive.conditional.c",
                },
                "2": {
                  "name": "punctuation.definition.directive.c",
                },
              },
              "end": "(?=^\\s*((#)\\s*(?:else|elif|endif)\\b))",
              "patterns": [
                {
                  "include": "#disabled",
                },
                {
                  "include": "#pragma-mark",
                },
              ],
            },
            {
              "begin": "\\n",
              "end": "(?=^\\s*((#)\\s*(?:else|elif|endif)\\b))",
              "patterns": [
                {
                  "include": "#block_innards",
                },
              ],
            },
          ],
        },
      ],
    },
    "preprocessor-rule-enabled-elif": {
      "begin": "^\\s*((#)\\s*elif\\b)(?=\\s*\\(*\\b0*1\\b\\)*\\s*(?:$|//|/\\*))",
      "beginCaptures": {
        "0": {
          "name": "meta.preprocessor.c",
        },
        "1": {
          "name": "keyword.control.directive.conditional.c",
        },
        "2": {
          "name": "punctuation.definition.directive.c",
        },
      },
      "end": "(?=^\\s*((#)\\s*endif\\b))",
      "patterns": [
        {
          "begin": "\\G(?=.)(?!//|/\\*(?!.*\\\\\\s*\\n))",
          "end": "(?=//)|(?=/\\*(?!.*\\\\\\s*\\n))|(?<!\\\\)(?=\\n)",
          "name": "meta.preprocessor.c",
          "patterns": [
            {
              "include": "#preprocessor-rule-conditional-line",
            },
          ],
        },
        {
          "include": "#comments",
        },
        {
          "begin": "\\n",
          "end": "(?=^\\s*((#)\\s*(?:endif)\\b))",
          "patterns": [
            {
              "contentName": "comment.block.preprocessor.elif-branch.c",
              "begin": "^\\s*((#)\\s*(else)\\b)",
              "beginCaptures": {
                "0": {
                  "name": "meta.preprocessor.c",
                },
                "1": {
                  "name": "keyword.control.directive.conditional.c",
                },
                "2": {
                  "name": "punctuation.definition.directive.c",
                },
              },
              "end": "(?=^\\s*((#)\\s*endif\\b))",
              "patterns": [
                {
                  "include": "#disabled",
                },
                {
                  "include": "#pragma-mark",
                },
              ],
            },
            {
              "contentName": "comment.block.preprocessor.elif-branch.c",
              "begin": "^\\s*((#)\\s*(elif)\\b)",
              "beginCaptures": {
                "0": {
                  "name": "meta.preprocessor.c",
                },
                "1": {
                  "name": "keyword.control.directive.conditional.c",
                },
                "2": {
                  "name": "punctuation.definition.directive.c",
                },
              },
              "end": "(?=^\\s*((#)\\s*(?:else|elif|endif)\\b))",
              "patterns": [
                {
                  "include": "#disabled",
                },
                {
                  "include": "#pragma-mark",
                },
              ],
            },
            {
              "include": "$base",
            },
          ],
        },
      ],
    },
    "preprocessor-rule-enabled-elif-block": {
      "begin": "^\\s*((#)\\s*elif\\b)(?=\\s*\\(*\\b0*1\\b\\)*\\s*(?:$|//|/\\*))",
      "beginCaptures": {
        "0": {
          "name": "meta.preprocessor.c",
        },
        "1": {
          "name": "keyword.control.directive.conditional.c",
        },
        "2": {
          "name": "punctuation.definition.directive.c",
        },
      },
      "end": "(?=^\\s*((#)\\s*endif\\b))",
      "patterns": [
        {
          "begin": "\\G(?=.)(?!//|/\\*(?!.*\\\\\\s*\\n))",
          "end": "(?=//)|(?=/\\*(?!.*\\\\\\s*\\n))|(?<!\\\\)(?=\\n)",
          "name": "meta.preprocessor.c",
          "patterns": [
            {
              "include": "#preprocessor-rule-conditional-line",
            },
          ],
        },
        {
          "include": "#comments",
        },
        {
          "begin": "\\n",
          "end": "(?=^\\s*((#)\\s*(?:endif)\\b))",
          "patterns": [
            {
              "contentName": "comment.block.preprocessor.elif-branch.in-block.c",
              "begin": "^\\s*((#)\\s*(else)\\b)",
              "beginCaptures": {
                "0": {
                  "name": "meta.preprocessor.c",
                },
                "1": {
                  "name": "keyword.control.directive.conditional.c",
                },
                "2": {
                  "name": "punctuation.definition.directive.c",
                },
              },
              "end": "(?=^\\s*((#)\\s*endif\\b))",
              "patterns": [
                {
                  "include": "#disabled",
                },
                {
                  "include": "#pragma-mark",
                },
              ],
            },
            {
              "contentName": "comment.block.preprocessor.elif-branch.c",
              "begin": "^\\s*((#)\\s*(elif)\\b)",
              "beginCaptures": {
                "0": {
                  "name": "meta.preprocessor.c",
                },
                "1": {
                  "name": "keyword.control.directive.conditional.c",
                },
                "2": {
                  "name": "punctuation.definition.directive.c",
                },
              },
              "end": "(?=^\\s*((#)\\s*(?:else|elif|endif)\\b))",
              "patterns": [
                {
                  "include": "#disabled",
                },
                {
                  "include": "#pragma-mark",
                },
              ],
            },
            {
              "include": "#block_innards",
            },
          ],
        },
      ],
    },
    "preprocessor-rule-enabled-else": {
      "begin": "^\\s*((#)\\s*else\\b)",
      "beginCaptures": {
        "0": {
          "name": "meta.preprocessor.c",
        },
        "1": {
          "name": "keyword.control.directive.conditional.c",
        },
        "2": {
          "name": "punctuation.definition.directive.c",
        },
      },
      "end": "(?=^\\s*((#)\\s*endif\\b))",
      "patterns": [
        {
          "include": "$base",
        },
      ],
    },
    "preprocessor-rule-enabled-else-block": {
      "begin": "^\\s*((#)\\s*else\\b)",
      "beginCaptures": {
        "0": {
          "name": "meta.preprocessor.c",
        },
        "1": {
          "name": "keyword.control.directive.conditional.c",
        },
        "2": {
          "name": "punctuation.definition.directive.c",
        },
      },
      "end": "(?=^\\s*((#)\\s*endif\\b))",
      "patterns": [
        {
          "include": "#block_innards",
        },
      ],
    },
    "preprocessor-rule-define-line-contents": {
      "patterns": [
        {
          "include": "#vararg_ellipses",
        },
        {
          "begin": "{",
          "beginCaptures": {
            "0": {
              "name": "punctuation.section.block.begin.bracket.curly.c",
            },
          },
          "end": "}|(?=\\s*#\\s*(?:elif|else|endif)\\b)|(?<!\\\\)(?=\\s*\\n)",
          "endCaptures": {
            "0": {
              "name": "punctuation.section.block.end.bracket.curly.c",
            },
          },
          "name": "meta.block.c",
          "patterns": [
            {
              "include": "#preprocessor-rule-define-line-blocks",
            },
          ],
        },
        {
          "match": "\\(",
          "name": "punctuation.section.parens.begin.bracket.round.c",
        },
        {
          "match": "\\)",
          "name": "punctuation.section.parens.end.bracket.round.c",
        },
        {
          "begin": "(?x)\n(?!(?:while|for|do|if|else|switch|catch|enumerate|return|typeid|alignof|alignas|sizeof|[cr]?iterate|and|and_eq|bitand|bitor|compl|not|not_eq|or|or_eq|typeid|xor|xor_eq|alignof|alignas|asm|__asm__|auto|bool|_Bool|char|_Complex|double|enum|float|_Imaginary|int|long|short|signed|struct|typedef|union|unsigned|void)\\s*\\()\n(?=\n  (?:[A-Za-z_][A-Za-z0-9_]*+|::)++\\s*\\(  # actual name\n  |\n  (?:(?<=operator)(?:[-*&<>=+!]+|\\(\\)|\\[\\]))\\s*\\(\n)",
          "end": "(?<=\\))(?!\\w)|(?<!\\\\)(?=\\s*\\n)",
          "name": "meta.function.c",
          "patterns": [
            {
              "include": "#preprocessor-rule-define-line-functions",
            },
          ],
        },
        {
          "begin": "\"",
          "beginCaptures": {
            "0": {
              "name": "punctuation.definition.string.begin.c",
            },
          },
          "end": "\"|(?<!\\\\)(?=\\s*\\n)",
          "endCaptures": {
            "0": {
              "name": "punctuation.definition.string.end.c",
            },
          },
          "name": "string.quoted.double.c",
          "patterns": [
            {
              "include": "#string_escaped_char",
            },
            {
              "include": "#string_placeholder",
            },
            {
              "include": "#line_continuation_character",
            },
          ],
        },
        {
          "begin": "'",
          "beginCaptures": {
            "0": {
              "name": "punctuation.definition.string.begin.c",
            },
          },
          "end": "'|(?<!\\\\)(?=\\s*\\n)",
          "endCaptures": {
            "0": {
              "name": "punctuation.definition.string.end.c",
            },
          },
          "name": "string.quoted.single.c",
          "patterns": [
            {
              "include": "#string_escaped_char",
            },
            {
              "include": "#line_continuation_character",
            },
          ],
        },
        {
          "include": "#method_access",
        },
        {
          "include": "#member_access",
        },
        {
          "include": "$base",
        },
      ],
    },
    "preprocessor-rule-define-line-blocks": {
      "patterns": [
        {
          "begin": "{",
          "beginCaptures": {
            "0": {
              "name": "punctuation.section.block.begin.bracket.curly.c",
            },
          },
          "end": "}|(?=\\s*#\\s*(?:elif|else|endif)\\b)|(?<!\\\\)(?=\\s*\\n)",
          "endCaptures": {
            "0": {
              "name": "punctuation.section.block.end.bracket.curly.c",
            },
          },
          "patterns": [
            {
              "include": "#preprocessor-rule-define-line-blocks",
            },
            {
              "include": "#preprocessor-rule-define-line-contents",
            },
          ],
        },
        {
          "include": "#preprocessor-rule-define-line-contents",
        },
      ],
    },
    "preprocessor-rule-define-line-functions": {
      "patterns": [
        {
          "include": "#comments",
        },
        {
          "include": "#storage_types",
        },
        {
          "include": "#vararg_ellipses",
        },
        {
          "include": "#method_access",
        },
        {
          "include": "#member_access",
        },
        {
          "include": "#operators",
        },
        {
          "begin": "(?x)\n(?!(?:while|for|do|if|else|switch|catch|enumerate|return|typeid|alignof|alignas|sizeof|[cr]?iterate|and|and_eq|bitand|bitor|compl|not|not_eq|or|or_eq|typeid|xor|xor_eq|alignof|alignas)\\s*\\()\n(\n(?:[A-Za-z_][A-Za-z0-9_]*+|::)++  # actual name\n|\n(?:(?<=operator)(?:[-*&<>=+!]+|\\(\\)|\\[\\]))\n)\n\\s*(\\()",
          "beginCaptures": {
            "1": {
              "name": "entity.name.function.c",
            },
            "2": {
              "name": "punctuation.section.arguments.begin.bracket.round.c",
            },
          },
          "end": "(\\))|(?<!\\\\)(?=\\s*\\n)",
          "endCaptures": {
            "1": {
              "name": "punctuation.section.arguments.end.bracket.round.c",
            },
          },
          "patterns": [
            {
              "include": "#preprocessor-rule-define-line-functions",
            },
          ],
        },
        {
          "begin": "\\(",
          "beginCaptures": {
            "0": {
              "name": "punctuation.section.parens.begin.bracket.round.c",
            },
          },
          "end": "(\\))|(?<!\\\\)(?=\\s*\\n)",
          "endCaptures": {
            "1": {
              "name": "punctuation.section.parens.end.bracket.round.c",
            },
          },
          "patterns": [
            {
              "include": "#preprocessor-rule-define-line-functions",
            },
          ],
        },
        {
          "include": "#preprocessor-rule-define-line-contents",
        },
      ],
    },
    "function-innards": {
      "patterns": [
        {
          "include": "#comments",
        },
        {
          "include": "#storage_types",
        },
        {
          "include": "#operators",
        },
        {
          "include": "#vararg_ellipses",
        },
        {
          "name": "meta.function.definition.parameters.c",
          "begin": "(?x)\n(?!(?:while|for|do|if|else|switch|catch|enumerate|return|typeid|alignof|alignas|sizeof|[cr]?iterate|and|and_eq|bitand|bitor|compl|not|not_eq|or|or_eq|typeid|xor|xor_eq|alignof|alignas)\\s*\\()\n(\n(?:[A-Za-z_][A-Za-z0-9_]*+|::)++  # actual name\n|\n(?:(?<=operator)(?:[-*&<>=+!]+|\\(\\)|\\[\\]))\n)\n\\s*(\\()",
          "beginCaptures": {
            "1": {
              "name": "entity.name.function.c",
            },
            "2": {
              "name": "punctuation.section.parameters.begin.bracket.round.c",
            },
          },
          "end": "\\)",
          "endCaptures": {
            "0": {
              "name": "punctuation.section.parameters.end.bracket.round.c",
            },
          },
          "patterns": [
            {
              "include": "#probably_a_parameter",
            },
            {
              "include": "#function-innards",
            },
          ],
        },
        {
          "begin": "\\(",
          "beginCaptures": {
            "0": {
              "name": "punctuation.section.parens.begin.bracket.round.c",
            },
          },
          "end": "\\)",
          "endCaptures": {
            "0": {
              "name": "punctuation.section.parens.end.bracket.round.c",
            },
          },
          "patterns": [
            {
              "include": "#function-innards",
            },
          ],
        },
        {
          "include": "$base",
        },
      ],
    },
    "function-call-innards": {
      "patterns": [
        {
          "include": "#comments",
        },
        {
          "include": "#storage_types",
        },
        {
          "include": "#method_access",
        },
        {
          "include": "#member_access",
        },
        {
          "include": "#operators",
        },
        {
          "begin": "(?x)\n(?!(?:while|for|do|if|else|switch|catch|enumerate|return|typeid|alignof|alignas|sizeof|[cr]?iterate|and|and_eq|bitand|bitor|compl|not|not_eq|or|or_eq|typeid|xor|xor_eq|alignof|alignas)\\s*\\()\n(\n(?:[A-Za-z_][A-Za-z0-9_]*+|::)++  # actual name\n|\n(?:(?<=operator)(?:[-*&<>=+!]+|\\(\\)|\\[\\]))\n)\n\\s*(\\()",
          "beginCaptures": {
            "1": {
              "name": "entity.name.function.c",
            },
            "2": {
              "name": "punctuation.section.arguments.begin.bracket.round.c",
            },
          },
          "end": "\\)",
          "endCaptures": {
            "0": {
              "name": "punctuation.section.arguments.end.bracket.round.c",
            },
          },
          "patterns": [
            {
              "include": "#function-call-innards",
            },
          ],
        },
        {
          "begin": "\\(",
          "beginCaptures": {
            "0": {
              "name": "punctuation.section.parens.begin.bracket.round.c",
            },
          },
          "end": "\\)",
          "endCaptures": {
            "0": {
              "name": "punctuation.section.parens.end.bracket.round.c",
            },
          },
          "patterns": [
            {
              "include": "#function-call-innards",
            },
          ],
        },
        {
          "include": "#block_innards",
        },
      ],
    },
    "default_statement": {
      "name": "meta.conditional.case.c",
      "begin": "((?<!\\w)default(?!\\w))",
      "beginCaptures": {
        "1": {
          "name": "keyword.control.default.c",
        },
      },
      "end": "(:)",
      "endCaptures": {
        "1": {
          "name": "colon.c punctuation.separator.case.default.c",
        },
      },
      "patterns": [
        {
          "include": "#conditional_context",
        },
      ],
    },
    "case_statement": {
      "name": "meta.conditional.case.c",
      "begin": "((?<!\\w)case(?!\\w))",
      "beginCaptures": {
        "1": {
          "name": "keyword.control.case.c",
        },
      },
      "end": "(:)",
      "endCaptures": {
        "1": {
          "name": "colon.c punctuation.separator.case.c",
        },
      },
      "patterns": [
        {
          "include": "#conditional_context",
        },
      ],
    },
    "switch_statement": {
      "name": "meta.block.switch.c",
      "begin": "(((?<!\\w)switch(?!\\w)))",
      "beginCaptures": {
        "1": {
          "name": "meta.head.switch.c",
        },
        "2": {
          "name": "keyword.control.switch.c",
        },
      },
      "end": "(?:(?<=\\})|(?=[;>\\[\\]=]))",
      "patterns": [
        {
          "name": "meta.head.switch.c",
          "begin": "\\G ?",
          "end": "((?:\\{|(?=;)))",
          "endCaptures": {
            "1": {
              "name": "punctuation.section.block.begin.bracket.curly.switch.c",
            },
          },
          "patterns": [
            {
              "include": "#switch_conditional_parentheses",
            },
            {
              "include": "$base",
            },
          ],
        },
        {
          "name": "meta.body.switch.c",
          "begin": "(?<=\\{)",
          "end": "(\\})",
          "endCaptures": {
            "1": {
              "name": "punctuation.section.block.end.bracket.curly.switch.c",
            },
          },
          "patterns": [
            {
              "include": "#default_statement",
            },
            {
              "include": "#case_statement",
            },
            {
              "include": "$base",
            },
            {
              "include": "#block_innards",
            },
          ],
        },
        {
          "name": "meta.tail.switch.c",
          "begin": "(?<=})[\\s\\n]*",
          "end": "[\\s\\n]*(?=;)",
          "patterns": [
            {
              "include": "$base",
            },
          ],
        },
      ],
    },
    "switch_conditional_parentheses": {
      "name": "meta.conditional.switch.c",
      "begin": "(\\()",
      "beginCaptures": {
        "1": {
          "name": "punctuation.section.parens.begin.bracket.round.conditional.switch.c",
        },
      },
      "end": "(\\))",
      "endCaptures": {
        "1": {
          "name": "punctuation.section.parens.end.bracket.round.conditional.switch.c",
        },
      },
      "patterns": [
        {
          "include": "#conditional_context",
        },
      ],
    },
    "static_assert": {
      "begin": "(static_assert|_Static_assert)\\s*(\\()",
      "beginCaptures": {
        "1": {
          "name": "keyword.other.static_assert.c",
        },
        "2": {
          "name": "punctuation.section.arguments.begin.bracket.round.c",
        },
      },
      "end": "(\\))",
      "endCaptures": {
        "1": {
          "name": "punctuation.section.arguments.end.bracket.round.c",
        },
      },
      "patterns": [
        {
          "name": "meta.static_assert.message.c",
          "begin": "(,)\\s*(?=(?:L|u8|u|U\\s*\\\")?)",
          "beginCaptures": {
            "1": {
              "name": "comma.c punctuation.separator.delimiter.c",
            },
          },
          "end": "(?=\\))",
          "patterns": [
            {
              "include": "#string_context",
            },
            {
              "include": "#string_context_c",
            },
          ],
        },
        {
          "include": "#function_call_context",
        },
      ],
    },
    "conditional_context": {
      "patterns": [
        {
          "include": "$base",
        },
        {
          "include": "#block_innards",
        },
      ],
    },
    "member_access": {
      "match": "((?:[a-zA-Z_]\\w*|(?<=\\]|\\)))\\s*)(?:((?:\\.\\*|\\.))|((?:->\\*|->)))((?:[a-zA-Z_]\\w*\\s*(?-mix:(?:(?:\\.\\*|\\.))|(?:(?:->\\*|->)))\\s*)*)\\s*(\\b(?!(?:void|char|short|int|signed|unsigned|long|float|double|bool|_Bool|_Complex|_Imaginary|u_char|u_short|u_int|u_long|ushort|uint|u_quad_t|quad_t|qaddr_t|caddr_t|daddr_t|div_t|dev_t|fixpt_t|blkcnt_t|blksize_t|gid_t|in_addr_t|in_port_t|ino_t|key_t|mode_t|nlink_t|id_t|pid_t|off_t|segsz_t|swblk_t|uid_t|id_t|clock_t|size_t|ssize_t|time_t|useconds_t|suseconds_t|pthread_attr_t|pthread_cond_t|pthread_condattr_t|pthread_mutex_t|pthread_mutexattr_t|pthread_once_t|pthread_rwlock_t|pthread_rwlockattr_t|pthread_t|pthread_key_t|int8_t|int16_t|int32_t|int64_t|uint8_t|uint16_t|uint32_t|uint64_t|int_least8_t|int_least16_t|int_least32_t|int_least64_t|uint_least8_t|uint_least16_t|uint_least32_t|uint_least64_t|int_fast8_t|int_fast16_t|int_fast32_t|int_fast64_t|uint_fast8_t|uint_fast16_t|uint_fast32_t|uint_fast64_t|intptr_t|uintptr_t|intmax_t|intmax_t|uintmax_t|uintmax_t|memory_order|atomic_bool|atomic_char|atomic_schar|atomic_uchar|atomic_short|atomic_ushort|atomic_int|atomic_uint|atomic_long|atomic_ulong|atomic_llong|atomic_ullong|atomic_char16_t|atomic_char32_t|atomic_wchar_t|atomic_int_least8_t|atomic_uint_least8_t|atomic_int_least16_t|atomic_uint_least16_t|atomic_int_least32_t|atomic_uint_least32_t|atomic_int_least64_t|atomic_uint_least64_t|atomic_int_fast8_t|atomic_uint_fast8_t|atomic_int_fast16_t|atomic_uint_fast16_t|atomic_int_fast32_t|atomic_uint_fast32_t|atomic_int_fast64_t|atomic_uint_fast64_t|atomic_intptr_t|atomic_uintptr_t|atomic_size_t|atomic_ptrdiff_t|atomic_intmax_t|atomic_uintmax_t))[a-zA-Z_]\\w*\\b(?!\\())",
      "captures": {
        "1": {
          "name": "variable.other.object.access.c",
        },
        "2": {
          "name": "punctuation.separator.dot-access.c",
        },
        "3": {
          "name": "punctuation.separator.pointer-access.c",
        },
        "4": {
          "patterns": [
            {
              "include": "#member_access",
            },
            {
              "include": "#method_access",
            },
            {
              "match": "((?:[a-zA-Z_]\\w*|(?<=\\]|\\)))\\s*)(?:((?:\\.\\*|\\.))|((?:->\\*|->)))",
              "captures": {
                "1": {
                  "name": "variable.other.object.access.c",
                },
                "2": {
                  "name": "punctuation.separator.dot-access.c",
                },
                "3": {
                  "name": "punctuation.separator.pointer-access.c",
                },
              },
            },
          ],
        },
        "5": {
          "name": "variable.other.member.c",
        },
      },
    },
    "method_access": {
      "contentName": "meta.function-call.member.c",
      "begin": "((?:[a-zA-Z_]\\w*|(?<=\\]|\\)))\\s*)(?:((?:\\.\\*|\\.))|((?:->\\*|->)))((?:[a-zA-Z_]\\w*\\s*(?-mix:(?:(?:\\.\\*|\\.))|(?:(?:->\\*|->)))\\s*)*)\\s*([a-zA-Z_]\\w*)(\\()",
      "beginCaptures": {
        "1": {
          "name": "variable.other.object.access.c",
        },
        "2": {
          "name": "punctuation.separator.dot-access.c",
        },
        "3": {
          "name": "punctuation.separator.pointer-access.c",
        },
        "4": {
          "patterns": [
            {
              "include": "#member_access",
            },
            {
              "include": "#method_access",
            },
            {
              "match": "((?:[a-zA-Z_]\\w*|(?<=\\]|\\)))\\s*)(?:((?:\\.\\*|\\.))|((?:->\\*|->)))",
              "captures": {
                "1": {
                  "name": "variable.other.object.access.c",
                },
                "2": {
                  "name": "punctuation.separator.dot-access.c",
                },
                "3": {
                  "name": "punctuation.separator.pointer-access.c",
                },
              },
            },
          ],
        },
        "5": {
          "name": "entity.name.function.member.c",
        },
        "6": {
          "name": "punctuation.section.arguments.begin.bracket.round.function.member.c",
        },
      },
      "end": "(\\))",
      "endCaptures": {
        "1": {
          "name": "punctuation.section.arguments.end.bracket.round.function.member.c",
        },
      },
      "patterns": [
        {
          "include": "#function-call-innards",
        },
      ],
    },
    "numbers": {
      "begin": "(?<!\\w)(?=\\d|\\.\\d)",
      "end": "(?!(?:['0-9a-zA-Z_\\.']|(?<=[eEpP])[+-]))",
      "patterns": [
        {
          "match": "(\\G0[xX])(?:([0-9a-fA-F](?:(?:[0-9a-fA-F]|((?<=[0-9a-fA-F])'(?=[0-9a-fA-F]))))*))?((?:(?<=[0-9a-fA-F])\\.|\\.(?=[0-9a-fA-F])))(?:([0-9a-fA-F](?:(?:[0-9a-fA-F]|((?<=[0-9a-fA-F])'(?=[0-9a-fA-F]))))*))?(?:((?<!')([pP])(\\+)?(\\-)?((?-mix:(?:[0-9](?:(?:[0-9]|(?:(?<=[0-9a-fA-F])'(?=[0-9a-fA-F]))))*)))))?(?:([lLfF](?!\\w)))?(?!(?:['0-9a-zA-Z_\\.']|(?<=[eEpP])[+-]))",
          "captures": {
            "1": {
              "name": "keyword.other.unit.hexadecimal.c",
            },
            "2": {
              "name": "constant.numeric.hexadecimal.c",
              "patterns": [
                {
                  "match": "(?<=[0-9a-fA-F])'(?=[0-9a-fA-F])",
                  "name": "punctuation.separator.constant.numeric",
                },
              ],
            },
            "3": {
              "name": "punctuation.separator.constant.numeric",
            },
            "4": {
              "name": "constant.numeric.hexadecimal.c",
            },
            "5": {
              "name": "constant.numeric.hexadecimal.c",
              "patterns": [
                {
                  "match": "(?<=[0-9a-fA-F])'(?=[0-9a-fA-F])",
                  "name": "punctuation.separator.constant.numeric",
                },
              ],
            },
            "6": {
              "name": "punctuation.separator.constant.numeric",
            },
            "8": {
              "name": "keyword.other.unit.exponent.hexadecimal.c",
            },
            "9": {
              "name": "keyword.operator.plus.exponent.hexadecimal.c",
            },
            "10": {
              "name": "keyword.operator.minus.exponent.hexadecimal.c",
            },
            "11": {
              "name": "constant.numeric.exponent.hexadecimal.c",
              "patterns": [
                {
                  "match": "(?<=[0-9a-fA-F])'(?=[0-9a-fA-F])",
                  "name": "punctuation.separator.constant.numeric",
                },
              ],
            },
            "12": {
              "name": "keyword.other.unit.suffix.floating-point.c",
            },
          },
        },
        {
          "match": "(\\G(?=[0-9.])(?!0[xXbB]))(?:([0-9](?:(?:[0-9]|((?<=[0-9a-fA-F])'(?=[0-9a-fA-F]))))*))?((?:(?<=[0-9])\\.|\\.(?=[0-9])))(?:([0-9](?:(?:[0-9]|((?<=[0-9a-fA-F])'(?=[0-9a-fA-F]))))*))?(?:((?<!')([eE])(\\+)?(\\-)?((?-mix:(?:[0-9](?:(?:[0-9]|(?:(?<=[0-9a-fA-F])'(?=[0-9a-fA-F]))))*)))))?(?:([lLfF](?!\\w)))?(?!(?:['0-9a-zA-Z_\\.']|(?<=[eEpP])[+-]))",
          "captures": {
            "2": {
              "name": "constant.numeric.decimal.c",
              "patterns": [
                {
                  "match": "(?<=[0-9a-fA-F])'(?=[0-9a-fA-F])",
                  "name": "punctuation.separator.constant.numeric",
                },
              ],
            },
            "3": {
              "name": "punctuation.separator.constant.numeric",
            },
            "4": {
              "name": "constant.numeric.decimal.point.c",
            },
            "5": {
              "name": "constant.numeric.decimal.c",
              "patterns": [
                {
                  "match": "(?<=[0-9a-fA-F])'(?=[0-9a-fA-F])",
                  "name": "punctuation.separator.constant.numeric",
                },
              ],
            },
            "6": {
              "name": "punctuation.separator.constant.numeric",
            },
            "8": {
              "name": "keyword.other.unit.exponent.decimal.c",
            },
            "9": {
              "name": "keyword.operator.plus.exponent.decimal.c",
            },
            "10": {
              "name": "keyword.operator.minus.exponent.decimal.c",
            },
            "11": {
              "name": "constant.numeric.exponent.decimal.c",
              "patterns": [
                {
                  "match": "(?<=[0-9a-fA-F])'(?=[0-9a-fA-F])",
                  "name": "punctuation.separator.constant.numeric",
                },
              ],
            },
            "12": {
              "name": "keyword.other.unit.suffix.floating-point.c",
            },
          },
        },
        {
          "match": "(\\G0[bB])([01](?:(?:[01]|((?<=[0-9a-fA-F])'(?=[0-9a-fA-F]))))*)(?:((?:(?:(?:(?:(?:[uU]|[uU]ll?)|[uU]LL?)|ll?[uU]?)|LL?[uU]?)|[fF])(?!\\w)))?(?!(?:['0-9a-zA-Z_\\.']|(?<=[eEpP])[+-]))",
          "captures": {
            "1": {
              "name": "keyword.other.unit.binary.c",
            },
            "2": {
              "name": "constant.numeric.binary.c",
              "patterns": [
                {
                  "match": "(?<=[0-9a-fA-F])'(?=[0-9a-fA-F])",
                  "name": "punctuation.separator.constant.numeric",
                },
              ],
            },
            "3": {
              "name": "punctuation.separator.constant.numeric",
            },
            "4": {
              "name": "keyword.other.unit.suffix.integer.c",
            },
          },
        },
        {
          "match": "(\\G0)((?:(?:[0-7]|((?<=[0-9a-fA-F])'(?=[0-9a-fA-F]))))+)(?:((?:(?:(?:(?:(?:[uU]|[uU]ll?)|[uU]LL?)|ll?[uU]?)|LL?[uU]?)|[fF])(?!\\w)))?(?!(?:['0-9a-zA-Z_\\.']|(?<=[eEpP])[+-]))",
          "captures": {
            "1": {
              "name": "keyword.other.unit.octal.c",
            },
            "2": {
              "name": "constant.numeric.octal.c",
              "patterns": [
                {
                  "match": "(?<=[0-9a-fA-F])'(?=[0-9a-fA-F])",
                  "name": "punctuation.separator.constant.numeric",
                },
              ],
            },
            "3": {
              "name": "punctuation.separator.constant.numeric",
            },
            "4": {
              "name": "keyword.other.unit.suffix.integer.c",
            },
          },
        },
        {
          "match": "(\\G0[xX])([0-9a-fA-F](?:(?:[0-9a-fA-F]|((?<=[0-9a-fA-F])'(?=[0-9a-fA-F]))))*)(?:((?<!')([pP])(\\+)?(\\-)?((?-mix:(?:[0-9](?:(?:[0-9]|(?:(?<=[0-9a-fA-F])'(?=[0-9a-fA-F]))))*)))))?(?:((?:(?:(?:(?:(?:[uU]|[uU]ll?)|[uU]LL?)|ll?[uU]?)|LL?[uU]?)|[fF])(?!\\w)))?(?!(?:['0-9a-zA-Z_\\.']|(?<=[eEpP])[+-]))",
          "captures": {
            "1": {
              "name": "keyword.other.unit.hexadecimal.c",
            },
            "2": {
              "name": "constant.numeric.hexadecimal.c",
              "patterns": [
                {
                  "match": "(?<=[0-9a-fA-F])'(?=[0-9a-fA-F])",
                  "name": "punctuation.separator.constant.numeric",
                },
              ],
            },
            "3": {
              "name": "punctuation.separator.constant.numeric",
            },
            "5": {
              "name": "keyword.other.unit.exponent.hexadecimal.c",
            },
            "6": {
              "name": "keyword.operator.plus.exponent.hexadecimal.c",
            },
            "7": {
              "name": "keyword.operator.minus.exponent.hexadecimal.c",
            },
            "8": {
              "name": "constant.numeric.exponent.hexadecimal.c",
              "patterns": [
                {
                  "match": "(?<=[0-9a-fA-F])'(?=[0-9a-fA-F])",
                  "name": "punctuation.separator.constant.numeric",
                },
              ],
            },
            "9": {
              "name": "keyword.other.unit.suffix.integer.c",
            },
          },
        },
        {
          "match": "(\\G(?=[0-9.])(?!0[xXbB]))([0-9](?:(?:[0-9]|((?<=[0-9a-fA-F])'(?=[0-9a-fA-F]))))*)(?:((?<!')([eE])(\\+)?(\\-)?((?-mix:(?:[0-9](?:(?:[0-9]|(?:(?<=[0-9a-fA-F])'(?=[0-9a-fA-F]))))*)))))?(?:((?:(?:(?:(?:(?:[uU]|[uU]ll?)|[uU]LL?)|ll?[uU]?)|LL?[uU]?)|[fF])(?!\\w)))?(?!(?:['0-9a-zA-Z_\\.']|(?<=[eEpP])[+-]))",
          "captures": {
            "2": {
              "name": "constant.numeric.decimal.c",
              "patterns": [
                {
                  "match": "(?<=[0-9a-fA-F])'(?=[0-9a-fA-F])",
                  "name": "punctuation.separator.constant.numeric",
                },
              ],
            },
            "3": {
              "name": "punctuation.separator.constant.numeric",
            },
            "5": {
              "name": "keyword.other.unit.exponent.decimal.c",
            },
            "6": {
              "name": "keyword.operator.plus.exponent.decimal.c",
            },
            "7": {
              "name": "keyword.operator.minus.exponent.decimal.c",
            },
            "8": {
              "name": "constant.numeric.exponent.decimal.c",
              "patterns": [
                {
                  "match": "(?<=[0-9a-fA-F])'(?=[0-9a-fA-F])",
                  "name": "punctuation.separator.constant.numeric",
                },
              ],
            },
            "9": {
              "name": "keyword.other.unit.suffix.integer.c",
            },
          },
        },
        {
          "match": "(?:(?:['0-9a-zA-Z_\\.']|(?<=[eEpP])[+-]))+",
          "name": "invalid.illegal.constant.numeric",
        },
      ],
    },
  },
}
objective_cpp_grammar[:"cpp_lang"] = {
  "patterns": [
    {
      "include": "#struct_declare",
    },
    {
      "include": "#special_block_context",
    },
    {
      "include": "#macro_argument",
    },
    {
      "include": "#string_context",
    },
    {
      "include": "#functional_specifiers_pre_parameters",
    },
    {
      "include": "#qualifiers_and_specifiers_post_parameters",
    },
    {
      "include": "#storage_specifiers",
    },
    {
      "include": "#access_control_keywords",
    },
    {
      "include": "#exception_keywords",
    },
    {
      "include": "#static_assert",
    },
    {
      "include": "#other_keywords",
    },
    {
      "include": "#memory_operators",
    },
    {
      "include": "#the_this_keyword",
    },
    {
      "include": "#language_constants",
    },
    {
      "include": "#template_isolated_definition",
    },
    {
      "include": "#template_definition",
    },
    {
      "include": "#scope_resolution",
    },
    {
      "include": "#misc_storage_modifiers_1",
    },
    {
      "include": "#destructor",
    },
    {
      "include": "#destructor_prototype",
    },
    {
      "include": "#lambdas",
    },
    {
      "include": "#preprocessor_context",
    },
    {
      "include": "#comments_context",
    },
    {
      "include": "#switch_statement",
    },
    {
      "include": "#control_flow_keywords",
    },
    {
      "include": "#storage_types",
    },
    {
      "include": "#assembly",
    },
    {
      "include": "#misc_storage_modifiers_2",
    },
    {
      "include": "#operator_overload",
    },
    {
      "include": "#number_literal",
    },
    {
      "include": "#string_context_c",
    },
    {
      "include": "#meta_preprocessor_macro",
    },
    {
      "include": "#meta_preprocessor_diagnostic",
    },
    {
      "include": "#meta_preprocessor_include",
    },
    {
      "include": "#pragma_mark",
    },
    {
      "include": "#meta_preprocessor_line",
    },
    {
      "include": "#meta_preprocessor_undef",
    },
    {
      "include": "#meta_preprocessor_pragma",
    },
    {
      "include": "#operators",
    },
    {
      "include": "#block",
    },
    {
      "include": "#parentheses",
    },
    {
      "include": "#function_definition",
    },
    {
      "include": "#line_continuation_character",
    },
    {
      "include": "#square_brackets",
    },
    {
      "include": "#empty_square_brackets",
    },
    {
      "include": "#semicolon",
    },
    {
      "include": "#comma",
    },
  ],
  "repository": {
    "sizeof_operator": {
      "contentName": "meta.arguments.operator.sizeof",
      "begin": "((?<!\\w)sizeof(?!\\w))(\\()",
      "beginCaptures": {
        "1": {
          "name": "keyword.operator.functionlike.cpp keyword.operator.sizeof.cpp",
        },
        "2": {
          "name": "punctuation.section.arguments.begin.bracket.round.operator.sizeof.cpp",
        },
      },
      "end": "(\\))",
      "endCaptures": {
        "1": {
          "name": "punctuation.section.arguments.end.bracket.round.operator.sizeof.cpp",
        },
      },
      "patterns": [
        {
          "include": "#evaluation_context",
        },
      ],
    },
    "alignof_operator": {
      "contentName": "meta.arguments.operator.alignof",
      "begin": "((?<!\\w)alignof(?!\\w))(\\()",
      "beginCaptures": {
        "1": {
          "name": "keyword.operator.functionlike.cpp keyword.operator.alignof.cpp",
        },
        "2": {
          "name": "punctuation.section.arguments.begin.bracket.round.operator.alignof.cpp",
        },
      },
      "end": "(\\))",
      "endCaptures": {
        "1": {
          "name": "punctuation.section.arguments.end.bracket.round.operator.alignof.cpp",
        },
      },
      "patterns": [
        {
          "include": "#evaluation_context",
        },
      ],
    },
    "alignas_operator": {
      "contentName": "meta.arguments.operator.alignas",
      "begin": "((?<!\\w)alignas(?!\\w))(\\()",
      "beginCaptures": {
        "1": {
          "name": "keyword.operator.functionlike.cpp keyword.operator.alignas.cpp",
        },
        "2": {
          "name": "punctuation.section.arguments.begin.bracket.round.operator.alignas.cpp",
        },
      },
      "end": "(\\))",
      "endCaptures": {
        "1": {
          "name": "punctuation.section.arguments.end.bracket.round.operator.alignas.cpp",
        },
      },
      "patterns": [
        {
          "include": "#evaluation_context",
        },
      ],
    },
    "typeid_operator": {
      "contentName": "meta.arguments.operator.typeid",
      "begin": "((?<!\\w)typeid(?!\\w))(\\()",
      "beginCaptures": {
        "1": {
          "name": "keyword.operator.functionlike.cpp keyword.operator.typeid.cpp",
        },
        "2": {
          "name": "punctuation.section.arguments.begin.bracket.round.operator.typeid.cpp",
        },
      },
      "end": "(\\))",
      "endCaptures": {
        "1": {
          "name": "punctuation.section.arguments.end.bracket.round.operator.typeid.cpp",
        },
      },
      "patterns": [
        {
          "include": "#evaluation_context",
        },
      ],
    },
    "decltype_specifier": {
      "contentName": "meta.arguments.decltype",
      "begin": "((?<!\\w)decltype(?!\\w))(\\()",
      "beginCaptures": {
        "1": {
          "name": "keyword.operator.functionlike.cpp keyword.other.decltype.cpp storage.type.decltype.cpp",
        },
        "2": {
          "name": "punctuation.section.arguments.begin.bracket.round.decltype.cpp",
        },
      },
      "end": "(\\))",
      "endCaptures": {
        "1": {
          "name": "punctuation.section.arguments.end.bracket.round.decltype.cpp",
        },
      },
      "patterns": [
        {
          "include": "#evaluation_context",
        },
      ],
    },
    "semicolon": {
      "match": ";",
      "name": "punctuation.terminator.statement.cpp",
    },
    "comma": {
      "match": ",",
      "name": "comma.cpp punctuation.separator.delimiter.cpp",
    },
    "assignment_operator": {
      "match": "\\=",
      "name": "keyword.operator.assignment.cpp",
    },
    "preprocessor_context": {
      "patterns": [
        {
          "include": "#preprocessor_rule_enabled",
        },
        {
          "include": "#preprocessor_rule_disabled",
        },
        {
          "include": "#preprocessor_rule_conditional",
        },
        {
          "include": "#hacky_fix_for_stray_directive",
        },
      ],
    },
    "storage_types": {
      "patterns": [
        {
          "include": "#primitive_types",
        },
        {
          "include": "#non_primitive_types",
        },
        {
          "include": "#pthread_types",
        },
        {
          "include": "#posix_reserved_types",
        },
      ],
    },
    "evaluation_context": {
      "patterns": [
        {
          "include": "$base",
        },
      ],
    },
    "conditional_context": {
      "patterns": [
        {
          "include": "$base",
        },
      ],
    },
    "template_definition_context": {
      "patterns": [
        {
          "include": "#scope_resolution",
        },
        {
          "include": "#template_definition_argument",
        },
        {
          "include": "#template_argument_defaulted",
        },
        {
          "include": "#template_call_innards",
        },
        {
          "include": "#evaluation_context",
        },
      ],
    },
    "template_call_context": {
      "patterns": [
        {
          "include": "#storage_types",
        },
        {
          "include": "#language_constants",
        },
        {
          "include": "#scope_resolution",
        },
        {
          "include": "#user_defined_template_type",
        },
        {
          "include": "#operators",
        },
        {
          "include": "#number_literal",
        },
        {
          "include": "#string_context",
        },
        {
          "include": "#comma_in_template_argument",
        },
      ],
    },
    "attributes_context": {
      "patterns": [
        {
          "include": "#cpp_attributes",
        },
        {
          "include": "#gcc_attributes",
        },
        {
          "include": "#ms_attributes",
        },
        {
          "include": "#alignas_attribute",
        },
      ],
    },
    "number_literal": {
      "begin": "(?<!\\w)(?=\\d|\\.\\d)",
      "end": "(?!(?:['0-9a-zA-Z_\\.']|(?<=[eEpP])[+-]))",
      "patterns": [
        {
          "match": "(\\G0[xX])(?:([0-9a-fA-F](?:(?:[0-9a-fA-F]|((?<=[0-9a-fA-F])'(?=[0-9a-fA-F]))))*))?((?:(?<=[0-9a-fA-F])\\.|\\.(?=[0-9a-fA-F])))(?:([0-9a-fA-F](?:(?:[0-9a-fA-F]|((?<=[0-9a-fA-F])'(?=[0-9a-fA-F]))))*))?(?:((?<!')([pP])(\\+)?(\\-)?((?-mix:(?:[0-9](?:(?:[0-9]|(?:(?<=[0-9a-fA-F])'(?=[0-9a-fA-F]))))*)))))?(?:([lLfF](?!\\w)))?((?:\\w(?<![0-9a-fA-FpP])\\w*)?(?!(?:['0-9a-zA-Z_\\.']|(?<=[eEpP])[+-])))",
          "captures": {
            "1": {
              "name": "keyword.other.unit.hexadecimal.cpp",
            },
            "2": {
              "name": "constant.numeric.hexadecimal.cpp",
              "patterns": [
                {
                  "match": "(?<=[0-9a-fA-F])'(?=[0-9a-fA-F])",
                  "name": "punctuation.separator.constant.numeric.cpp",
                },
              ],
            },
            "3": {
              "name": "punctuation.separator.constant.numeric.cpp",
            },
            "4": {
              "name": "constant.numeric.hexadecimal.cpp",
            },
            "5": {
              "name": "constant.numeric.hexadecimal.cpp",
              "patterns": [
                {
                  "match": "(?<=[0-9a-fA-F])'(?=[0-9a-fA-F])",
                  "name": "punctuation.separator.constant.numeric.cpp",
                },
              ],
            },
            "6": {
              "name": "punctuation.separator.constant.numeric.cpp",
            },
            "8": {
              "name": "keyword.other.unit.exponent.hexadecimal.cpp",
            },
            "9": {
              "name": "keyword.operator.plus.exponent.hexadecimal.cpp",
            },
            "10": {
              "name": "keyword.operator.minus.exponent.hexadecimal.cpp",
            },
            "11": {
              "name": "constant.numeric.exponent.hexadecimal.cpp",
              "patterns": [
                {
                  "match": "(?<=[0-9a-fA-F])'(?=[0-9a-fA-F])",
                  "name": "punctuation.separator.constant.numeric.cpp",
                },
              ],
            },
            "12": {
              "name": "keyword.other.unit.suffix.floating-point.cpp",
            },
            "13": {
              "name": "keyword.other.unit.user-defined.cpp",
            },
          },
        },
        {
          "match": "(\\G(?=[0-9.])(?!0[xXbB]))(?:([0-9](?:(?:[0-9]|((?<=[0-9a-fA-F])'(?=[0-9a-fA-F]))))*))?((?:(?<=[0-9])\\.|\\.(?=[0-9])))(?:([0-9](?:(?:[0-9]|((?<=[0-9a-fA-F])'(?=[0-9a-fA-F]))))*))?(?:((?<!')([eE])(\\+)?(\\-)?((?-mix:(?:[0-9](?:(?:[0-9]|(?:(?<=[0-9a-fA-F])'(?=[0-9a-fA-F]))))*)))))?(?:([lLfF](?!\\w)))?((?:\\w(?<![0-9eE])\\w*)?(?!(?:['0-9a-zA-Z_\\.']|(?<=[eEpP])[+-])))",
          "captures": {
            "2": {
              "name": "constant.numeric.decimal.cpp",
              "patterns": [
                {
                  "match": "(?<=[0-9a-fA-F])'(?=[0-9a-fA-F])",
                  "name": "punctuation.separator.constant.numeric.cpp",
                },
              ],
            },
            "3": {
              "name": "punctuation.separator.constant.numeric.cpp",
            },
            "4": {
              "name": "constant.numeric.decimal.point.cpp",
            },
            "5": {
              "name": "constant.numeric.decimal.cpp",
              "patterns": [
                {
                  "match": "(?<=[0-9a-fA-F])'(?=[0-9a-fA-F])",
                  "name": "punctuation.separator.constant.numeric.cpp",
                },
              ],
            },
            "6": {
              "name": "punctuation.separator.constant.numeric.cpp",
            },
            "8": {
              "name": "keyword.other.unit.exponent.decimal.cpp",
            },
            "9": {
              "name": "keyword.operator.plus.exponent.decimal.cpp",
            },
            "10": {
              "name": "keyword.operator.minus.exponent.decimal.cpp",
            },
            "11": {
              "name": "constant.numeric.exponent.decimal.cpp",
              "patterns": [
                {
                  "match": "(?<=[0-9a-fA-F])'(?=[0-9a-fA-F])",
                  "name": "punctuation.separator.constant.numeric.cpp",
                },
              ],
            },
            "12": {
              "name": "keyword.other.unit.suffix.floating-point.cpp",
            },
            "13": {
              "name": "keyword.other.unit.user-defined.cpp",
            },
          },
        },
        {
          "match": "(\\G0[bB])([01](?:(?:[01]|((?<=[0-9a-fA-F])'(?=[0-9a-fA-F]))))*)(?:((?:(?:(?:(?:(?:[uU]|[uU]ll?)|[uU]LL?)|ll?[uU]?)|LL?[uU]?)|[fF])(?!\\w)))?((?:\\w(?<![0-9])\\w*)?(?!(?:['0-9a-zA-Z_\\.']|(?<=[eEpP])[+-])))",
          "captures": {
            "1": {
              "name": "keyword.other.unit.binary.cpp",
            },
            "2": {
              "name": "constant.numeric.binary.cpp",
              "patterns": [
                {
                  "match": "(?<=[0-9a-fA-F])'(?=[0-9a-fA-F])",
                  "name": "punctuation.separator.constant.numeric.cpp",
                },
              ],
            },
            "3": {
              "name": "punctuation.separator.constant.numeric.cpp",
            },
            "4": {
              "name": "keyword.other.unit.suffix.integer.cpp",
            },
            "5": {
              "name": "keyword.other.unit.user-defined.cpp",
            },
          },
        },
        {
          "match": "(\\G0)((?:(?:[0-7]|((?<=[0-9a-fA-F])'(?=[0-9a-fA-F]))))+)(?:((?:(?:(?:(?:(?:[uU]|[uU]ll?)|[uU]LL?)|ll?[uU]?)|LL?[uU]?)|[fF])(?!\\w)))?((?:\\w(?<![0-9])\\w*)?(?!(?:['0-9a-zA-Z_\\.']|(?<=[eEpP])[+-])))",
          "captures": {
            "1": {
              "name": "keyword.other.unit.octal.cpp",
            },
            "2": {
              "name": "constant.numeric.octal.cpp",
              "patterns": [
                {
                  "match": "(?<=[0-9a-fA-F])'(?=[0-9a-fA-F])",
                  "name": "punctuation.separator.constant.numeric.cpp",
                },
              ],
            },
            "3": {
              "name": "punctuation.separator.constant.numeric.cpp",
            },
            "4": {
              "name": "keyword.other.unit.suffix.integer.cpp",
            },
            "5": {
              "name": "keyword.other.unit.user-defined.cpp",
            },
          },
        },
        {
          "match": "(\\G0[xX])([0-9a-fA-F](?:(?:[0-9a-fA-F]|((?<=[0-9a-fA-F])'(?=[0-9a-fA-F]))))*)(?:((?<!')([pP])(\\+)?(\\-)?((?-mix:(?:[0-9](?:(?:[0-9]|(?:(?<=[0-9a-fA-F])'(?=[0-9a-fA-F]))))*)))))?(?:((?:(?:(?:(?:(?:[uU]|[uU]ll?)|[uU]LL?)|ll?[uU]?)|LL?[uU]?)|[fF])(?!\\w)))?((?:\\w(?<![0-9a-fA-FpP])\\w*)?(?!(?:['0-9a-zA-Z_\\.']|(?<=[eEpP])[+-])))",
          "captures": {
            "1": {
              "name": "keyword.other.unit.hexadecimal.cpp",
            },
            "2": {
              "name": "constant.numeric.hexadecimal.cpp",
              "patterns": [
                {
                  "match": "(?<=[0-9a-fA-F])'(?=[0-9a-fA-F])",
                  "name": "punctuation.separator.constant.numeric.cpp",
                },
              ],
            },
            "3": {
              "name": "punctuation.separator.constant.numeric.cpp",
            },
            "5": {
              "name": "keyword.other.unit.exponent.hexadecimal.cpp",
            },
            "6": {
              "name": "keyword.operator.plus.exponent.hexadecimal.cpp",
            },
            "7": {
              "name": "keyword.operator.minus.exponent.hexadecimal.cpp",
            },
            "8": {
              "name": "constant.numeric.exponent.hexadecimal.cpp",
              "patterns": [
                {
                  "match": "(?<=[0-9a-fA-F])'(?=[0-9a-fA-F])",
                  "name": "punctuation.separator.constant.numeric.cpp",
                },
              ],
            },
            "9": {
              "name": "keyword.other.unit.suffix.integer.cpp",
            },
            "10": {
              "name": "keyword.other.unit.user-defined.cpp",
            },
          },
        },
        {
          "match": "(\\G(?=[0-9.])(?!0[xXbB]))([0-9](?:(?:[0-9]|((?<=[0-9a-fA-F])'(?=[0-9a-fA-F]))))*)(?:((?<!')([eE])(\\+)?(\\-)?((?-mix:(?:[0-9](?:(?:[0-9]|(?:(?<=[0-9a-fA-F])'(?=[0-9a-fA-F]))))*)))))?(?:((?:(?:(?:(?:(?:[uU]|[uU]ll?)|[uU]LL?)|ll?[uU]?)|LL?[uU]?)|[fF])(?!\\w)))?((?:\\w(?<![0-9eE])\\w*)?(?!(?:['0-9a-zA-Z_\\.']|(?<=[eEpP])[+-])))",
          "captures": {
            "2": {
              "name": "constant.numeric.decimal.cpp",
              "patterns": [
                {
                  "match": "(?<=[0-9a-fA-F])'(?=[0-9a-fA-F])",
                  "name": "punctuation.separator.constant.numeric.cpp",
                },
              ],
            },
            "3": {
              "name": "punctuation.separator.constant.numeric.cpp",
            },
            "5": {
              "name": "keyword.other.unit.exponent.decimal.cpp",
            },
            "6": {
              "name": "keyword.operator.plus.exponent.decimal.cpp",
            },
            "7": {
              "name": "keyword.operator.minus.exponent.decimal.cpp",
            },
            "8": {
              "name": "constant.numeric.exponent.decimal.cpp",
              "patterns": [
                {
                  "match": "(?<=[0-9a-fA-F])'(?=[0-9a-fA-F])",
                  "name": "punctuation.separator.constant.numeric.cpp",
                },
              ],
            },
            "9": {
              "name": "keyword.other.unit.suffix.integer.cpp",
            },
            "10": {
              "name": "keyword.other.unit.user-defined.cpp",
            },
          },
        },
        {
          "match": "(?:(?:['0-9a-zA-Z_\\.']|(?<=[eEpP])[+-]))+",
          "name": "invalid.illegal.constant.numeric.cpp",
        },
      ],
    },
    "language_constants": {
      "match": "(?<!\\w)(?:NULL|true|false|nullptr)(?!\\w)",
      "name": "constant.language.$0.cpp",
    },
    "primitive_types": {
      "match": "(?<!\\w)(?:auto|void|char|short|int|signed|unsigned|long|float|double|bool|wchar_t)(?!\\w)",
      "name": "storage.type.primitive.cpp",
    },
    "non_primitive_types": {
      "match": "(?<!\\w)(?:u_char|u_short|u_int|u_long|ushort|uint|u_quad_t|quad_t|qaddr_t|caddr_t|daddr_t|div_t|dev_t|fixpt_t|blkcnt_t|blksize_t|gid_t|in_addr_t|in_port_t|ino_t|key_t|mode_t|nlink_t|id_t|pid_t|off_t|segsz_t|swblk_t|uid_t|id_t|clock_t|size_t|ssize_t|time_t|useconds_t|suseconds_t|int8_t|int16_t|int32_t|int64_t|uint8_t|uint16_t|uint32_t|uint64_t|int_least8_t|int_least16_t|int_least32_t|int_least64_t|uint_least8_t|uint_least16_t|uint_least32_t|uint_least64_t|int_fast8_t|int_fast16_t|int_fast32_t|int_fast64_t|uint_fast8_t|uint_fast16_t|uint_fast32_t|uint_fast64_t|intptr_t|uintptr_t|intmax_t|intmax_t|uintmax_t|uintmax_t)(?!\\w)",
      "name": "storage.type.cpp",
    },
    "functional_specifiers_pre_parameters": {
      "match": "(?<!\\w)(?:inline|constexpr|mutable|friend|explicit|virtual)(?!\\w)",
      "name": "storage.modifier.specificer.functional.pre-parameters.$0.cpp",
    },
    "qualifiers_and_specifiers_post_parameters": {
      "match": "(?<!\\w)(?:final|override|volatile|const|noexcept)(?!\\w)(?=\\s*(?:(?:\\{|;)|[\\n\\r]))",
      "name": "storage.modifier.specifier.functional.post-parameters.$0.cpp",
    },
    "storage_specifiers": {
      "match": "(?<!\\w)(?:const|static|volatile|register|restrict|extern)(?!\\w)",
      "name": "storage.modifier.specifier.$0.cpp",
    },
    "access_control_keywords": {
      "match": "(?<!\\w)((?:private|protected|public))\\s*(:)",
      "captures": {
        "2": {
          "name": "colon.cpp",
        },
      },
      "name": "storage.type.modifier.access.control.$1.cpp",
    },
    "exception_keywords": {
      "match": "(?<!\\w)(?:throw|try|catch)(?!\\w)",
      "name": "keyword.control.exception.$0.cpp",
    },
    "other_keywords": {
      "match": "(?<!\\w)(typedef)(?!\\w)",
      "name": "keyword.other.$0.cpp",
    },
    "the_this_keyword": {
      "match": "(?<!\\w)this(?!\\w)",
      "name": "variable.language.this.cpp",
    },
    "memory_operators": {
      "match": "(?<!\\w)(?:(?:(delete)\\s*(\\[\\])|(delete))|(new))(?!\\w)",
      "captures": {
        "1": {
          "name": "keyword.operator.delete.array.cpp",
        },
        "2": {
          "name": "keyword.operator.delete.array.bracket.cpp",
        },
        "3": {
          "name": "keyword.operator.delete.cpp",
        },
        "4": {
          "name": "keyword.operator.new.cpp",
        },
      },
      "name": "keyword.operator.wordlike.cpp memory.cpp",
    },
    "control_flow_keywords": {
      "match": "(?<!\\w)(?:throw|while|for|do|if|else|goto|switch|try|catch|return|break|case|continue|default)(?!\\w)",
      "name": "keyword.control.$0.cpp",
    },
    "default_statement": {
      "name": "meta.conditional.case.cpp",
      "begin": "((?<!\\w)default(?!\\w))",
      "beginCaptures": {
        "1": {
          "name": "keyword.control.default.cpp",
        },
      },
      "end": "(:)",
      "endCaptures": {
        "1": {
          "name": "colon.cpp punctuation.separator.case.default.cpp",
        },
      },
      "patterns": [
        {
          "include": "#conditional_context",
        },
      ],
    },
    "case_statement": {
      "name": "meta.conditional.case.cpp",
      "begin": "((?<!\\w)case(?!\\w))",
      "beginCaptures": {
        "1": {
          "name": "keyword.control.case.cpp",
        },
      },
      "end": "(:)",
      "endCaptures": {
        "1": {
          "name": "colon.cpp punctuation.separator.case.cpp",
        },
      },
      "patterns": [
        {
          "include": "#conditional_context",
        },
      ],
    },
    "switch_conditional_parentheses": {
      "name": "meta.conditional.switch.cpp",
      "begin": "(\\()",
      "beginCaptures": {
        "1": {
          "name": "punctuation.section.parens.begin.bracket.round.conditional.switch.cpp",
        },
      },
      "end": "(\\))",
      "endCaptures": {
        "1": {
          "name": "punctuation.section.parens.end.bracket.round.conditional.switch.cpp",
        },
      },
      "patterns": [
        {
          "include": "#conditional_context",
        },
      ],
    },
    "switch_statement": {
      "name": "meta.block.switch.cpp",
      "begin": "(((?<!\\w)switch(?!\\w)))",
      "beginCaptures": {
        "1": {
          "name": "meta.head.switch.cpp",
        },
        "2": {
          "name": "keyword.control.switch.cpp",
        },
      },
      "end": "(?:(?<=\\})|(?=[;>\\[\\]=]))",
      "patterns": [
        {
          "name": "meta.head.switch.cpp",
          "begin": "\\G ?",
          "end": "((?:\\{|(?=;)))",
          "endCaptures": {
            "1": {
              "name": "punctuation.section.block.begin.bracket.curly.switch.cpp",
            },
          },
          "patterns": [
            {
              "include": "#switch_conditional_parentheses",
            },
            {
              "include": "$base",
            },
          ],
        },
        {
          "name": "meta.body.switch.cpp",
          "begin": "(?<=\\{)",
          "end": "(\\})",
          "endCaptures": {
            "1": {
              "name": "punctuation.section.block.end.bracket.curly.switch.cpp",
            },
          },
          "patterns": [
            {
              "include": "#default_statement",
            },
            {
              "include": "#case_statement",
            },
            {
              "include": "$base",
            },
            {
              "include": "#block_innards",
            },
          ],
        },
        {
          "name": "meta.tail.switch.cpp",
          "begin": "(?<=})[\\s\\n]*",
          "end": "[\\s\\n]*(?=;)",
          "patterns": [
            {
              "include": "$base",
            },
          ],
        },
      ],
    },
    "cpp_attributes": {
      "name": "support.other.attribute.cpp",
      "begin": "(\\[\\[)",
      "beginCaptures": {
        "1": {
          "name": "punctuation.section.attribute.begin.cpp",
        },
      },
      "end": "(\\]\\])",
      "endCaptures": {
        "1": {
          "name": "punctuation.section.attribute.end.cpp",
        },
      },
      "patterns": [
        {
          "include": "#attributes_context",
        },
        {
          "begin": "\\(",
          "end": "\\)",
          "patterns": [
            {
              "include": "#attributes_context",
            },
            {
              "include": "#string_context_c",
            },
          ],
        },
        {
          "match": "(using)\\s+((?<!\\w)(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U000[0-9a-fA-F]))(?:(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U000[0-9a-fA-F])))*(?!\\w))",
          "captures": {
            "1": {
              "name": "keyword.other.using.directive.cpp",
            },
            "2": {
              "name": "entity.name.type.namespace.cpp",
            },
          },
        },
        {
          "match": ",",
          "name": "punctuation.separator.attribute.cpp",
        },
        {
          "match": ":",
          "name": "punctuation.accessor.attribute.cpp",
        },
        {
          "match": "(?<!\\w)(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U000[0-9a-fA-F]))(?:(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U000[0-9a-fA-F])))*(?!\\w)(?=::)",
          "name": "entity.name.type.namespace.cpp",
        },
        {
          "match": "(?<!\\w)(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U000[0-9a-fA-F]))(?:(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U000[0-9a-fA-F])))*(?!\\w)",
          "name": "entity.other.attribute.$0.cpp",
        },
        {
          "include": "#number_literal",
        },
      ],
    },
    "gcc_attributes": {
      "name": "support.other.attribute.cpp",
      "begin": "(__attribute(?:__)?\\(\\()",
      "beginCaptures": {
        "1": {
          "name": "punctuation.section.attribute.begin.cpp",
        },
      },
      "end": "(\\)\\))",
      "endCaptures": {
        "1": {
          "name": "punctuation.section.attribute.end.cpp",
        },
      },
      "patterns": [
        {
          "include": "#attributes_context",
        },
        {
          "begin": "\\(",
          "end": "\\)",
          "patterns": [
            {
              "include": "#attributes_context",
            },
            {
              "include": "#string_context_c",
            },
          ],
        },
        {
          "match": "(using)\\s+((?<!\\w)(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U000[0-9a-fA-F]))(?:(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U000[0-9a-fA-F])))*(?!\\w))",
          "captures": {
            "1": {
              "name": "keyword.other.using.directive.cpp",
            },
            "2": {
              "name": "entity.name.type.namespace.cpp",
            },
          },
        },
        {
          "match": ",",
          "name": "punctuation.separator.attribute.cpp",
        },
        {
          "match": ":",
          "name": "punctuation.accessor.attribute.cpp",
        },
        {
          "match": "(?<!\\w)(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U000[0-9a-fA-F]))(?:(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U000[0-9a-fA-F])))*(?!\\w)(?=::)",
          "name": "entity.name.type.namespace.cpp",
        },
        {
          "match": "(?<!\\w)(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U000[0-9a-fA-F]))(?:(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U000[0-9a-fA-F])))*(?!\\w)",
          "name": "entity.other.attribute.$0.cpp",
        },
        {
          "include": "#number_literal",
        },
      ],
    },
    "ms_attributes": {
      "name": "support.other.attribute.cpp",
      "begin": "(__declspec\\()",
      "beginCaptures": {
        "1": {
          "name": "punctuation.section.attribute.begin.cpp",
        },
      },
      "end": "(\\))",
      "endCaptures": {
        "1": {
          "name": "punctuation.section.attribute.end.cpp",
        },
      },
      "patterns": [
        {
          "include": "#attributes_context",
        },
        {
          "begin": "\\(",
          "end": "\\)",
          "patterns": [
            {
              "include": "#attributes_context",
            },
            {
              "include": "#string_context_c",
            },
          ],
        },
        {
          "match": "(using)\\s+((?<!\\w)(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U000[0-9a-fA-F]))(?:(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U000[0-9a-fA-F])))*(?!\\w))",
          "captures": {
            "1": {
              "name": "keyword.other.using.directive.cpp",
            },
            "2": {
              "name": "entity.name.type.namespace.cpp",
            },
          },
        },
        {
          "match": ",",
          "name": "punctuation.separator.attribute.cpp",
        },
        {
          "match": ":",
          "name": "punctuation.accessor.attribute.cpp",
        },
        {
          "match": "(?<!\\w)(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U000[0-9a-fA-F]))(?:(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U000[0-9a-fA-F])))*(?!\\w)(?=::)",
          "name": "entity.name.type.namespace.cpp",
        },
        {
          "match": "(?<!\\w)(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U000[0-9a-fA-F]))(?:(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U000[0-9a-fA-F])))*(?!\\w)",
          "name": "entity.other.attribute.$0.cpp",
        },
        {
          "include": "#number_literal",
        },
      ],
    },
    "alignas_attribute": {
      "name": "support.other.attribute.cpp",
      "begin": "(alignas\\()",
      "beginCaptures": {
        "1": {
          "name": "punctuation.section.attribute.begin.cpp",
        },
      },
      "end": "(\\))",
      "endCaptures": {
        "1": {
          "name": "punctuation.section.attribute.end.cpp",
        },
      },
      "patterns": [
        {
          "include": "#attributes_context",
        },
        {
          "begin": "\\(",
          "end": "\\)",
          "patterns": [
            {
              "include": "#attributes_context",
            },
            {
              "include": "#string_context_c",
            },
          ],
        },
        {
          "match": "(using)\\s+((?<!\\w)(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U000[0-9a-fA-F]))(?:(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U000[0-9a-fA-F])))*(?!\\w))",
          "captures": {
            "1": {
              "name": "keyword.other.using.directive.cpp",
            },
            "2": {
              "name": "entity.name.type.namespace.cpp",
            },
          },
        },
        {
          "match": ",",
          "name": "punctuation.separator.attribute.cpp",
        },
        {
          "match": ":",
          "name": "punctuation.accessor.attribute.cpp",
        },
        {
          "match": "(?<!\\w)(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U000[0-9a-fA-F]))(?:(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U000[0-9a-fA-F])))*(?!\\w)(?=::)",
          "name": "entity.name.type.namespace.cpp",
        },
        {
          "match": "(?<!\\w)(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U000[0-9a-fA-F]))(?:(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U000[0-9a-fA-F])))*(?!\\w)",
          "name": "entity.other.attribute.$0.cpp",
        },
        {
          "include": "#number_literal",
        },
      ],
    },
    "user_defined_template_type": {
      "match": "(?<!\\w)(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U000[0-9a-fA-F]))(?:(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U000[0-9a-fA-F])))*(?!\\w)",
      "name": "storage.type.user-defined.cpp",
    },
    "comma_in_template_argument": {
      "match": ",",
      "name": "comma.cpp punctuation.separator.template.argument.cpp",
    },
    "template_call_innards": {
      "match": "(?<!<)<(?!<)(?:[\\s<>:,\\w])*>\\s*",
      "captures": {
        "0": {
          "name": "meta.template.call.cpp",
          "patterns": [
            {
              "include": "#template_call_context",
            },
          ],
        },
      },
    },
    "template_call_range": {
      "name": "meta.template.call.cpp",
      "begin": "(<)",
      "beginCaptures": {
        "1": {
          "name": "punctuation.section.angle-brackets.begin.template.call.cpp",
        },
      },
      "end": "(>)",
      "endCaptures": {
        "1": {
          "name": "punctuation.section.angle-brackets.end.template.call.cpp",
        },
      },
      "patterns": [
        {
          "include": "#template_call_context",
        },
      ],
    },
    "template_isolated_definition": {
      "match": "(?<!\\w)(template)\\s*(<)((?:.)*)(>\\s*$)",
      "captures": {
        "1": {
          "name": "storage.type.template.cpp",
        },
        "2": {
          "name": "punctuation.section.angle-brackets.start.template.definition.cpp",
        },
        "3": {
          "name": "meta.template.definition.cpp",
          "patterns": [
            {
              "include": "#template_definition_context",
            },
          ],
        },
        "4": {
          "name": "punctuation.section.angle-brackets.end.template.definition.cpp",
        },
      },
    },
    "template_definition": {
      "name": "meta.template.definition.cpp",
      "begin": "(?<!\\w)(template)\\s*(<)",
      "beginCaptures": {
        "1": {
          "name": "storage.type.template.cpp",
        },
        "2": {
          "name": "punctuation.section.angle-brackets.start.template.definition.cpp",
        },
      },
      "end": "(>)",
      "endCaptures": {
        "1": {
          "name": "punctuation.section.angle-brackets.end.template.definition.cpp",
        },
      },
      "patterns": [
        {
          "begin": "((?<=\\w)\\s*<)",
          "beginCaptures": {
            "1": {
              "name": "punctuation.section.angle-brackets.begin.template.call.cpp",
            },
          },
          "end": "(>)",
          "endCaptures": {
            "1": {
              "name": "punctuation.section.angle-brackets.begin.template.call.cpp",
            },
          },
          "patterns": [
            {
              "include": "#template_call_context",
            },
          ],
        },
        {
          "include": "#template_definition_context",
        },
      ],
    },
    "template_argument_defaulted": {
      "match": "(?<=<|,)\\s*((?:(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U000[0-9a-fA-F]))(?:(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U000[0-9a-fA-F])))*\\s+)*)((?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U000[0-9a-fA-F]))(?:(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U000[0-9a-fA-F])))*)\\s*([=])",
      "captures": {
        "1": {
          "name": "storage.type.template.cpp",
        },
        "2": {
          "name": "entity.name.type.template.cpp",
        },
        "3": {
          "name": "keyword.operator.assignment.cpp",
        },
      },
    },
    "template_definition_argument": {
      "match": "(?:(?:\\s*((?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U000[0-9a-fA-F]))(?:(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U000[0-9a-fA-F])))*)|((?:(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U000[0-9a-fA-F]))(?:(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U000[0-9a-fA-F])))*\\s+)+)((?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U000[0-9a-fA-F]))(?:(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U000[0-9a-fA-F])))*))|((?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U000[0-9a-fA-F]))(?:(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U000[0-9a-fA-F])))*)\\s*(\\.\\.\\.)\\s*((?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U000[0-9a-fA-F]))(?:(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U000[0-9a-fA-F])))*))\\s*(?:(,)|(?=>|$))",
      "captures": {
        "1": {
          "name": "storage.type.template.argument.$1.cpp",
        },
        "2": {
          "name": "storage.type.template.argument.$2.cpp",
        },
        "3": {
          "name": "entity.name.type.template.cpp",
        },
        "4": {
          "name": "storage.type.template.cpp",
        },
        "5": {
          "name": "ellipses.cpp punctuation.vararg-ellipses.template.definition.cpp",
        },
        "6": {
          "name": "entity.name.type.template.cpp",
        },
        "7": {
          "name": "comma.cpp punctuation.separator.template.argument.cpp",
        },
      },
    },
    "scope_resolution": {
      "match": "((?:(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U000[0-9a-fA-F]))(?:(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U000[0-9a-fA-F])))*\\s*(?:(?-mix:(?:(?<!<)<(?!<)(?:[\\s<>:,\\w])*>\\s*)))?::)*\\s*)((?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U000[0-9a-fA-F]))(?:(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U000[0-9a-fA-F])))*)\\s*(?:((?<!<)<(?!<)(?:[\\s<>:,\\w])*>\\s*))?(::)",
      "captures": {
        "1": {
          "patterns": [
            {
              "include": "#scope_resolution",
            },
          ],
        },
        "2": {
          "name": "entity.name.type.namespace.scope-resolution.cpp",
        },
        "3": {
          "name": "meta.template.call.cpp",
          "patterns": [
            {
              "include": "#template_call_context",
            },
          ],
        },
        "4": {
          "name": "punctuation.separator.namespace.access.cpp",
        },
      },
      "name": "meta.scope-resolution.cpp",
    },
    "qualified_type": {
      "match": "\\s*(?<!\\w)(?=\\w)(?!(?:not|compl|sizeof|new|delete|not_eq|bitand|xor|bitor|and|or|throw|and_eq|xor_eq|or_eq|alignof|alignas|typeid|noexcept|static_cast|dynamic_cast|const_cast|reinterpret_cast|while|for|do|if|else|goto|switch|try|catch|return|break|case|continue|default|NULL|true|false|nullptr|const|static|volatile|register|restrict|extern|inline|constexpr|mutable|friend|explicit|virtual|final|override|volatile|const|noexcept|constexpr|mutable|constexpr|consteval|private|protected|public|if|elif|else|endif|ifdef|ifndef|define|undef|include|line|error|warning|pragma|_Pragma|defined|__has_include|__has_cpp_attribute|this|template|namespace|using|operator|typedef|decltype|typename|asm|__asm__|concept|requires|export|thread_local|atomic_cancel|atomic_commit|atomic_noexcept|co_await|co_return|co_yield|import|module|reflexpr|synchronized|audit|axiom|transaction_safe|transaction_safe_dynamic)(?![\\w])\\s*)(?:((?:(?:(?:\\[\\[.*?\\]\\]|__attribute(?:__)?\\(\\(.*?\\)\\))|__declspec\\(.*?\\))|alignas\\(.*?\\))(?!\\))))?\\s*(?:(?:(?:short|signed|unsigned|long)|(?:class|struct|union|enum))\\s+)*(?:(((?:(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U000[0-9a-fA-F]))(?:(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U000[0-9a-fA-F])))*\\s*(?:(?-mix:(?:(?<!<)<(?!<)(?:[\\s<>:,\\w])*>\\s*)))?::)*\\s*)((?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U000[0-9a-fA-F]))(?:(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U000[0-9a-fA-F])))*)\\s*(?:((?<!<)<(?!<)(?:[\\s<>:,\\w])*>\\s*))?(::)))?\\s*(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U000[0-9a-fA-F]))(?:(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U000[0-9a-fA-F])))*(?:(?-mix:(?:(?<!<)<(?!<)(?:[\\s<>:,\\w])*>\\s*)))?(?![\\w<:.])",
      "captures": {
        "0": {
          "name": "entity.name.type.cpp meta.qualified_type.cpp",
          "patterns": [
            {
              "match": "(?:class|struct|union|enum)",
              "name": "storage.type.$0.cpp",
            },
            {
              "include": "#function_type",
            },
            {
              "include": "#storage_types",
            },
            {
              "include": "#number_literal",
            },
            {
              "include": "#string_context_c",
            },
            {
              "include": "#comma",
            },
          ],
        },
        "1": {
          "patterns": [
            {
              "include": "#attributes_context",
            },
            {
              "include": "#number_literal",
            },
          ],
        },
        "2": {
          "name": "meta.scope-resolution.cpp",
        },
        "3": {
          "patterns": [
            {
              "include": "#scope_resolution",
            },
          ],
        },
        "4": {
          "name": "entity.name.type.namespace.scope-resolution.cpp",
        },
        "5": {
          "name": "meta.template.call.cpp",
          "patterns": [
            {
              "include": "#template_call_context",
            },
          ],
        },
        "6": {
          "name": "punctuation.separator.namespace.access.cpp",
        },
      },
    },
    "type_alias": {
      "match": "(using)\\s*(?!namespace)(\\s*(?<!\\w)(?=\\w)(?!(?:not|compl|sizeof|new|delete|not_eq|bitand|xor|bitor|and|or|throw|and_eq|xor_eq|or_eq|alignof|alignas|typeid|noexcept|static_cast|dynamic_cast|const_cast|reinterpret_cast|while|for|do|if|else|goto|switch|try|catch|return|break|case|continue|default|NULL|true|false|nullptr|const|static|volatile|register|restrict|extern|inline|constexpr|mutable|friend|explicit|virtual|final|override|volatile|const|noexcept|constexpr|mutable|constexpr|consteval|private|protected|public|if|elif|else|endif|ifdef|ifndef|define|undef|include|line|error|warning|pragma|_Pragma|defined|__has_include|__has_cpp_attribute|this|template|namespace|using|operator|typedef|decltype|typename|asm|__asm__|concept|requires|export|thread_local|atomic_cancel|atomic_commit|atomic_noexcept|co_await|co_return|co_yield|import|module|reflexpr|synchronized|audit|axiom|transaction_safe|transaction_safe_dynamic)(?![\\w])\\s*)(?:((?:(?:(?:\\[\\[.*?\\]\\]|__attribute(?:__)?\\(\\(.*?\\)\\))|__declspec\\(.*?\\))|alignas\\(.*?\\))(?!\\))))?\\s*(?:(?:(?:short|signed|unsigned|long)|(?:class|struct|union|enum))\\s+)*(?:(((?:(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U000[0-9a-fA-F]))(?:(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U000[0-9a-fA-F])))*\\s*(?:(?-mix:(?:(?<!<)<(?!<)(?:[\\s<>:,\\w])*>\\s*)))?::)*\\s*)((?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U000[0-9a-fA-F]))(?:(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U000[0-9a-fA-F])))*)\\s*(?:((?<!<)<(?!<)(?:[\\s<>:,\\w])*>\\s*))?(::)))?\\s*(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U000[0-9a-fA-F]))(?:(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U000[0-9a-fA-F])))*(?:(?-mix:(?:(?<!<)<(?!<)(?:[\\s<>:,\\w])*>\\s*)))?(?![\\w<:.]))\\s*(\\=)\\s*(typename)?\\s*((?:(?-mix:(?:(?<!\\w)(?:const|static|volatile|register|restrict|extern)(?!\\w)))\\s+)*)(?:(\\s*(?<!\\w)(?=\\w)(?!(?:not|compl|sizeof|new|delete|not_eq|bitand|xor|bitor|and|or|throw|and_eq|xor_eq|or_eq|alignof|alignas|typeid|noexcept|static_cast|dynamic_cast|const_cast|reinterpret_cast|while|for|do|if|else|goto|switch|try|catch|return|break|case|continue|default|NULL|true|false|nullptr|const|static|volatile|register|restrict|extern|inline|constexpr|mutable|friend|explicit|virtual|final|override|volatile|const|noexcept|constexpr|mutable|constexpr|consteval|private|protected|public|if|elif|else|endif|ifdef|ifndef|define|undef|include|line|error|warning|pragma|_Pragma|defined|__has_include|__has_cpp_attribute|this|template|namespace|using|operator|typedef|decltype|typename|asm|__asm__|concept|requires|export|thread_local|atomic_cancel|atomic_commit|atomic_noexcept|co_await|co_return|co_yield|import|module|reflexpr|synchronized|audit|axiom|transaction_safe|transaction_safe_dynamic)(?![\\w])\\s*)(?:((?:(?:(?:\\[\\[.*?\\]\\]|__attribute(?:__)?\\(\\(.*?\\)\\))|__declspec\\(.*?\\))|alignas\\(.*?\\))(?!\\))))?\\s*(?:(?:(?:short|signed|unsigned|long)|(?:class|struct|union|enum))\\s+)*(?:(((?:(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U000[0-9a-fA-F]))(?:(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U000[0-9a-fA-F])))*\\s*(?:(?-mix:(?:(?<!<)<(?!<)(?:[\\s<>:,\\w])*>\\s*)))?::)*\\s*)((?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U000[0-9a-fA-F]))(?:(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U000[0-9a-fA-F])))*)\\s*(?:((?<!<)<(?!<)(?:[\\s<>:,\\w])*>\\s*))?(::)))?\\s*(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U000[0-9a-fA-F]))(?:(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U000[0-9a-fA-F])))*(?:(?-mix:(?:(?<!<)<(?!<)(?:[\\s<>:,\\w])*>\\s*)))?(?![\\w<:.]))|(.+(?<!;)))(((?:\\*\\s*)*)((?:\\&\\s*?){0,2})\\s*)(?:(\\[)(\\w*)(\\])\\s*)?\\s*(?:(;)|\\n)",
      "captures": {
        "1": {
          "name": "keyword.other.using.directive.cpp",
        },
        "2": {
          "name": "entity.name.type.cpp meta.qualified_type.cpp",
          "patterns": [
            {
              "match": "(?:class|struct|union|enum)",
              "name": "storage.type.$0.cpp",
            },
            {
              "include": "#function_type",
            },
            {
              "include": "#storage_types",
            },
            {
              "include": "#number_literal",
            },
            {
              "include": "#string_context_c",
            },
            {
              "include": "#comma",
            },
          ],
        },
        "3": {
          "patterns": [
            {
              "include": "#attributes_context",
            },
            {
              "include": "#number_literal",
            },
          ],
        },
        "4": {
          "name": "meta.scope-resolution.cpp",
        },
        "5": {
          "patterns": [
            {
              "include": "#scope_resolution",
            },
          ],
        },
        "6": {
          "name": "entity.name.type.namespace.scope-resolution.cpp",
        },
        "7": {
          "name": "meta.template.call.cpp",
          "patterns": [
            {
              "include": "#template_call_context",
            },
          ],
        },
        "8": {
          "name": "punctuation.separator.namespace.access.cpp",
        },
        "9": {
          "name": "keyword.operator.assignment.cpp",
        },
        "10": {
          "name": "keyword.other.typename.cpp",
        },
        "11": {
          "patterns": [
            {
              "include": "#storage_specifiers",
            },
          ],
        },
        "12": {
          "name": "entity.name.type.cpp meta.qualified_type.cpp",
          "patterns": [
            {
              "match": "(?:class|struct|union|enum)",
              "name": "storage.type.$0.cpp",
            },
            {
              "include": "#function_type",
            },
            {
              "include": "#storage_types",
            },
            {
              "include": "#number_literal",
            },
            {
              "include": "#string_context_c",
            },
            {
              "include": "#comma",
            },
          ],
        },
        "13": {
          "patterns": [
            {
              "include": "#attributes_context",
            },
            {
              "include": "#number_literal",
            },
          ],
        },
        "14": {
          "name": "meta.scope-resolution.cpp",
        },
        "15": {
          "patterns": [
            {
              "include": "#scope_resolution",
            },
          ],
        },
        "16": {
          "name": "entity.name.type.namespace.scope-resolution.cpp",
        },
        "17": {
          "name": "meta.template.call.cpp",
          "patterns": [
            {
              "include": "#template_call_context",
            },
          ],
        },
        "18": {
          "name": "punctuation.separator.namespace.access.cpp",
        },
        "19": {
          "name": "meta.declaration.type.alias.value.unknown.cpp",
          "patterns": [
            {
              "include": "#evaluation_context",
            },
          ],
        },
        "21": {
          "name": "storage.modifier.pointer.cpp",
        },
        "22": {
          "name": "storage.modifier.reference.cpp",
        },
        "23": {
          "name": "punctuation.definition.begin.bracket.square.cpp",
        },
        "24": {
          "patterns": [
            {
              "include": "#evaluation_context",
            },
          ],
        },
        "25": {
          "name": "punctuation.definition.end.bracket.square.cpp",
        },
        "26": {
          "name": "punctuation.terminator.statement.cpp",
        },
      },
      "name": "meta.declaration.type.alias.cpp",
    },
    "struct_declare": {
      "match": "(struct)\\s+((?<!\\w)(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U000[0-9a-fA-F]))(?:(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U000[0-9a-fA-F])))*(?!\\w))\\s*(?:(((?:\\*\\s*)*)((?:\\&\\s*?){0,2})\\s*)|\\s+)((?<!\\w)(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U000[0-9a-fA-F]))(?:(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U000[0-9a-fA-F])))*(?!\\w))",
      "captures": {
        "1": {
          "name": "storage.type.struct.declare.cpp",
        },
        "2": {
          "name": "entity.name.type.struct.cpp",
        },
        "4": {
          "name": "storage.modifier.pointer.cpp",
        },
        "5": {
          "name": "storage.modifier.reference.cpp",
        },
        "6": {
          "name": "variable.other.object.declare.cpp",
        },
      },
    },
    "parameter_struct": {
      "match": "(struct)\\s+((?<!\\w)(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U000[0-9a-fA-F]))(?:(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U000[0-9a-fA-F])))*(?!\\w))\\s*(?:(((?:\\*\\s*)*)((?:\\&\\s*?){0,2})\\s*)|\\s+)((?<!\\w)(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U000[0-9a-fA-F]))(?:(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U000[0-9a-fA-F])))*(?!\\w))?\\s*(?:\\[\\s*\\]\\s*)?(?=,|\\)|\\n)",
      "captures": {
        "1": {
          "name": "storage.type.struct.parameter.cpp",
        },
        "2": {
          "name": "entity.name.type.struct.parameter.cpp",
        },
        "4": {
          "name": "storage.modifier.pointer.cpp",
        },
        "5": {
          "name": "storage.modifier.reference.cpp",
        },
        "6": {
          "name": "variable.other.object.declare.cpp",
        },
      },
    },
    "function_definition": {
      "name": "meta.function.definition.parameters.cpp",
      "begin": "(?<!\\w)(?!\\s*(?:not|compl|sizeof|new|delete|not_eq|bitand|xor|bitor|and|or|throw|and_eq|xor_eq|or_eq|alignof|alignas|typeid|noexcept|static_cast|dynamic_cast|const_cast|reinterpret_cast|while|for|do|if|else|goto|switch|try|catch|return|break|case|continue|default|auto|void|char|short|int|signed|unsigned|long|float|double|bool|wchar_t|u_char|u_short|u_int|u_long|ushort|uint|u_quad_t|quad_t|qaddr_t|caddr_t|daddr_t|div_t|dev_t|fixpt_t|blkcnt_t|blksize_t|gid_t|in_addr_t|in_port_t|ino_t|key_t|mode_t|nlink_t|id_t|pid_t|off_t|segsz_t|swblk_t|uid_t|id_t|clock_t|size_t|ssize_t|time_t|useconds_t|suseconds_t|int8_t|int16_t|int32_t|int64_t|uint8_t|uint16_t|uint32_t|uint64_t|int_least8_t|int_least16_t|int_least32_t|int_least64_t|uint_least8_t|uint_least16_t|uint_least32_t|uint_least64_t|int_fast8_t|int_fast16_t|int_fast32_t|int_fast64_t|uint_fast8_t|uint_fast16_t|uint_fast32_t|uint_fast64_t|intptr_t|uintptr_t|intmax_t|intmax_t|uintmax_t|uintmax_t|NULL|true|false|nullptr|class|struct|union|enum|const|static|volatile|register|restrict|extern|inline|constexpr|mutable|friend|explicit|virtual|volatile|const|noexcept|constexpr|mutable|constexpr|consteval|private|protected|public|this|template|namespace|using|operator|typedef|decltype|typename|asm|__asm__|concept|requires|export|thread_local|atomic_cancel|atomic_commit|atomic_noexcept|co_await|co_return|co_yield|import|module|reflexpr|synchronized)\\s*\\()(?=(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U000[0-9a-fA-F]))(?:(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U000[0-9a-fA-F])))*\\s*(?:((?:(?:(?:\\[\\[.*?\\]\\]|__attribute(?:__)?\\(\\(.*?\\)\\))|__declspec\\(.*?\\))|alignas\\(.*?\\))(?!\\))))?\\s*\\()",
      "end": "(?<=\\))",
      "patterns": [
        {
          "include": "#parameter_struct",
        },
        {
          "include": "#function_context_c",
        },
      ],
    },
    "static_assert": {
      "begin": "(static_assert|_Static_assert)\\s*(\\()",
      "beginCaptures": {
        "1": {
          "name": "keyword.other.static_assert.cpp",
        },
        "2": {
          "name": "punctuation.section.arguments.begin.bracket.round.cpp",
        },
      },
      "end": "(\\))",
      "endCaptures": {
        "1": {
          "name": "punctuation.section.arguments.end.bracket.round.cpp",
        },
      },
      "patterns": [
        {
          "name": "meta.static_assert.message.cpp",
          "begin": "(,)\\s*(?=(?:L|u8|u|U\\s*\\\")?)",
          "beginCaptures": {
            "1": {
              "name": "comma.cpp punctuation.separator.delimiter.cpp",
            },
          },
          "end": "(?=\\))",
          "patterns": [
            {
              "include": "#string_context",
            },
            {
              "include": "#string_context_c",
            },
          ],
        },
        {
          "include": "#function_call_context_c",
        },
      ],
    },
    "function_call": {
      "begin": "(?<!\\w)(?!\\s*(?:not|compl|sizeof|new|delete|not_eq|bitand|xor|bitor|and|or|throw|and_eq|xor_eq|or_eq|alignof|alignas|typeid|noexcept|static_cast|dynamic_cast|const_cast|reinterpret_cast|while|for|do|if|else|goto|switch|try|catch|return|break|case|continue|default|auto|void|char|short|int|signed|unsigned|long|float|double|bool|wchar_t|u_char|u_short|u_int|u_long|ushort|uint|u_quad_t|quad_t|qaddr_t|caddr_t|daddr_t|div_t|dev_t|fixpt_t|blkcnt_t|blksize_t|gid_t|in_addr_t|in_port_t|ino_t|key_t|mode_t|nlink_t|id_t|pid_t|off_t|segsz_t|swblk_t|uid_t|id_t|clock_t|size_t|ssize_t|time_t|useconds_t|suseconds_t|int8_t|int16_t|int32_t|int64_t|uint8_t|uint16_t|uint32_t|uint64_t|int_least8_t|int_least16_t|int_least32_t|int_least64_t|uint_least8_t|uint_least16_t|uint_least32_t|uint_least64_t|int_fast8_t|int_fast16_t|int_fast32_t|int_fast64_t|uint_fast8_t|uint_fast16_t|uint_fast32_t|uint_fast64_t|intptr_t|uintptr_t|intmax_t|intmax_t|uintmax_t|uintmax_t|NULL|true|false|nullptr|class|struct|union|enum|const|static|volatile|register|restrict|extern|inline|constexpr|mutable|friend|explicit|virtual|volatile|const|noexcept|constexpr|mutable|constexpr|consteval|private|protected|public|this|template|namespace|using|operator|typedef|decltype|typename|asm|__asm__|concept|requires|export|thread_local|atomic_cancel|atomic_commit|atomic_noexcept|co_await|co_return|co_yield|import|module|reflexpr|synchronized)\\s*\\()((?:(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U000[0-9a-fA-F]))(?:(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U000[0-9a-fA-F])))*\\s*(?:(?-mix:(?:(?<!<)<(?!<)(?:[\\s<>:,\\w])*>\\s*)))?::)*\\s*)((?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U000[0-9a-fA-F]))(?:(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U000[0-9a-fA-F])))*)\\s*(?:((?<!<)<(?!<)(?:[\\s<>:,\\w])*>\\s*))?(\\()",
      "beginCaptures": {
        "1": {
          "patterns": [
            {
              "include": "#scope_resolution",
            },
          ],
        },
        "2": {
          "name": "entity.name.function.call.cpp",
        },
        "3": {
          "name": "meta.template.call.cpp",
          "patterns": [
            {
              "include": "#template_call_context",
            },
          ],
        },
        "4": {
          "name": "punctuation.section.arguments.begin.bracket.round.cpp",
        },
      },
      "end": "(\\))",
      "endCaptures": {
        "1": {
          "name": "punctuation.section.arguments.end.bracket.round.cpp",
        },
      },
      "patterns": [
        {
          "include": "#function_call_context_c",
        },
      ],
    },
    "legacy_function_definition": {
      "name": "meta.function.definition.parameters.cpp",
      "begin": "(?!(?:(?:::|\\+\\+|\\-\\-|\\(\\)|\\[\\]|\\.|\\->|\\+\\+|\\-\\-|\\+|\\-|!|not|~|compl|\\*|&|sizeof|sizeof\\.\\.\\.|new|new\\[\\]|delete|delete\\[\\]|\\.\\*|\\->\\*|\\*|\\/|%|\\+|\\-|<<|>>|<=>|<|<=|>|>=|==|!=|not_eq|&|bitand|\\^|xor|\\||bitor|&&|and|\\|\\||or|\\?:|throw|=|\\+=|\\-=|\\*=|\\/=|%=|<<=|>>=|&=|and_eq|\\^=|xor_eq|\\|=|or_eq|,|alignof|alignas|typeid|noexcept|static_cast|dynamic_cast|const_cast|reinterpret_cast)|(?:throw|while|for|do|if|else|goto|switch|try|catch|return|break|case|continue|default))\\s*\\()((?:(?-mix:(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U000[0-9a-fA-F]))(?:(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U000[0-9a-fA-F])))*|::)++|(?<=operator)(?:\\+\\+|\\-\\-|\\(\\)|\\[\\]|\\->|\\+\\+|\\-\\-|\\+|\\-|!|~|\\*|&|new|new\\[\\]|delete|delete\\[\\]|\\->\\*|\\*|\\/|%|\\+|\\-|<<|>>|<=>|<|<=|>|>=|==|!=|&|\\^|\\||&&|\\|\\||=|\\+=|\\-=|\\*=|\\/=|%=|<<=|>>=|&=|\\^=|\\|=|,)))\\s*(\\()",
      "beginCaptures": {
        "1": {
          "name": "entity.name.function.cpp",
        },
        "2": {
          "name": "punctuation.section.parameters.begin.bracket.round.cpp",
        },
      },
      "end": "(\\)|:)",
      "endCaptures": {
        "1": {
          "name": "punctuation.section.parameters.end.bracket.round.cpp",
        },
      },
      "patterns": [
        {
          "include": "#probably_a_parameter",
        },
        {
          "include": "#function_context_c",
        },
      ],
    },
    "operators": {
      "patterns": [
        {
          "include": "#sizeof_operator",
        },
        {
          "include": "#alignof_operator",
        },
        {
          "include": "#alignas_operator",
        },
        {
          "include": "#typeid_operator",
        },
        {
          "include": "#decltype_specifier",
        },
        {
          "match": "(?<!\\w)(?:static_cast|dynamic_cast|const_cast|reinterpret_cast)(?!\\w)",
          "name": "keyword.operator.wordlike.cpp keyword.operator.cast.$0.cpp",
        },
        {
          "include": "#method_access",
        },
        {
          "include": "#member_access",
        },
        {
          "match": "(?<!\\w)(?:not|compl|new|delete|not_eq|bitand|xor|bitor|and|or|and_eq|xor_eq|or_eq|noexcept)(?!\\w)",
          "name": "keyword.operator.wordlike.cpp alias.cpp keyword.operator.$0.cpp",
        },
        {
          "include": "#vararg_ellipses",
        },
        {
          "match": "--",
          "name": "keyword.operator.decrement.cpp",
        },
        {
          "match": "\\+\\+",
          "name": "keyword.operator.increment.cpp",
        },
        {
          "match": "%=|\\+=|-=|\\*=|(?<!\\()/=",
          "name": "keyword.operator.assignment.compound.cpp",
        },
        {
          "match": "&=|\\^=|<<=|>>=|\\|=",
          "name": "keyword.operator.assignment.compound.bitwise.cpp",
        },
        {
          "match": "<<|>>",
          "name": "keyword.operator.bitwise.shift.cpp",
        },
        {
          "match": "!=|<=|>=|==|<|>",
          "name": "keyword.operator.comparison.cpp",
        },
        {
          "match": "&&|!|\\|\\|",
          "name": "keyword.operator.logical.cpp",
        },
        {
          "match": "&|\\||\\^|~",
          "name": "keyword.operator.cpp",
        },
        {
          "include": "#assignment_operator",
        },
        {
          "match": "%|\\*|/|-|\\+",
          "name": "keyword.operator.cpp",
        },
        {
          "begin": "\\?",
          "beginCaptures": {
            "0": {
              "name": "keyword.operator.ternary.cpp",
            },
          },
          "end": ":",
          "applyEndPatternLast": true,
          "endCaptures": {
            "0": {
              "name": "keyword.operator.ternary.cpp",
            },
          },
          "patterns": [
            {
              "include": "#method_access",
            },
            {
              "include": "#member_access",
            },
            {
              "include": "#function_call_c",
            },
            {
              "include": "$base",
            },
          ],
        },
      ],
    },
    "function_pointer": {
      "begin": "(\\s*(?<!\\w)(?=\\w)(?!(?:not|compl|sizeof|new|delete|not_eq|bitand|xor|bitor|and|or|throw|and_eq|xor_eq|or_eq|alignof|alignas|typeid|noexcept|static_cast|dynamic_cast|const_cast|reinterpret_cast|while|for|do|if|else|goto|switch|try|catch|return|break|case|continue|default|NULL|true|false|nullptr|const|static|volatile|register|restrict|extern|inline|constexpr|mutable|friend|explicit|virtual|final|override|volatile|const|noexcept|constexpr|mutable|constexpr|consteval|private|protected|public|if|elif|else|endif|ifdef|ifndef|define|undef|include|line|error|warning|pragma|_Pragma|defined|__has_include|__has_cpp_attribute|this|template|namespace|using|operator|typedef|decltype|typename|asm|__asm__|concept|requires|export|thread_local|atomic_cancel|atomic_commit|atomic_noexcept|co_await|co_return|co_yield|import|module|reflexpr|synchronized|audit|axiom|transaction_safe|transaction_safe_dynamic)(?![\\w])\\s*)(?:((?:(?:(?:\\[\\[.*?\\]\\]|__attribute(?:__)?\\(\\(.*?\\)\\))|__declspec\\(.*?\\))|alignas\\(.*?\\))(?!\\))))?\\s*(?:(?:(?:short|signed|unsigned|long)|(?:class|struct|union|enum))\\s+)*(?:(((?:(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U000[0-9a-fA-F]))(?:(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U000[0-9a-fA-F])))*\\s*(?:(?-mix:(?:(?<!<)<(?!<)(?:[\\s<>:,\\w])*>\\s*)))?::)*\\s*)((?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U000[0-9a-fA-F]))(?:(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U000[0-9a-fA-F])))*)\\s*(?:((?<!<)<(?!<)(?:[\\s<>:,\\w])*>\\s*))?(::)))?\\s*(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U000[0-9a-fA-F]))(?:(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U000[0-9a-fA-F])))*(?:(?-mix:(?:(?<!<)<(?!<)(?:[\\s<>:,\\w])*>\\s*)))?(?![\\w<:.]))\\s*(((?:\\*\\s*)*)((?:\\&\\s*?){0,2})\\s*)(\\()(\\*)\\s*((?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U000[0-9a-fA-F]))(?:(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U000[0-9a-fA-F])))*)?\\s*(?:(\\[)(\\w*)(\\])\\s*)*(\\))\\s*(\\()",
      "beginCaptures": {
        "1": {
          "name": "entity.name.type.cpp meta.qualified_type.cpp",
          "patterns": [
            {
              "match": "(?:class|struct|union|enum)",
              "name": "storage.type.$0.cpp",
            },
            {
              "include": "#function_type",
            },
            {
              "include": "#storage_types",
            },
            {
              "include": "#number_literal",
            },
            {
              "include": "#string_context_c",
            },
            {
              "include": "#comma",
            },
          ],
        },
        "2": {
          "patterns": [
            {
              "include": "#attributes_context",
            },
            {
              "include": "#number_literal",
            },
          ],
        },
        "3": {
          "name": "meta.scope-resolution.cpp",
        },
        "4": {
          "patterns": [
            {
              "include": "#scope_resolution",
            },
          ],
        },
        "5": {
          "name": "entity.name.type.namespace.scope-resolution.cpp",
        },
        "6": {
          "name": "meta.template.call.cpp",
          "patterns": [
            {
              "include": "#template_call_context",
            },
          ],
        },
        "7": {
          "name": "punctuation.separator.namespace.access.cpp",
        },
        "9": {
          "name": "storage.modifier.pointer.cpp",
        },
        "10": {
          "name": "storage.modifier.reference.cpp",
        },
        "11": {
          "name": "punctuation.section.parens.begin.bracket.round.function.pointer.cpp",
        },
        "12": {
          "name": "punctuation.definition.function.pointer.dereference.cpp",
        },
        "13": {
          "name": "variable.other.definition.pointer.function.cpp",
        },
        "14": {
          "name": "punctuation.definition.begin.bracket.square.cpp",
        },
        "15": {
          "patterns": [
            {
              "include": "#evaluation_context",
            },
          ],
        },
        "16": {
          "name": "punctuation.definition.end.bracket.square.cpp",
        },
        "17": {
          "name": "punctuation.section.parens.end.bracket.round.function.pointer.cpp",
        },
        "18": {
          "name": "punctuation.section.parameters.begin.bracket.round.function.pointer.cpp",
        },
      },
      "end": "(\\))\\s*(?=[{=,);]|\\n)(?!\\()",
      "endCaptures": {
        "1": {
          "name": "punctuation.section.parameters.end.bracket.round.function.pointer.cpp",
        },
      },
      "patterns": [
        {
          "include": "#parameter_struct",
        },
        {
          "include": "#probably_a_parameter",
        },
        {
          "include": "#function_context_c",
        },
      ],
    },
    "probably_a_parameter": {
      "match": "(?:((?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U000[0-9a-fA-F]))(?:(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U000[0-9a-fA-F])))*\\s*(?==))|((?<=\\w |\\*\\/|[&*>\\]\\)]|\\.\\.\\.)\\s*(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U000[0-9a-fA-F]))(?:(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U000[0-9a-fA-F])))*\\s*(?=(?:\\[\\]\\s*)?(?:,|\\)))))",
      "captures": {
        "1": {
          "name": "variable.parameter.defaulted.cpp",
        },
        "2": {
          "name": "variable.parameter.cpp",
        },
      },
    },
    "operator_overload": {
      "name": "meta.function.definition.parameters.operator-overload.cpp",
      "begin": "(operator)((?:\\s*(?:\\+\\+|\\-\\-|\\(\\)|\\[\\]|\\->|\\+\\+|\\-\\-|\\+|\\-|!|~|\\*|&|\\->\\*|\\*|\\/|%|\\+|\\-|<<|>>|<=>|<|<=|>|>=|==|!=|&|\\^|\\||&&|\\|\\||=|\\+=|\\-=|\\*=|\\/=|%=|<<=|>>=|&=|\\^=|\\|=|,)|\\s+(?:(?:new|new\\[\\]|delete|delete\\[\\])|(?:(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U000[0-9a-fA-F]))(?:(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U000[0-9a-fA-F])))*\\s*(?:(?-mix:(?:(?<!<)<(?!<)(?:[\\s<>:,\\w])*>\\s*)))?::)*(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U000[0-9a-fA-F]))(?:(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U000[0-9a-fA-F])))*\\s*(?:&)?)))\\s*(\\()",
      "beginCaptures": {
        "1": {
          "name": "keyword.other.operator.overload.cpp",
        },
        "2": {
          "name": "entity.name.operator.overloadee.cpp",
          "patterns": [
            {
              "include": "#scope_resolution",
            },
          ],
        },
        "3": {
          "name": "punctuation.section.parameters.begin.bracket.round.operator-overload.cpp",
        },
      },
      "end": "(\\))",
      "endCaptures": {
        "1": {
          "name": "punctuation.section.parameters.end.bracket.round.operator-overload.cpp",
        },
      },
      "patterns": [
        {
          "include": "#probably_a_parameter",
        },
        {
          "include": "#function_context_c",
        },
      ],
    },
    "member_access": {
      "match": "(?:((?<!\\w)this(?!\\w))|((?:(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U000[0-9a-fA-F]))(?:(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U000[0-9a-fA-F])))*|(?<=\\]|\\)))\\s*))(?:((?:\\.\\*|\\.))|((?:->\\*|->)))((?:(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U000[0-9a-fA-F]))(?:(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U000[0-9a-fA-F])))*\\s*(?-mix:(?:(?:\\.\\*|\\.))|(?:(?:->\\*|->)))\\s*)*)\\s*(\\b(?!auto[^(?-mix:\\w)]|void[^(?-mix:\\w)]|char[^(?-mix:\\w)]|short[^(?-mix:\\w)]|int[^(?-mix:\\w)]|signed[^(?-mix:\\w)]|unsigned[^(?-mix:\\w)]|long[^(?-mix:\\w)]|float[^(?-mix:\\w)]|double[^(?-mix:\\w)]|bool[^(?-mix:\\w)]|wchar_t[^(?-mix:\\w)]|u_char[^(?-mix:\\w)]|u_short[^(?-mix:\\w)]|u_int[^(?-mix:\\w)]|u_long[^(?-mix:\\w)]|ushort[^(?-mix:\\w)]|uint[^(?-mix:\\w)]|u_quad_t[^(?-mix:\\w)]|quad_t[^(?-mix:\\w)]|qaddr_t[^(?-mix:\\w)]|caddr_t[^(?-mix:\\w)]|daddr_t[^(?-mix:\\w)]|div_t[^(?-mix:\\w)]|dev_t[^(?-mix:\\w)]|fixpt_t[^(?-mix:\\w)]|blkcnt_t[^(?-mix:\\w)]|blksize_t[^(?-mix:\\w)]|gid_t[^(?-mix:\\w)]|in_addr_t[^(?-mix:\\w)]|in_port_t[^(?-mix:\\w)]|ino_t[^(?-mix:\\w)]|key_t[^(?-mix:\\w)]|mode_t[^(?-mix:\\w)]|nlink_t[^(?-mix:\\w)]|id_t[^(?-mix:\\w)]|pid_t[^(?-mix:\\w)]|off_t[^(?-mix:\\w)]|segsz_t[^(?-mix:\\w)]|swblk_t[^(?-mix:\\w)]|uid_t[^(?-mix:\\w)]|id_t[^(?-mix:\\w)]|clock_t[^(?-mix:\\w)]|size_t[^(?-mix:\\w)]|ssize_t[^(?-mix:\\w)]|time_t[^(?-mix:\\w)]|useconds_t[^(?-mix:\\w)]|suseconds_t[^(?-mix:\\w)]|int8_t[^(?-mix:\\w)]|int16_t[^(?-mix:\\w)]|int32_t[^(?-mix:\\w)]|int64_t[^(?-mix:\\w)]|uint8_t[^(?-mix:\\w)]|uint16_t[^(?-mix:\\w)]|uint32_t[^(?-mix:\\w)]|uint64_t[^(?-mix:\\w)]|int_least8_t[^(?-mix:\\w)]|int_least16_t[^(?-mix:\\w)]|int_least32_t[^(?-mix:\\w)]|int_least64_t[^(?-mix:\\w)]|uint_least8_t[^(?-mix:\\w)]|uint_least16_t[^(?-mix:\\w)]|uint_least32_t[^(?-mix:\\w)]|uint_least64_t[^(?-mix:\\w)]|int_fast8_t[^(?-mix:\\w)]|int_fast16_t[^(?-mix:\\w)]|int_fast32_t[^(?-mix:\\w)]|int_fast64_t[^(?-mix:\\w)]|uint_fast8_t[^(?-mix:\\w)]|uint_fast16_t[^(?-mix:\\w)]|uint_fast32_t[^(?-mix:\\w)]|uint_fast64_t[^(?-mix:\\w)]|intptr_t[^(?-mix:\\w)]|uintptr_t[^(?-mix:\\w)]|intmax_t[^(?-mix:\\w)]|intmax_t[^(?-mix:\\w)]|uintmax_t[^(?-mix:\\w)]|uintmax_t[^(?-mix:\\w)])(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U000[0-9a-fA-F]))(?:(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U000[0-9a-fA-F])))*\\b(?!\\())",
      "captures": {
        "1": {
          "name": "variable.language.this.cpp",
        },
        "2": {
          "name": "variable.other.object.access.cpp",
        },
        "3": {
          "name": "punctuation.separator.dot-access.cpp",
        },
        "4": {
          "name": "punctuation.separator.pointer-access.cpp",
        },
        "5": {
          "patterns": [
            {
              "match": "(?<=(?:\\.\\*|\\.|->|->\\*))\\s*(?:((?<!\\w)this(?!\\w))|((?:(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U000[0-9a-fA-F]))(?:(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U000[0-9a-fA-F])))*|(?<=\\]|\\)))\\s*))(?:((?:\\.\\*|\\.))|((?:->\\*|->)))",
              "captures": {
                "1": {
                  "name": "variable.language.this.cpp",
                },
                "2": {
                  "name": "variable.other.object.property.cpp",
                },
                "3": {
                  "name": "punctuation.separator.dot-access.cpp",
                },
                "4": {
                  "name": "punctuation.separator.pointer-access.cpp",
                },
              },
            },
            {
              "match": "(?:((?<!\\w)this(?!\\w))|((?:(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U000[0-9a-fA-F]))(?:(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U000[0-9a-fA-F])))*|(?<=\\]|\\)))\\s*))(?:((?:\\.\\*|\\.))|((?:->\\*|->)))",
              "captures": {
                "1": {
                  "name": "variable.language.this.cpp",
                },
                "2": {
                  "name": "variable.other.object.access.cpp",
                },
                "3": {
                  "name": "punctuation.separator.dot-access.cpp",
                },
                "4": {
                  "name": "punctuation.separator.pointer-access.cpp",
                },
              },
            },
            {
              "include": "#member_access",
            },
            {
              "include": "#method_access",
            },
          ],
        },
        "6": {
          "name": "variable.other.property.cpp",
        },
      },
    },
    "method_access": {
      "contentName": "meta.function-call.member",
      "begin": "(?:((?<!\\w)this(?!\\w))|((?:(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U000[0-9a-fA-F]))(?:(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U000[0-9a-fA-F])))*|(?<=\\]|\\)))\\s*))(?:((?:\\.\\*|\\.))|((?:->\\*|->)))((?:(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U000[0-9a-fA-F]))(?:(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U000[0-9a-fA-F])))*\\s*(?-mix:(?:(?:\\.\\*|\\.))|(?:(?:->\\*|->)))\\s*)*)\\s*((?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U000[0-9a-fA-F]))(?:(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U000[0-9a-fA-F])))*)(\\()",
      "beginCaptures": {
        "1": {
          "name": "variable.language.this.cpp",
        },
        "2": {
          "name": "variable.other.object.access.cpp",
        },
        "3": {
          "name": "punctuation.separator.dot-access.cpp",
        },
        "4": {
          "name": "punctuation.separator.pointer-access.cpp",
        },
        "5": {
          "patterns": [
            {
              "match": "(?<=(?:\\.\\*|\\.|->|->\\*))\\s*(?:((?<!\\w)this(?!\\w))|((?:(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U000[0-9a-fA-F]))(?:(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U000[0-9a-fA-F])))*|(?<=\\]|\\)))\\s*))(?:((?:\\.\\*|\\.))|((?:->\\*|->)))",
              "captures": {
                "1": {
                  "name": "variable.language.this.cpp",
                },
                "2": {
                  "name": "variable.other.object.property.cpp",
                },
                "3": {
                  "name": "punctuation.separator.dot-access.cpp",
                },
                "4": {
                  "name": "punctuation.separator.pointer-access.cpp",
                },
              },
            },
            {
              "match": "(?:((?<!\\w)this(?!\\w))|((?:(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U000[0-9a-fA-F]))(?:(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U000[0-9a-fA-F])))*|(?<=\\]|\\)))\\s*))(?:((?:\\.\\*|\\.))|((?:->\\*|->)))",
              "captures": {
                "1": {
                  "name": "variable.language.this.cpp",
                },
                "2": {
                  "name": "variable.other.object.access.cpp",
                },
                "3": {
                  "name": "punctuation.separator.dot-access.cpp",
                },
                "4": {
                  "name": "punctuation.separator.pointer-access.cpp",
                },
              },
            },
            {
              "include": "#member_access",
            },
            {
              "include": "#method_access",
            },
          ],
        },
        "6": {
          "name": "entity.name.function.member.cpp",
        },
        "7": {
          "name": "punctuation.section.arguments.begin.bracket.round.function.member.cpp",
        },
      },
      "end": "(\\))",
      "endCaptures": {
        "1": {
          "name": "punctuation.section.arguments.end.bracket.round.function.member.cpp",
        },
      },
      "patterns": [
        {
          "include": "#function_call_context_c",
        },
      ],
    },
    "using_namespace": {
      "name": "meta.using-namespace.cpp",
      "begin": "(?<!\\w)(using)\\s+(namespace)\\s+(?:((?:(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U000[0-9a-fA-F]))(?:(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U000[0-9a-fA-F])))*\\s*(?:(?-mix:(?:(?<!<)<(?!<)(?:[\\s<>:,\\w])*>\\s*)))?::)*\\s*))?((?<!\\w)(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U000[0-9a-fA-F]))(?:(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U000[0-9a-fA-F])))*(?!\\w))(?=;|\\n)",
      "beginCaptures": {
        "1": {
          "name": "keyword.other.using.directive.cpp",
        },
        "2": {
          "name": "keyword.other.namespace.directive.cpp storage.type.namespace.directive.cpp",
        },
        "3": {
          "patterns": [
            {
              "include": "#scope_resolution",
            },
          ],
        },
        "4": {
          "name": "entity.name.type.namespace.cpp",
        },
      },
      "end": "(;)",
      "endCaptures": {
        "1": {
          "name": "punctuation.terminator.statement.cpp",
        },
      },
    },
    "namespace_block": {
      "name": "meta.block.namespace.cpp",
      "begin": "((?<!\\w)(namespace)(?:(?:\\s+|((?:(?:(?:\\[\\[.*?\\]\\]|__attribute(?:__)?\\(\\(.*?\\)\\))|__declspec\\(.*?\\))|alignas\\(.*?\\))(?!\\))))|(?=\\{|\\n))(?:((?:(?:(?:\\[\\[.*?\\]\\]|__attribute(?:__)?\\(\\(.*?\\)\\))|__declspec\\(.*?\\))|alignas\\(.*?\\))(?!\\))))?\\s*((?:(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U000[0-9a-fA-F]))(?:(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U000[0-9a-fA-F])))*\\s*(?:(?-mix:(?:(?<!<)<(?!<)(?:[\\s<>:,\\w])*>\\s*)))?::)*\\s*)\\s*(?:(?:((?<!\\w)(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U000[0-9a-fA-F]))(?:(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U000[0-9a-fA-F])))*(?!\\w))|(?=\\{))|\\n))",
      "beginCaptures": {
        "1": {
          "name": "meta.head.namespace.cpp",
        },
        "2": {
          "name": "keyword.other.namespace.definition.cpp storage.type.namespace.definition.cpp",
        },
        "3": {
          "patterns": [
            {
              "include": "#attributes_context",
            },
            {
              "include": "#number_literal",
            },
          ],
        },
        "4": {
          "patterns": [
            {
              "include": "#attributes_context",
            },
            {
              "include": "#number_literal",
            },
          ],
        },
        "5": {
          "patterns": [
            {
              "include": "#scope_resolution",
            },
          ],
        },
        "6": {
          "name": "entity.name.type.namespace.cpp",
        },
      },
      "end": "(?:(?<=\\})|(?=[;>\\[\\]=]))",
      "patterns": [
        {
          "name": "meta.head.namespace.cpp",
          "begin": "\\G ?",
          "end": "((?:\\{|(?=;)))",
          "endCaptures": {
            "1": {
              "name": "punctuation.section.block.begin.bracket.curly.namespace.cpp",
            },
          },
        },
        {
          "name": "meta.body.namespace.cpp",
          "begin": "(?<=\\{)",
          "end": "(\\})",
          "endCaptures": {
            "1": {
              "name": "punctuation.section.block.end.bracket.curly.namespace.cpp",
            },
          },
          "patterns": [
            {
              "include": "$base",
            },
          ],
        },
        {
          "name": "meta.tail.namespace.cpp",
          "begin": "(?<=})[\\s\\n]*",
          "end": "[\\s\\n]*(?=;)",
          "patterns": [
            {
              "include": "$base",
            },
          ],
        },
      ],
    },
    "macro_argument": {
      "match": "##(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U000[0-9a-fA-F]))(?:(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U000[0-9a-fA-F])))*(?!\\w)",
      "name": "variable.other.macro.argument.cpp",
    },
    "lambdas": {
      "begin": "((?:(?<=[^\\s]|^)(?<![\\w\\]\\)\\[\\*])|(?<=\\Wreturn|^return))\\s*(\\[(?!\\[))((?:.*\\[.*?\\].*?)*.*?)(\\]))",
      "beginCaptures": {
        "2": {
          "name": "punctuation.definition.capture.begin.lambda.cpp",
        },
        "3": {
          "name": "meta.lambda.capture.cpp",
          "patterns": [
            {
              "include": "#probably_a_parameter",
            },
            {
              "include": "#function_context_c",
            },
          ],
        },
        "4": {
          "name": "punctuation.definition.capture.end.lambda.cpp",
        },
      },
      "end": "(?<=})",
      "patterns": [
        {
          "name": "meta.function.definition.parameters.lambda.cpp",
          "begin": "(\\()",
          "beginCaptures": {
            "1": {
              "name": "punctuation.definition.parameters.begin.lambda.cpp",
            },
          },
          "end": "(\\))",
          "endCaptures": {
            "1": {
              "name": "punctuation.definition.parameters.end.lambda.cpp",
            },
          },
          "patterns": [
            {
              "include": "#probably_a_parameter",
            },
            {
              "include": "#function_context_c",
            },
          ],
        },
        {
          "match": "(?<!\\w)(?:mutable|constexpr|consteval)(?!\\w)",
          "name": "storage.modifier.lambda.$0.cpp",
        },
        {
          "match": "(->)(.+?(?=\\{|$))?",
          "captures": {
            "1": {
              "name": "punctuation.definition.lambda.return-type.cpp",
            },
            "2": {
              "name": "storage.type.return-type.lambda.cpp",
            },
          },
        },
        {
          "name": "meta.function.definition.body.lambda.cpp",
          "begin": "(\\{)",
          "beginCaptures": {
            "1": {
              "name": "punctuation.section.block.begin.bracket.curly.lambda.cpp",
            },
          },
          "end": "(\\})",
          "endCaptures": {
            "1": {
              "name": "punctuation.section.block.end.bracket.curly.lambda.cpp",
            },
          },
          "patterns": [
            {
              "include": "$base",
            },
          ],
        },
      ],
    },
    "pthread_types": {
      "match": "(?<!\\w)pthread_attr_t|pthread_cond_t|pthread_condattr_t|pthread_mutex_t|pthread_mutexattr_t|pthread_once_t|pthread_rwlock_t|pthread_rwlockattr_t|pthread_t|pthread_key_t(?!\\w)",
      "name": "support.type.posix-reserved.pthread.cpp",
    },
    "posix_reserved_types": {
      "match": "(?<!\\w)[a-zA-Z_](?:\\w)*_t(?!\\w)",
      "name": "support.type.posix-reserved.cpp",
    },
    "enumerator_list": {
      "match": "((?<!\\w)(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U000[0-9a-fA-F]))(?:(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U000[0-9a-fA-F])))*(?!\\w))\\s*(?:((?:(?:(?:\\[\\[.*?\\]\\]|__attribute(?:__)?\\(\\(.*?\\)\\))|__declspec\\(.*?\\))|alignas\\(.*?\\))(?!\\))))?\\s*(?:(\\=)\\s*(.+?)\\s*)?(?:(?:((?:[,;]|\\n))|(?=\\}))|(?=(?:\\/\\/|\\/\\*)))",
      "captures": {
        "1": {
          "name": "variable.other.enummember.cpp",
        },
        "2": {
          "patterns": [
            {
              "include": "#attributes_context",
            },
            {
              "include": "#number_literal",
            },
          ],
        },
        "3": {
          "name": "keyword.operator.assignment.cpp",
        },
        "4": {
          "patterns": [
            {
              "include": "#evaluation_context",
            },
          ],
        },
        "5": {
          "patterns": [
            {
              "include": "#comma",
            },
            {
              "include": "#semicolon",
            },
          ],
        },
      },
      "name": "meta.enum.definition.cpp",
    },
    "enum_block": {
      "name": "meta.block.enum.cpp",
      "begin": "(((?<!\\w)enum(?!\\w))(?:\\s+(class|struct))?(?:(?:\\s+|((?:(?:(?:\\[\\[.*?\\]\\]|__attribute(?:__)?\\(\\(.*?\\)\\))|__declspec\\(.*?\\))|alignas\\(.*?\\))(?!\\))))|(?={))\\s*((?<!\\w)(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U000[0-9a-fA-F]))(?:(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U000[0-9a-fA-F])))*(?!\\w))?(?:\\s*(:)\\s*(?:(((?:(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U000[0-9a-fA-F]))(?:(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U000[0-9a-fA-F])))*\\s*(?:(?-mix:(?:(?<!<)<(?!<)(?:[\\s<>:,\\w])*>\\s*)))?::)*\\s*)((?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U000[0-9a-fA-F]))(?:(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U000[0-9a-fA-F])))*)\\s*(?:((?<!<)<(?!<)(?:[\\s<>:,\\w])*>\\s*))?(::)))?\\s*((?<!\\w)(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U000[0-9a-fA-F]))(?:(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U000[0-9a-fA-F])))*(?!\\w)))?)",
      "beginCaptures": {
        "1": {
          "name": "meta.head.enum.cpp",
        },
        "2": {
          "name": "storage.type.enum.cpp",
        },
        "3": {
          "name": "storage.type.enum.enum-key.$3.cpp",
        },
        "4": {
          "patterns": [
            {
              "include": "#attributes_context",
            },
            {
              "include": "#number_literal",
            },
          ],
        },
        "5": {
          "name": "entity.name.type.enum.cpp",
        },
        "6": {
          "name": "colon.cpp punctuation.separator.type-specifier.cpp",
        },
        "7": {
          "name": "meta.scope-resolution.cpp",
        },
        "8": {
          "patterns": [
            {
              "include": "#scope_resolution",
            },
          ],
        },
        "9": {
          "name": "entity.name.type.namespace.scope-resolution.cpp",
        },
        "10": {
          "name": "meta.template.call.cpp",
          "patterns": [
            {
              "include": "#template_call_context",
            },
          ],
        },
        "11": {
          "name": "punctuation.separator.namespace.access.cpp",
        },
        "12": {
          "name": "storage.type.integral.$12.cpp",
        },
      },
      "end": "(?:(?:(?<=})\\s*(;)|(;))|(?=[;>\\[\\]=]))",
      "endCaptures": {
        "1": {
          "name": "punctuation.terminator.statement.cpp",
        },
        "2": {
          "name": "punctuation.terminator.statement.cpp",
        },
      },
      "patterns": [
        {
          "name": "meta.head.enum.cpp",
          "begin": "\\G ?",
          "end": "((?:\\{|(?=;)))",
          "endCaptures": {
            "1": {
              "name": "punctuation.section.block.begin.bracket.curly.enum.cpp",
            },
          },
          "patterns": [
            {
              "include": "$base",
            },
          ],
        },
        {
          "name": "meta.body.enum.cpp",
          "begin": "(?<=\\{)",
          "end": "(\\})",
          "endCaptures": {
            "1": {
              "name": "punctuation.section.block.end.bracket.curly.enum.cpp",
            },
          },
          "patterns": [
            {
              "include": "#enumerator_list",
            },
            {
              "include": "#comments_context",
            },
            {
              "include": "#comma",
            },
            {
              "include": "#semicolon",
            },
          ],
        },
        {
          "name": "meta.tail.enum.cpp",
          "begin": "(?<=})[\\s\\n]*",
          "end": "[\\s\\n]*(?=;)",
          "patterns": [
            {
              "include": "$base",
            },
          ],
        },
      ],
    },
    "inhertance_context": {
      "patterns": [
        {
          "match": ",",
          "name": "comma.cpp punctuation.separator.delimiter.inhertance.cpp",
        },
        {
          "match": "(?<!\\w)(?:private|protected|public)(?!\\w)",
          "name": "storage.type.modifier.access.$0.cpp",
        },
        {
          "match": "(?<!\\w)virtual(?!\\w)",
          "name": "storage.type.modifier.virtual.cpp",
        },
        {
          "match": "(?<=virtual|private|protected|public|,|:)\\s*(?!(?:(?:private|protected|public)|virtual))((?-mix:(?:\\s*(?<!\\w)(?=\\w)(?!(?:not|compl|sizeof|new|delete|not_eq|bitand|xor|bitor|and|or|throw|and_eq|xor_eq|or_eq|alignof|alignas|typeid|noexcept|static_cast|dynamic_cast|const_cast|reinterpret_cast|while|for|do|if|else|goto|switch|try|catch|return|break|case|continue|default|NULL|true|false|nullptr|const|static|volatile|register|restrict|extern|inline|constexpr|mutable|friend|explicit|virtual|final|override|volatile|const|noexcept|constexpr|mutable|constexpr|consteval|private|protected|public|if|elif|else|endif|ifdef|ifndef|define|undef|include|line|error|warning|pragma|_Pragma|defined|__has_include|__has_cpp_attribute|this|template|namespace|using|operator|typedef|decltype|typename|asm|__asm__|concept|requires|export|thread_local|atomic_cancel|atomic_commit|atomic_noexcept|co_await|co_return|co_yield|import|module|reflexpr|synchronized|audit|axiom|transaction_safe|transaction_safe_dynamic)(?![\\w])\\s*)(?:(?:(?:(?:(?:\\[\\[.*?\\]\\]|__attribute(?:__)?\\(\\(.*?\\)\\))|__declspec\\(.*?\\))|alignas\\(.*?\\))(?!\\))))?\\s*(?:(?:(?:short|signed|unsigned|long)|(?:class|struct|union|enum))\\s+)*(?:(?:(?:(?:(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U000[0-9a-fA-F]))(?:(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U000[0-9a-fA-F])))*\\s*(?:(?-mix:(?:(?<!<)<(?!<)(?:[\\s<>:,\\w])*>\\s*)))?::)*\\s*)(?:(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U000[0-9a-fA-F]))(?:(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U000[0-9a-fA-F])))*)\\s*(?:(?:(?<!<)<(?!<)(?:[\\s<>:,\\w])*>\\s*))?(?:::)))?\\s*(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U000[0-9a-fA-F]))(?:(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U000[0-9a-fA-F])))*(?:(?-mix:(?:(?<!<)<(?!<)(?:[\\s<>:,\\w])*>\\s*)))?(?![\\w<:.]))))",
          "captures": {
            "1": {
              "name": "entity.name.type.inherited.cpp",
            },
          },
        },
      ],
    },
    "class_block": {
      "name": "meta.block.class.cpp",
      "begin": "((((?<!\\w)class(?!\\w))(?:(?:\\s+|((?:(?:(?:\\[\\[.*?\\]\\]|__attribute(?:__)?\\(\\(.*?\\)\\))|__declspec\\(.*?\\))|alignas\\(.*?\\))(?!\\))))|(?={))(?:((?:(?:(?:\\[\\[.*?\\]\\]|__attribute(?:__)?\\(\\(.*?\\)\\))|__declspec\\(.*?\\))|alignas\\(.*?\\))(?!\\))))?\\s*((?<!\\w)(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U000[0-9a-fA-F]))(?:(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U000[0-9a-fA-F])))*(?!\\w))?(?:\\s+(final)\\s*)?(?:\\s*(:)((?:\\s*(?:,)?\\s*(?:(?:private|protected|public))?\\s*(?:\\s*(?:,)?\\s*(?!(?:private|protected|public))(?-mix:(?:\\s*(?<!\\w)(?=\\w)(?!(?:not|compl|sizeof|new|delete|not_eq|bitand|xor|bitor|and|or|throw|and_eq|xor_eq|or_eq|alignof|alignas|typeid|noexcept|static_cast|dynamic_cast|const_cast|reinterpret_cast|while|for|do|if|else|goto|switch|try|catch|return|break|case|continue|default|NULL|true|false|nullptr|const|static|volatile|register|restrict|extern|inline|constexpr|mutable|friend|explicit|virtual|final|override|volatile|const|noexcept|constexpr|mutable|constexpr|consteval|private|protected|public|if|elif|else|endif|ifdef|ifndef|define|undef|include|line|error|warning|pragma|_Pragma|defined|__has_include|__has_cpp_attribute|this|template|namespace|using|operator|typedef|decltype|typename|asm|__asm__|concept|requires|export|thread_local|atomic_cancel|atomic_commit|atomic_noexcept|co_await|co_return|co_yield|import|module|reflexpr|synchronized|audit|axiom|transaction_safe|transaction_safe_dynamic)(?![\\w])\\s*)(?:(?:(?:(?:(?:\\[\\[.*?\\]\\]|__attribute(?:__)?\\(\\(.*?\\)\\))|__declspec\\(.*?\\))|alignas\\(.*?\\))(?!\\))))?\\s*(?:(?:(?:short|signed|unsigned|long)|(?:class|struct|union|enum))\\s+)*(?:(?:(?:(?:(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U000[0-9a-fA-F]))(?:(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U000[0-9a-fA-F])))*\\s*(?:(?-mix:(?:(?<!<)<(?!<)(?:[\\s<>:,\\w])*>\\s*)))?::)*\\s*)(?:(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U000[0-9a-fA-F]))(?:(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U000[0-9a-fA-F])))*)\\s*(?:(?:(?<!<)<(?!<)(?:[\\s<>:,\\w])*>\\s*))?(?:::)))?\\s*(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U000[0-9a-fA-F]))(?:(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U000[0-9a-fA-F])))*(?:(?-mix:(?:(?<!<)<(?!<)(?:[\\s<>:,\\w])*>\\s*)))?(?![\\w<:.]))))+)*))?))",
      "beginCaptures": {
        "1": {
          "name": "meta.head.class.cpp",
        },
        "3": {
          "name": "storage.type.$3.cpp",
        },
        "4": {
          "patterns": [
            {
              "include": "#attributes_context",
            },
            {
              "include": "#number_literal",
            },
          ],
        },
        "5": {
          "patterns": [
            {
              "include": "#attributes_context",
            },
            {
              "include": "#number_literal",
            },
          ],
        },
        "6": {
          "name": "entity.name.type.$3.cpp",
        },
        "7": {
          "name": "storage.type.modifier.final.cpp",
        },
        "8": {
          "name": "colon.cpp punctuation.separator.inhertance.cpp",
        },
        "9": {
          "patterns": [
            {
              "include": "#inhertance_context",
            },
          ],
        },
      },
      "end": "(?:(?:(?<=})\\s*(;)|(;))|(?=[;>\\[\\]=]))",
      "endCaptures": {
        "1": {
          "name": "punctuation.terminator.statement.cpp",
        },
        "2": {
          "name": "punctuation.terminator.statement.cpp",
        },
      },
      "patterns": [
        {
          "name": "meta.head.class.cpp",
          "begin": "\\G ?",
          "end": "((?:\\{|(?=;)))",
          "endCaptures": {
            "1": {
              "name": "punctuation.section.block.begin.bracket.curly.class.cpp",
            },
          },
          "patterns": [
            {
              "include": "#preprocessor_context",
            },
            {
              "include": "#inhertance_context",
            },
            {
              "include": "#template_call_range",
            },
            {
              "include": "#comments_context",
            },
          ],
        },
        {
          "name": "meta.body.class.cpp",
          "begin": "(?<=\\{)",
          "end": "(\\})",
          "endCaptures": {
            "1": {
              "name": "punctuation.section.block.end.bracket.curly.class.cpp",
            },
          },
          "patterns": [
            {
              "include": "#function_pointer",
            },
            {
              "include": "#constructor_context",
            },
            {
              "include": "$base",
            },
          ],
        },
        {
          "name": "meta.tail.class.cpp",
          "begin": "(?<=})[\\s\\n]*",
          "end": "[\\s\\n]*(?=;)",
          "patterns": [
            {
              "include": "$base",
            },
          ],
        },
      ],
    },
    "struct_block": {
      "name": "meta.block.struct.cpp",
      "begin": "((((?<!\\w)struct(?!\\w))(?:(?:\\s+|((?:(?:(?:\\[\\[.*?\\]\\]|__attribute(?:__)?\\(\\(.*?\\)\\))|__declspec\\(.*?\\))|alignas\\(.*?\\))(?!\\))))|(?={))(?:((?:(?:(?:\\[\\[.*?\\]\\]|__attribute(?:__)?\\(\\(.*?\\)\\))|__declspec\\(.*?\\))|alignas\\(.*?\\))(?!\\))))?\\s*((?<!\\w)(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U000[0-9a-fA-F]))(?:(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U000[0-9a-fA-F])))*(?!\\w))?(?:\\s+(final)\\s*)?(?:\\s*(:)((?:\\s*(?:,)?\\s*(?:(?:private|protected|public))?\\s*(?:\\s*(?:,)?\\s*(?!(?:private|protected|public))(?-mix:(?:\\s*(?<!\\w)(?=\\w)(?!(?:not|compl|sizeof|new|delete|not_eq|bitand|xor|bitor|and|or|throw|and_eq|xor_eq|or_eq|alignof|alignas|typeid|noexcept|static_cast|dynamic_cast|const_cast|reinterpret_cast|while|for|do|if|else|goto|switch|try|catch|return|break|case|continue|default|NULL|true|false|nullptr|const|static|volatile|register|restrict|extern|inline|constexpr|mutable|friend|explicit|virtual|final|override|volatile|const|noexcept|constexpr|mutable|constexpr|consteval|private|protected|public|if|elif|else|endif|ifdef|ifndef|define|undef|include|line|error|warning|pragma|_Pragma|defined|__has_include|__has_cpp_attribute|this|template|namespace|using|operator|typedef|decltype|typename|asm|__asm__|concept|requires|export|thread_local|atomic_cancel|atomic_commit|atomic_noexcept|co_await|co_return|co_yield|import|module|reflexpr|synchronized|audit|axiom|transaction_safe|transaction_safe_dynamic)(?![\\w])\\s*)(?:(?:(?:(?:(?:\\[\\[.*?\\]\\]|__attribute(?:__)?\\(\\(.*?\\)\\))|__declspec\\(.*?\\))|alignas\\(.*?\\))(?!\\))))?\\s*(?:(?:(?:short|signed|unsigned|long)|(?:class|struct|union|enum))\\s+)*(?:(?:(?:(?:(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U000[0-9a-fA-F]))(?:(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U000[0-9a-fA-F])))*\\s*(?:(?-mix:(?:(?<!<)<(?!<)(?:[\\s<>:,\\w])*>\\s*)))?::)*\\s*)(?:(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U000[0-9a-fA-F]))(?:(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U000[0-9a-fA-F])))*)\\s*(?:(?:(?<!<)<(?!<)(?:[\\s<>:,\\w])*>\\s*))?(?:::)))?\\s*(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U000[0-9a-fA-F]))(?:(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U000[0-9a-fA-F])))*(?:(?-mix:(?:(?<!<)<(?!<)(?:[\\s<>:,\\w])*>\\s*)))?(?![\\w<:.]))))+)*))?))",
      "beginCaptures": {
        "1": {
          "name": "meta.head.struct.cpp",
        },
        "3": {
          "name": "storage.type.$3.cpp",
        },
        "4": {
          "patterns": [
            {
              "include": "#attributes_context",
            },
            {
              "include": "#number_literal",
            },
          ],
        },
        "5": {
          "patterns": [
            {
              "include": "#attributes_context",
            },
            {
              "include": "#number_literal",
            },
          ],
        },
        "6": {
          "name": "entity.name.type.$3.cpp",
        },
        "7": {
          "name": "storage.type.modifier.final.cpp",
        },
        "8": {
          "name": "colon.cpp punctuation.separator.inhertance.cpp",
        },
        "9": {
          "patterns": [
            {
              "include": "#inhertance_context",
            },
          ],
        },
      },
      "end": "(?:(?:(?<=})\\s*(;)|(;))|(?=[;>\\[\\]=]))",
      "endCaptures": {
        "1": {
          "name": "punctuation.terminator.statement.cpp",
        },
        "2": {
          "name": "punctuation.terminator.statement.cpp",
        },
      },
      "patterns": [
        {
          "name": "meta.head.struct.cpp",
          "begin": "\\G ?",
          "end": "((?:\\{|(?=;)))",
          "endCaptures": {
            "1": {
              "name": "punctuation.section.block.begin.bracket.curly.struct.cpp",
            },
          },
          "patterns": [
            {
              "include": "#preprocessor_context",
            },
            {
              "include": "#inhertance_context",
            },
            {
              "include": "#template_call_range",
            },
            {
              "include": "#comments_context",
            },
          ],
        },
        {
          "name": "meta.body.struct.cpp",
          "begin": "(?<=\\{)",
          "end": "(\\})",
          "endCaptures": {
            "1": {
              "name": "punctuation.section.block.end.bracket.curly.struct.cpp",
            },
          },
          "patterns": [
            {
              "include": "#function_pointer",
            },
            {
              "include": "#constructor_context",
            },
            {
              "include": "$base",
            },
          ],
        },
        {
          "name": "meta.tail.struct.cpp",
          "begin": "(?<=})[\\s\\n]*",
          "end": "[\\s\\n]*(?=;)",
          "patterns": [
            {
              "include": "$base",
            },
          ],
        },
      ],
    },
    "union_block": {
      "name": "meta.block.union.cpp",
      "begin": "((((?<!\\w)union(?!\\w))(?:(?:\\s+|((?:(?:(?:\\[\\[.*?\\]\\]|__attribute(?:__)?\\(\\(.*?\\)\\))|__declspec\\(.*?\\))|alignas\\(.*?\\))(?!\\))))|(?={))(?:((?:(?:(?:\\[\\[.*?\\]\\]|__attribute(?:__)?\\(\\(.*?\\)\\))|__declspec\\(.*?\\))|alignas\\(.*?\\))(?!\\))))?\\s*((?<!\\w)(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U000[0-9a-fA-F]))(?:(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U000[0-9a-fA-F])))*(?!\\w))?(?:\\s+(final)\\s*)?(?:\\s*(:)((?:\\s*(?:,)?\\s*(?:(?:private|protected|public))?\\s*(?:\\s*(?:,)?\\s*(?!(?:private|protected|public))(?-mix:(?:\\s*(?<!\\w)(?=\\w)(?!(?:not|compl|sizeof|new|delete|not_eq|bitand|xor|bitor|and|or|throw|and_eq|xor_eq|or_eq|alignof|alignas|typeid|noexcept|static_cast|dynamic_cast|const_cast|reinterpret_cast|while|for|do|if|else|goto|switch|try|catch|return|break|case|continue|default|NULL|true|false|nullptr|const|static|volatile|register|restrict|extern|inline|constexpr|mutable|friend|explicit|virtual|final|override|volatile|const|noexcept|constexpr|mutable|constexpr|consteval|private|protected|public|if|elif|else|endif|ifdef|ifndef|define|undef|include|line|error|warning|pragma|_Pragma|defined|__has_include|__has_cpp_attribute|this|template|namespace|using|operator|typedef|decltype|typename|asm|__asm__|concept|requires|export|thread_local|atomic_cancel|atomic_commit|atomic_noexcept|co_await|co_return|co_yield|import|module|reflexpr|synchronized|audit|axiom|transaction_safe|transaction_safe_dynamic)(?![\\w])\\s*)(?:(?:(?:(?:(?:\\[\\[.*?\\]\\]|__attribute(?:__)?\\(\\(.*?\\)\\))|__declspec\\(.*?\\))|alignas\\(.*?\\))(?!\\))))?\\s*(?:(?:(?:short|signed|unsigned|long)|(?:class|struct|union|enum))\\s+)*(?:(?:(?:(?:(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U000[0-9a-fA-F]))(?:(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U000[0-9a-fA-F])))*\\s*(?:(?-mix:(?:(?<!<)<(?!<)(?:[\\s<>:,\\w])*>\\s*)))?::)*\\s*)(?:(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U000[0-9a-fA-F]))(?:(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U000[0-9a-fA-F])))*)\\s*(?:(?:(?<!<)<(?!<)(?:[\\s<>:,\\w])*>\\s*))?(?:::)))?\\s*(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U000[0-9a-fA-F]))(?:(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U000[0-9a-fA-F])))*(?:(?-mix:(?:(?<!<)<(?!<)(?:[\\s<>:,\\w])*>\\s*)))?(?![\\w<:.]))))+)*))?))",
      "beginCaptures": {
        "1": {
          "name": "meta.head.union.cpp",
        },
        "3": {
          "name": "storage.type.$3.cpp",
        },
        "4": {
          "patterns": [
            {
              "include": "#attributes_context",
            },
            {
              "include": "#number_literal",
            },
          ],
        },
        "5": {
          "patterns": [
            {
              "include": "#attributes_context",
            },
            {
              "include": "#number_literal",
            },
          ],
        },
        "6": {
          "name": "entity.name.type.$3.cpp",
        },
        "7": {
          "name": "storage.type.modifier.final.cpp",
        },
        "8": {
          "name": "colon.cpp punctuation.separator.inhertance.cpp",
        },
        "9": {
          "patterns": [
            {
              "include": "#inhertance_context",
            },
          ],
        },
      },
      "end": "(?:(?:(?<=})\\s*(;)|(;))|(?=[;>\\[\\]=]))",
      "endCaptures": {
        "1": {
          "name": "punctuation.terminator.statement.cpp",
        },
        "2": {
          "name": "punctuation.terminator.statement.cpp",
        },
      },
      "patterns": [
        {
          "name": "meta.head.union.cpp",
          "begin": "\\G ?",
          "end": "((?:\\{|(?=;)))",
          "endCaptures": {
            "1": {
              "name": "punctuation.section.block.begin.bracket.curly.union.cpp",
            },
          },
          "patterns": [
            {
              "include": "#preprocessor_context",
            },
            {
              "include": "#inhertance_context",
            },
            {
              "include": "#template_call_range",
            },
            {
              "include": "#comments_context",
            },
          ],
        },
        {
          "name": "meta.body.union.cpp",
          "begin": "(?<=\\{)",
          "end": "(\\})",
          "endCaptures": {
            "1": {
              "name": "punctuation.section.block.end.bracket.curly.union.cpp",
            },
          },
          "patterns": [
            {
              "include": "#function_pointer",
            },
            {
              "include": "#constructor_context",
            },
            {
              "include": "$base",
            },
          ],
        },
        {
          "name": "meta.tail.union.cpp",
          "begin": "(?<=})[\\s\\n]*",
          "end": "[\\s\\n]*(?=;)",
          "patterns": [
            {
              "include": "$base",
            },
          ],
        },
      ],
    },
    "extern_block": {
      "name": "meta.block.extern.cpp",
      "begin": "((\\bextern)(?=\\s*\\\"))",
      "beginCaptures": {
        "1": {
          "name": "meta.head.extern.cpp",
        },
        "2": {
          "name": "storage.type.extern.cpp",
        },
      },
      "end": "(?:(?:(?<=})\\s*(;)|(;))|(?=[;>\\[\\]=]))",
      "endCaptures": {
        "1": {
          "name": "punctuation.terminator.statement.cpp",
        },
        "2": {
          "name": "punctuation.terminator.statement.cpp",
        },
      },
      "patterns": [
        {
          "name": "meta.head.extern.cpp",
          "begin": "\\G ?",
          "end": "((?:\\{|(?=;)))",
          "endCaptures": {
            "1": {
              "name": "punctuation.section.block.begin.bracket.curly.extern.cpp",
            },
          },
          "patterns": [
            {
              "include": "$base",
            },
          ],
        },
        {
          "name": "meta.body.extern.cpp",
          "begin": "(?<=\\{)",
          "end": "(\\})",
          "endCaptures": {
            "1": {
              "name": "punctuation.section.block.end.bracket.curly.extern.cpp",
            },
          },
          "patterns": [
            {
              "include": "$base",
            },
          ],
        },
        {
          "name": "meta.tail.extern.cpp",
          "begin": "(?<=})[\\s\\n]*",
          "end": "[\\s\\n]*(?=;)",
          "patterns": [
            {
              "include": "$base",
            },
          ],
        },
        {
          "include": "$base",
        },
      ],
    },
    "typedef_class": {
      "begin": "((?<!\\w)typedef(?!\\w))\\s*(?=(?<!\\w)class(?!\\w))",
      "beginCaptures": {
        "1": {
          "name": "keyword.other.typedef.cpp",
        },
      },
      "end": "(?<=;)",
      "patterns": [
        {
          "name": "meta.block.class.cpp",
          "begin": "((((?<!\\w)class(?!\\w))(?:(?:\\s+|((?:(?:(?:\\[\\[.*?\\]\\]|__attribute(?:__)?\\(\\(.*?\\)\\))|__declspec\\(.*?\\))|alignas\\(.*?\\))(?!\\))))|(?={))(?:((?:(?:(?:\\[\\[.*?\\]\\]|__attribute(?:__)?\\(\\(.*?\\)\\))|__declspec\\(.*?\\))|alignas\\(.*?\\))(?!\\))))?\\s*((?<!\\w)(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U000[0-9a-fA-F]))(?:(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U000[0-9a-fA-F])))*(?!\\w))?(?:\\s+(final)\\s*)?(?:\\s*(:)((?:\\s*(?:,)?\\s*(?:(?:private|protected|public))?\\s*(?:\\s*(?:,)?\\s*(?!(?:private|protected|public))(?-mix:(?:\\s*(?<!\\w)(?=\\w)(?!(?:not|compl|sizeof|new|delete|not_eq|bitand|xor|bitor|and|or|throw|and_eq|xor_eq|or_eq|alignof|alignas|typeid|noexcept|static_cast|dynamic_cast|const_cast|reinterpret_cast|while|for|do|if|else|goto|switch|try|catch|return|break|case|continue|default|NULL|true|false|nullptr|const|static|volatile|register|restrict|extern|inline|constexpr|mutable|friend|explicit|virtual|final|override|volatile|const|noexcept|constexpr|mutable|constexpr|consteval|private|protected|public|if|elif|else|endif|ifdef|ifndef|define|undef|include|line|error|warning|pragma|_Pragma|defined|__has_include|__has_cpp_attribute|this|template|namespace|using|operator|typedef|decltype|typename|asm|__asm__|concept|requires|export|thread_local|atomic_cancel|atomic_commit|atomic_noexcept|co_await|co_return|co_yield|import|module|reflexpr|synchronized|audit|axiom|transaction_safe|transaction_safe_dynamic)(?![\\w])\\s*)(?:(?:(?:(?:(?:\\[\\[.*?\\]\\]|__attribute(?:__)?\\(\\(.*?\\)\\))|__declspec\\(.*?\\))|alignas\\(.*?\\))(?!\\))))?\\s*(?:(?:(?:short|signed|unsigned|long)|(?:class|struct|union|enum))\\s+)*(?:(?:(?:(?:(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U000[0-9a-fA-F]))(?:(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U000[0-9a-fA-F])))*\\s*(?:(?-mix:(?:(?<!<)<(?!<)(?:[\\s<>:,\\w])*>\\s*)))?::)*\\s*)(?:(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U000[0-9a-fA-F]))(?:(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U000[0-9a-fA-F])))*)\\s*(?:(?:(?<!<)<(?!<)(?:[\\s<>:,\\w])*>\\s*))?(?:::)))?\\s*(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U000[0-9a-fA-F]))(?:(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U000[0-9a-fA-F])))*(?:(?-mix:(?:(?<!<)<(?!<)(?:[\\s<>:,\\w])*>\\s*)))?(?![\\w<:.]))))+)*))?))",
          "beginCaptures": {
            "1": {
              "name": "meta.head.class.cpp",
            },
            "3": {
              "name": "storage.type.$3.cpp",
            },
            "4": {
              "patterns": [
                {
                  "include": "#attributes_context",
                },
                {
                  "include": "#number_literal",
                },
              ],
            },
            "5": {
              "patterns": [
                {
                  "include": "#attributes_context",
                },
                {
                  "include": "#number_literal",
                },
              ],
            },
            "6": {
              "name": "entity.name.type.$3.cpp",
            },
            "7": {
              "name": "storage.type.modifier.final.cpp",
            },
            "8": {
              "name": "colon.cpp punctuation.separator.inhertance.cpp",
            },
            "9": {
              "patterns": [
                {
                  "include": "#inhertance_context",
                },
              ],
            },
          },
          "end": "(?:(?:(?<=})\\s*(;)|(;))|(?=[;>\\[\\]=]))",
          "endCaptures": {
            "1": {
              "name": "punctuation.terminator.statement.cpp",
            },
            "2": {
              "name": "punctuation.terminator.statement.cpp",
            },
          },
          "patterns": [
            {
              "name": "meta.head.class.cpp",
              "begin": "\\G ?",
              "end": "((?:\\{|(?=;)))",
              "endCaptures": {
                "1": {
                  "name": "punctuation.section.block.begin.bracket.curly.class.cpp",
                },
              },
              "patterns": [
                {
                  "include": "#preprocessor_context",
                },
                {
                  "include": "#inhertance_context",
                },
                {
                  "include": "#template_call_range",
                },
                {
                  "include": "#comments_context",
                },
              ],
            },
            {
              "name": "meta.body.class.cpp",
              "begin": "(?<=\\{)",
              "end": "(\\})",
              "endCaptures": {
                "1": {
                  "name": "punctuation.section.block.end.bracket.curly.class.cpp",
                },
              },
              "patterns": [
                {
                  "include": "#function_pointer",
                },
                {
                  "include": "#constructor_context",
                },
                {
                  "include": "$base",
                },
              ],
            },
            {
              "name": "meta.tail.class.cpp",
              "begin": "(?<=})[\\s\\n]*",
              "end": "[\\s\\n]*(?=;)",
              "patterns": [
                {
                  "match": "(((?:\\*\\s*)*)((?:\\&\\s*?){0,2})\\s*)((?<!\\w)(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U000[0-9a-fA-F]))(?:(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U000[0-9a-fA-F])))*(?!\\w))",
                  "captures": {
                    "2": {
                      "name": "storage.modifier.pointer.cpp",
                    },
                    "3": {
                      "name": "storage.modifier.reference.cpp",
                    },
                    "4": {
                      "name": "entity.name.type.alias.cpp",
                    },
                  },
                },
                {
                  "match": ",",
                },
              ],
            },
          ],
        },
      ],
    },
    "typedef_struct": {
      "begin": "((?<!\\w)typedef(?!\\w))\\s*(?=(?<!\\w)struct(?!\\w))",
      "beginCaptures": {
        "1": {
          "name": "keyword.other.typedef.cpp",
        },
      },
      "end": "(?<=;)",
      "patterns": [
        {
          "name": "meta.block.struct.cpp",
          "begin": "((((?<!\\w)struct(?!\\w))(?:(?:\\s+|((?:(?:(?:\\[\\[.*?\\]\\]|__attribute(?:__)?\\(\\(.*?\\)\\))|__declspec\\(.*?\\))|alignas\\(.*?\\))(?!\\))))|(?={))(?:((?:(?:(?:\\[\\[.*?\\]\\]|__attribute(?:__)?\\(\\(.*?\\)\\))|__declspec\\(.*?\\))|alignas\\(.*?\\))(?!\\))))?\\s*((?<!\\w)(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U000[0-9a-fA-F]))(?:(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U000[0-9a-fA-F])))*(?!\\w))?(?:\\s+(final)\\s*)?(?:\\s*(:)((?:\\s*(?:,)?\\s*(?:(?:private|protected|public))?\\s*(?:\\s*(?:,)?\\s*(?!(?:private|protected|public))(?-mix:(?:\\s*(?<!\\w)(?=\\w)(?!(?:not|compl|sizeof|new|delete|not_eq|bitand|xor|bitor|and|or|throw|and_eq|xor_eq|or_eq|alignof|alignas|typeid|noexcept|static_cast|dynamic_cast|const_cast|reinterpret_cast|while|for|do|if|else|goto|switch|try|catch|return|break|case|continue|default|NULL|true|false|nullptr|const|static|volatile|register|restrict|extern|inline|constexpr|mutable|friend|explicit|virtual|final|override|volatile|const|noexcept|constexpr|mutable|constexpr|consteval|private|protected|public|if|elif|else|endif|ifdef|ifndef|define|undef|include|line|error|warning|pragma|_Pragma|defined|__has_include|__has_cpp_attribute|this|template|namespace|using|operator|typedef|decltype|typename|asm|__asm__|concept|requires|export|thread_local|atomic_cancel|atomic_commit|atomic_noexcept|co_await|co_return|co_yield|import|module|reflexpr|synchronized|audit|axiom|transaction_safe|transaction_safe_dynamic)(?![\\w])\\s*)(?:(?:(?:(?:(?:\\[\\[.*?\\]\\]|__attribute(?:__)?\\(\\(.*?\\)\\))|__declspec\\(.*?\\))|alignas\\(.*?\\))(?!\\))))?\\s*(?:(?:(?:short|signed|unsigned|long)|(?:class|struct|union|enum))\\s+)*(?:(?:(?:(?:(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U000[0-9a-fA-F]))(?:(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U000[0-9a-fA-F])))*\\s*(?:(?-mix:(?:(?<!<)<(?!<)(?:[\\s<>:,\\w])*>\\s*)))?::)*\\s*)(?:(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U000[0-9a-fA-F]))(?:(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U000[0-9a-fA-F])))*)\\s*(?:(?:(?<!<)<(?!<)(?:[\\s<>:,\\w])*>\\s*))?(?:::)))?\\s*(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U000[0-9a-fA-F]))(?:(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U000[0-9a-fA-F])))*(?:(?-mix:(?:(?<!<)<(?!<)(?:[\\s<>:,\\w])*>\\s*)))?(?![\\w<:.]))))+)*))?))",
          "beginCaptures": {
            "1": {
              "name": "meta.head.struct.cpp",
            },
            "3": {
              "name": "storage.type.$3.cpp",
            },
            "4": {
              "patterns": [
                {
                  "include": "#attributes_context",
                },
                {
                  "include": "#number_literal",
                },
              ],
            },
            "5": {
              "patterns": [
                {
                  "include": "#attributes_context",
                },
                {
                  "include": "#number_literal",
                },
              ],
            },
            "6": {
              "name": "entity.name.type.$3.cpp",
            },
            "7": {
              "name": "storage.type.modifier.final.cpp",
            },
            "8": {
              "name": "colon.cpp punctuation.separator.inhertance.cpp",
            },
            "9": {
              "patterns": [
                {
                  "include": "#inhertance_context",
                },
              ],
            },
          },
          "end": "(?:(?:(?<=})\\s*(;)|(;))|(?=[;>\\[\\]=]))",
          "endCaptures": {
            "1": {
              "name": "punctuation.terminator.statement.cpp",
            },
            "2": {
              "name": "punctuation.terminator.statement.cpp",
            },
          },
          "patterns": [
            {
              "name": "meta.head.struct.cpp",
              "begin": "\\G ?",
              "end": "((?:\\{|(?=;)))",
              "endCaptures": {
                "1": {
                  "name": "punctuation.section.block.begin.bracket.curly.struct.cpp",
                },
              },
              "patterns": [
                {
                  "include": "#preprocessor_context",
                },
                {
                  "include": "#inhertance_context",
                },
                {
                  "include": "#template_call_range",
                },
                {
                  "include": "#comments_context",
                },
              ],
            },
            {
              "name": "meta.body.struct.cpp",
              "begin": "(?<=\\{)",
              "end": "(\\})",
              "endCaptures": {
                "1": {
                  "name": "punctuation.section.block.end.bracket.curly.struct.cpp",
                },
              },
              "patterns": [
                {
                  "include": "#function_pointer",
                },
                {
                  "include": "#constructor_context",
                },
                {
                  "include": "$base",
                },
              ],
            },
            {
              "name": "meta.tail.struct.cpp",
              "begin": "(?<=})[\\s\\n]*",
              "end": "[\\s\\n]*(?=;)",
              "patterns": [
                {
                  "match": "(((?:\\*\\s*)*)((?:\\&\\s*?){0,2})\\s*)((?<!\\w)(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U000[0-9a-fA-F]))(?:(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U000[0-9a-fA-F])))*(?!\\w))",
                  "captures": {
                    "2": {
                      "name": "storage.modifier.pointer.cpp",
                    },
                    "3": {
                      "name": "storage.modifier.reference.cpp",
                    },
                    "4": {
                      "name": "entity.name.type.alias.cpp",
                    },
                  },
                },
                {
                  "match": ",",
                },
              ],
            },
          ],
        },
      ],
    },
    "typedef_union": {
      "begin": "((?<!\\w)typedef(?!\\w))\\s*(?=(?<!\\w)union(?!\\w))",
      "beginCaptures": {
        "1": {
          "name": "keyword.other.typedef.cpp",
        },
      },
      "end": "(?<=;)",
      "patterns": [
        {
          "name": "meta.block.union.cpp",
          "begin": "((((?<!\\w)union(?!\\w))(?:(?:\\s+|((?:(?:(?:\\[\\[.*?\\]\\]|__attribute(?:__)?\\(\\(.*?\\)\\))|__declspec\\(.*?\\))|alignas\\(.*?\\))(?!\\))))|(?={))(?:((?:(?:(?:\\[\\[.*?\\]\\]|__attribute(?:__)?\\(\\(.*?\\)\\))|__declspec\\(.*?\\))|alignas\\(.*?\\))(?!\\))))?\\s*((?<!\\w)(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U000[0-9a-fA-F]))(?:(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U000[0-9a-fA-F])))*(?!\\w))?(?:\\s+(final)\\s*)?(?:\\s*(:)((?:\\s*(?:,)?\\s*(?:(?:private|protected|public))?\\s*(?:\\s*(?:,)?\\s*(?!(?:private|protected|public))(?-mix:(?:\\s*(?<!\\w)(?=\\w)(?!(?:not|compl|sizeof|new|delete|not_eq|bitand|xor|bitor|and|or|throw|and_eq|xor_eq|or_eq|alignof|alignas|typeid|noexcept|static_cast|dynamic_cast|const_cast|reinterpret_cast|while|for|do|if|else|goto|switch|try|catch|return|break|case|continue|default|NULL|true|false|nullptr|const|static|volatile|register|restrict|extern|inline|constexpr|mutable|friend|explicit|virtual|final|override|volatile|const|noexcept|constexpr|mutable|constexpr|consteval|private|protected|public|if|elif|else|endif|ifdef|ifndef|define|undef|include|line|error|warning|pragma|_Pragma|defined|__has_include|__has_cpp_attribute|this|template|namespace|using|operator|typedef|decltype|typename|asm|__asm__|concept|requires|export|thread_local|atomic_cancel|atomic_commit|atomic_noexcept|co_await|co_return|co_yield|import|module|reflexpr|synchronized|audit|axiom|transaction_safe|transaction_safe_dynamic)(?![\\w])\\s*)(?:(?:(?:(?:(?:\\[\\[.*?\\]\\]|__attribute(?:__)?\\(\\(.*?\\)\\))|__declspec\\(.*?\\))|alignas\\(.*?\\))(?!\\))))?\\s*(?:(?:(?:short|signed|unsigned|long)|(?:class|struct|union|enum))\\s+)*(?:(?:(?:(?:(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U000[0-9a-fA-F]))(?:(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U000[0-9a-fA-F])))*\\s*(?:(?-mix:(?:(?<!<)<(?!<)(?:[\\s<>:,\\w])*>\\s*)))?::)*\\s*)(?:(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U000[0-9a-fA-F]))(?:(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U000[0-9a-fA-F])))*)\\s*(?:(?:(?<!<)<(?!<)(?:[\\s<>:,\\w])*>\\s*))?(?:::)))?\\s*(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U000[0-9a-fA-F]))(?:(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U000[0-9a-fA-F])))*(?:(?-mix:(?:(?<!<)<(?!<)(?:[\\s<>:,\\w])*>\\s*)))?(?![\\w<:.]))))+)*))?))",
          "beginCaptures": {
            "1": {
              "name": "meta.head.union.cpp",
            },
            "3": {
              "name": "storage.type.$3.cpp",
            },
            "4": {
              "patterns": [
                {
                  "include": "#attributes_context",
                },
                {
                  "include": "#number_literal",
                },
              ],
            },
            "5": {
              "patterns": [
                {
                  "include": "#attributes_context",
                },
                {
                  "include": "#number_literal",
                },
              ],
            },
            "6": {
              "name": "entity.name.type.$3.cpp",
            },
            "7": {
              "name": "storage.type.modifier.final.cpp",
            },
            "8": {
              "name": "colon.cpp punctuation.separator.inhertance.cpp",
            },
            "9": {
              "patterns": [
                {
                  "include": "#inhertance_context",
                },
              ],
            },
          },
          "end": "(?:(?:(?<=})\\s*(;)|(;))|(?=[;>\\[\\]=]))",
          "endCaptures": {
            "1": {
              "name": "punctuation.terminator.statement.cpp",
            },
            "2": {
              "name": "punctuation.terminator.statement.cpp",
            },
          },
          "patterns": [
            {
              "name": "meta.head.union.cpp",
              "begin": "\\G ?",
              "end": "((?:\\{|(?=;)))",
              "endCaptures": {
                "1": {
                  "name": "punctuation.section.block.begin.bracket.curly.union.cpp",
                },
              },
              "patterns": [
                {
                  "include": "#preprocessor_context",
                },
                {
                  "include": "#inhertance_context",
                },
                {
                  "include": "#template_call_range",
                },
                {
                  "include": "#comments_context",
                },
              ],
            },
            {
              "name": "meta.body.union.cpp",
              "begin": "(?<=\\{)",
              "end": "(\\})",
              "endCaptures": {
                "1": {
                  "name": "punctuation.section.block.end.bracket.curly.union.cpp",
                },
              },
              "patterns": [
                {
                  "include": "#function_pointer",
                },
                {
                  "include": "#constructor_context",
                },
                {
                  "include": "$base",
                },
              ],
            },
            {
              "name": "meta.tail.union.cpp",
              "begin": "(?<=})[\\s\\n]*",
              "end": "[\\s\\n]*(?=;)",
              "patterns": [
                {
                  "match": "(((?:\\*\\s*)*)((?:\\&\\s*?){0,2})\\s*)((?<!\\w)(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U000[0-9a-fA-F]))(?:(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U000[0-9a-fA-F])))*(?!\\w))",
                  "captures": {
                    "2": {
                      "name": "storage.modifier.pointer.cpp",
                    },
                    "3": {
                      "name": "storage.modifier.reference.cpp",
                    },
                    "4": {
                      "name": "entity.name.type.alias.cpp",
                    },
                  },
                },
                {
                  "match": ",",
                },
              ],
            },
          ],
        },
      ],
    },
    "hacky_fix_for_stray_directive": {
      "match": "(?<!\\w)#(?:endif|else|elif)(?!\\w)",
      "name": "keyword.control.directive.$0.cpp",
    },
    "square_brackets": {
      "name": "meta.bracket.square.access.cpp",
      "begin": "([a-zA-Z_][a-zA-Z_0-9]*|(?<=[\\]\\)]))?(\\[)(?!\\])",
      "beginCaptures": {
        "1": {
          "name": "variable.other.object.cpp",
        },
        "2": {
          "name": "punctuation.definition.begin.bracket.square.cpp",
        },
      },
      "end": "\\]",
      "endCaptures": {
        "0": {
          "name": "punctuation.definition.end.bracket.square.cpp",
        },
      },
      "patterns": [
        {
          "include": "#function_call_context_c",
        },
      ],
    },
    "empty_square_brackets": {
      "name": "storage.modifier.array.bracket.square.cpp",
      "match": "(?-mix:(?-mix:(?<!delete))\\\\[\\\\s*\\\\])",
    },
    "assembly": {
      "match": "(?<!\\w)(asm|__asm__)(?!\\w)",
      "name": "storage.type.$0.cpp",
    },
    "misc_storage_modifiers_1": {
      "match": "(?-mix:\\b(constexpr|export|mutable|typename|thread_local)\\b)",
      "name": "storage.modifier.cpp",
    },
    "misc_storage_modifiers_2": {
      "match": "(?-mix:\\b(const|extern|register|restrict|static|volatile|inline)\\b)",
      "name": "storage.modifier.cpp",
    },
    "destructor": {
      "name": "meta.function.destructor.cpp",
      "begin": "(?x)\n(?:\n  ^ |                  # beginning of line\n  (?:(?<!else|new|=))  # or word + space before name\n)\n((?:[A-Za-z_][A-Za-z0-9_]*::)*+~[A-Za-z_][A-Za-z0-9_]*) # actual name\n\\s*(\\()              # opening bracket",
      "beginCaptures": {
        "1": {
          "name": "entity.name.function.destructor.cpp",
        },
        "2": {
          "name": "punctuation.definition.parameters.begin.destructor.cpp",
        },
      },
      "end": "(?-mix:\\))",
      "endCaptures": {
        "0": {
          "name": "punctuation.definition.parameters.end.destructor.cpp",
        },
      },
      "patterns": [
        {
          "include": "$base",
        },
      ],
    },
    "destructor_prototype": {
      "name": "meta.function.destructor.prototype.cpp",
      "begin": "(?x)\n(?:\n  ^ |                  # beginning of line\n  (?:(?<!else|new|=))  # or word + space before name\n)\n((?:[A-Za-z_][A-Za-z0-9_]*::)*+~[A-Za-z_][A-Za-z0-9_]*) # actual name\n\\s*(\\()              # opening bracket",
      "beginCaptures": {
        "1": {
          "name": "entity.name.function.cpp",
        },
        "2": {
          "name": "punctuation.definition.parameters.begin.cpp",
        },
      },
      "end": "(?-mix:\\))",
      "endCaptures": {
        "0": {
          "name": "punctuation.definition.parameters.end.cpp",
        },
      },
      "patterns": [
        {
          "include": "$base",
        },
      ],
    },
    "meta_preprocessor_macro": {
      "name": "meta.preprocessor.macro.cpp",
      "begin": "(?x)\n^\\s* ((\\#)\\s*define) \\s+\t# define\n((?<id>(?-mix:[a-zA-Z_$][\\w$]*)))\t  # macro name\n(?:\n  (\\()\n\t(\n\t  \\s* \\g<id> \\s*\t\t # first argument\n\t  ((,) \\s* \\g<id> \\s*)*  # additional arguments\n\t  (?:\\.\\.\\.)?\t\t\t# varargs ellipsis?\n\t)\n  (\\))\n)?",
      "beginCaptures": {
        "1": {
          "name": "keyword.control.directive.define.cpp",
        },
        "2": {
          "name": "punctuation.definition.directive.cpp",
        },
        "3": {
          "name": "entity.name.function.preprocessor.cpp",
        },
        "5": {
          "name": "punctuation.definition.parameters.begin.cpp",
        },
        "6": {
          "name": "variable.parameter.preprocessor.cpp",
        },
        "8": {
          "name": "punctuation.separator.parameters.cpp",
        },
        "9": {
          "name": "punctuation.definition.parameters.end.cpp",
        },
      },
      "end": "(?=(?://|/\\*))|(?<!\\\\)(?=\\n)",
      "patterns": [
        {
          "include": "#preprocessor_rule_define_line_context",
        },
      ],
    },
    "meta_preprocessor_diagnostic": {
      "name": "meta.preprocessor.diagnostic.cpp",
      "begin": "^\\s*((#)\\s*(error|warning))\\b\\s*",
      "beginCaptures": {
        "1": {
          "name": "keyword.control.directive.diagnostic.$3.cpp",
        },
        "2": {
          "name": "punctuation.definition.directive.cpp",
        },
      },
      "end": "(?<!\\\\)(?=\\n)",
      "patterns": [
        {
          "begin": "\"",
          "beginCaptures": {
            "0": {
              "name": "punctuation.definition.string.begin.cpp",
            },
          },
          "end": "\"|(?<!\\\\)(?=\\s*\\n)",
          "endCaptures": {
            "0": {
              "name": "punctuation.definition.string.end.cpp",
            },
          },
          "name": "string.quoted.double.cpp",
          "patterns": [
            {
              "include": "#line_continuation_character",
            },
          ],
        },
        {
          "begin": "'",
          "beginCaptures": {
            "0": {
              "name": "punctuation.definition.string.begin.cpp",
            },
          },
          "end": "'|(?<!\\\\)(?=\\s*\\n)",
          "endCaptures": {
            "0": {
              "name": "punctuation.definition.string.end.cpp",
            },
          },
          "name": "string.quoted.single.cpp",
          "patterns": [
            {
              "include": "#line_continuation_character",
            },
          ],
        },
        {
          "begin": "[^'\"]",
          "end": "(?<!\\\\)(?=\\s*\\n)",
          "name": "string.unquoted.single.cpp",
          "patterns": [
            {
              "include": "#line_continuation_character",
            },
            {
              "include": "#comments_context",
            },
          ],
        },
      ],
    },
    "meta_preprocessor_include": {
      "name": "meta.preprocessor.include.cpp",
      "begin": "^\\s*((#)\\s*(include(?:_next)?|import))\\b\\s*",
      "beginCaptures": {
        "1": {
          "name": "keyword.control.directive.$3.cpp",
        },
        "2": {
          "name": "punctuation.definition.directive.cpp",
        },
      },
      "end": "(?=(?://|/\\*))|(?<!\\\\)(?=\\n)",
      "patterns": [
        {
          "include": "#line_continuation_character",
        },
        {
          "begin": "\"",
          "beginCaptures": {
            "0": {
              "name": "punctuation.definition.string.begin.cpp",
            },
          },
          "end": "\"",
          "endCaptures": {
            "0": {
              "name": "punctuation.definition.string.end.cpp",
            },
          },
          "name": "string.quoted.double.include.cpp",
        },
        {
          "begin": "<",
          "beginCaptures": {
            "0": {
              "name": "punctuation.definition.string.begin.cpp",
            },
          },
          "end": ">",
          "endCaptures": {
            "0": {
              "name": "punctuation.definition.string.end.cpp",
            },
          },
          "name": "string.quoted.other.lt-gt.include.cpp",
        },
      ],
    },
    "meta_preprocessor_line": {
      "name": "meta.preprocessor.cpp",
      "begin": "^\\s*((#)\\s*line)\\b",
      "beginCaptures": {
        "1": {
          "name": "keyword.control.directive.line.cpp",
        },
        "2": {
          "name": "punctuation.definition.directive.cpp",
        },
      },
      "end": "(?=(?://|/\\*))|(?<!\\\\)(?=\\n)",
      "patterns": [
        {
          "include": "#string_context_c",
        },
        {
          "include": "#number_literal",
        },
        {
          "include": "#line_continuation_character",
        },
      ],
    },
    "meta_preprocessor_undef": {
      "name": "meta.preprocessor.cpp",
      "begin": "^\\s*(?:((#)\\s*undef))\\b",
      "beginCaptures": {
        "1": {
          "name": "keyword.control.directive.undef.cpp",
        },
        "2": {
          "name": "punctuation.definition.directive.cpp",
        },
      },
      "end": "(?=(?://|/\\*))|(?<!\\\\)(?=\\n)",
      "patterns": [
        {
          "match": "(?-mix:[a-zA-Z_$][\\w$]*)",
          "name": "entity.name.function.preprocessor.cpp",
        },
        {
          "include": "#line_continuation_character",
        },
      ],
    },
    "meta_preprocessor_pragma": {
      "name": "meta.preprocessor.pragma.cpp",
      "begin": "^\\s*(?:((#)\\s*pragma))\\b",
      "beginCaptures": {
        "1": {
          "name": "keyword.control.directive.pragma.cpp",
        },
        "2": {
          "name": "punctuation.definition.directive.cpp",
        },
      },
      "end": "(?=(?://|/\\*))|(?<!\\\\)(?=\\n)",
      "patterns": [
        {
          "include": "#string_context_c",
        },
        {
          "match": "[a-zA-Z_$][\\w\\-$]*",
          "name": "entity.other.attribute-name.pragma.preprocessor.cpp",
        },
        {
          "include": "#number_literal",
        },
        {
          "include": "#line_continuation_character",
        },
      ],
    },
    "constructor_context": {
      "patterns": [
        {
          "begin": "(?x)\n(?:^\\s*)  # beginning of line\n((?!while|for|do|if|else|switch|catch)[A-Za-z_][A-Za-z0-9_:]*) # actual name\n\\s*(\\()  # opening bracket",
          "beginCaptures": {
            "1": {
              "name": "entity.name.function.constructor.cpp",
            },
            "2": {
              "name": "punctuation.definition.parameters.begin.constructor.cpp",
            },
          },
          "end": "\\)",
          "endCaptures": {
            "0": {
              "name": "punctuation.definition.parameters.end.constructor.cpp",
            },
          },
          "name": "meta.function.constructor.cpp",
          "patterns": [
            {
              "include": "#probably_a_parameter",
            },
            {
              "include": "#function_context_c",
            },
          ],
        },
        {
          "begin": "(?x)\n(:)\n(\n  (?=\n    \\s*[A-Za-z_][A-Za-z0-9_:]* # actual name\n    \\s* (\\() # opening bracket\n  )\n)",
          "beginCaptures": {
            "1": {
              "name": "punctuation.definition.initializer-list.parameters.cpp",
            },
          },
          "end": "(?=\\{)",
          "name": "meta.function.constructor.initializer-list.cpp",
          "patterns": [
            {
              "include": "$base",
            },
          ],
        },
      ],
    },
    "special_block_context": {
      "patterns": [
        {
          "include": "#attributes_context",
        },
        {
          "include": "#using_namespace",
        },
        {
          "include": "#type_alias",
        },
        {
          "include": "#namespace_block",
        },
        {
          "include": "#typedef_class",
        },
        {
          "include": "#typedef_struct",
        },
        {
          "include": "#typedef_union",
        },
        {
          "include": "#class_block",
        },
        {
          "include": "#struct_block",
        },
        {
          "include": "#union_block",
        },
        {
          "include": "#enum_block",
        },
        {
          "include": "#extern_block",
        },
      ],
    },
    "string_context": {
      "patterns": [
        {
          "begin": "(u|u8|U|L)?\"",
          "beginCaptures": {
            "0": {
              "name": "punctuation.definition.string.begin.cpp",
            },
            "1": {
              "name": "meta.encoding.cpp",
            },
          },
          "end": "\"",
          "endCaptures": {
            "0": {
              "name": "punctuation.definition.string.end.cpp",
            },
          },
          "name": "string.quoted.double.cpp",
          "patterns": [
            {
              "match": "\\\\u\\h{4}|\\\\U\\h{8}",
              "name": "constant.character.escape.cpp",
            },
            {
              "match": "\\\\['\"?\\\\abfnrtv]",
              "name": "constant.character.escape.cpp",
            },
            {
              "match": "\\\\[0-7]{1,3}",
              "name": "constant.character.escape.cpp",
            },
            {
              "match": "\\\\x\\h+",
              "name": "constant.character.escape.cpp",
            },
            {
              "include": "#string_escapes_context_c",
            },
          ],
        },
        {
          "begin": "(u|u8|U|L)?R\"(?:([^ ()\\\\\\t]{0,16})|([^ ()\\\\\\t]*))\\(",
          "beginCaptures": {
            "0": {
              "name": "punctuation.definition.string.begin.cpp",
            },
            "1": {
              "name": "meta.encoding.cpp",
            },
            "3": {
              "name": "invalid.illegal.delimiter-too-long.cpp",
            },
          },
          "end": "\\)\\2(\\3)\"",
          "endCaptures": {
            "0": {
              "name": "punctuation.definition.string.end.cpp",
            },
            "1": {
              "name": "invalid.illegal.delimiter-too-long.cpp",
            },
          },
          "name": "string.quoted.double.raw.cpp",
        },
      ],
    },
    "block": {
      "begin": "{",
      "beginCaptures": {
        "0": {
          "name": "punctuation.section.block.begin.bracket.curly.cpp",
        },
      },
      "end": "}|(?=\\s*#\\s*(?:elif|else|endif)\\b)",
      "endCaptures": {
        "0": {
          "name": "punctuation.section.block.end.bracket.curly.cpp",
        },
      },
      "name": "meta.block.cpp",
      "patterns": [
        {
          "include": "#block_context",
        },
      ],
    },
    "block_context": {
      "patterns": [
        {
          "include": "#preprocessor_rule_enabled_block",
        },
        {
          "include": "#preprocessor_rule_disabled_block",
        },
        {
          "include": "#preprocessor_rule_conditional_block",
        },
        {
          "include": "#method_access",
        },
        {
          "include": "#member_access",
        },
        {
          "include": "#function_call_c",
        },
        {
          "name": "meta.initialization.cpp",
          "begin": "(?x)\n(?:\n  (?:\n\t(?=\\s)(?<!else|new|return)\n\t(?<=\\w) \\s+(and|and_eq|bitand|bitor|compl|not|not_eq|or|or_eq|typeid|xor|xor_eq|alignof|alignas)  # or word + space before name\n  )\n)\n(\n  (?:[A-Za-z_][A-Za-z0-9_]*+ | :: )++   # actual name\n  |\n  (?:(?<=operator) (?:[-*&<>=+!]+ | \\(\\) | \\[\\]))\n)\n\\s*(\\() # opening bracket",
          "beginCaptures": {
            "1": {
              "name": "variable.other.cpp",
            },
            "2": {
              "name": "punctuation.section.parens.begin.bracket.round.initialization.cpp",
            },
          },
          "end": "\\)",
          "endCaptures": {
            "0": {
              "name": "punctuation.section.parens.end.bracket.round.initialization.cpp",
            },
          },
          "patterns": [
            {
              "include": "#function_call_context_c",
            },
          ],
        },
        {
          "begin": "{",
          "beginCaptures": {
            "0": {
              "name": "punctuation.section.block.begin.bracket.curly.cpp",
            },
          },
          "end": "}|(?=\\s*#\\s*(?:elif|else|endif)\\b)",
          "endCaptures": {
            "0": {
              "name": "punctuation.section.block.end.bracket.curly.cpp",
            },
          },
          "patterns": [
            {
              "include": "#block_context",
            },
          ],
        },
        {
          "include": "#parentheses_block",
        },
        {
          "include": "$base",
        },
      ],
    },
    "function_call_c": {
      "begin": "(?x)\n(?!(?:while|for|do|if|else|switch|catch|return|typeid|alignof|alignas|sizeof|and|and_eq|bitand|bitor|compl|not|not_eq|or|or_eq|typeid|xor|xor_eq|alignof|alignas|constexpr|volatile|operator|(?:::)?new|(?:::)?delete)\\s*\\()\n(?=\n(?:[A-Za-z_][A-Za-z0-9_]*+|::)++\\s*(?-mix:(?:(?-mix:(?:(?<!<)<(?!<)(?:[\\s<>:,\\w])*>\\s*)))?)\\(  # actual name\n|\n(?:(?<=operator)(?:[-*&<>=+!]+|\\(\\)|\\[\\]))\\s*\\(\n)",
      "end": "(?<=\\))(?!\\w)",
      "name": "meta.function-call.cpp",
      "patterns": [
        {
          "include": "#function_call_context_c",
        },
      ],
    },
    "comments_context": {
      "patterns": [
        {
          "captures": {
            "1": {
              "name": "meta.toc-list.banner.block.cpp",
            },
          },
          "match": "^/\\* =(\\s*.*?)\\s*= \\*/$\\n?",
          "name": "comment.block.cpp",
        },
        {
          "begin": "/\\*",
          "beginCaptures": {
            "0": {
              "name": "punctuation.definition.comment.begin.cpp",
            },
          },
          "end": "\\*/",
          "endCaptures": {
            "0": {
              "name": "punctuation.definition.comment.end.cpp",
            },
          },
          "name": "comment.block.cpp",
        },
        {
          "captures": {
            "1": {
              "name": "meta.toc-list.banner.line.cpp",
            },
          },
          "match": "^// =(\\s*.*?)\\s*=\\s*$\\n?",
          "name": "comment.line.banner.cpp",
        },
        {
          "begin": "(^[ \\t]+)?(?=//)",
          "beginCaptures": {
            "1": {
              "name": "punctuation.whitespace.comment.leading.cpp",
            },
          },
          "end": "(?!\\G)",
          "patterns": [
            {
              "begin": "//",
              "beginCaptures": {
                "0": {
                  "name": "punctuation.definition.comment.cpp",
                },
              },
              "end": "(?=\\n)",
              "name": "comment.line.double-slash.cpp",
              "patterns": [
                {
                  "include": "#line_continuation_character",
                },
              ],
            },
          ],
        },
      ],
    },
    "disabled": {
      "begin": "^\\s*#\\s*if(n?def)?\\b.*$",
      "end": "^\\s*#\\s*endif\\b",
      "patterns": [
        {
          "include": "#disabled",
        },
        {
          "include": "#pragma_mark",
        },
      ],
    },
    "line_continuation_character": {
      "match": "(\\\\)\\n",
      "captures": {
        "1": {
          "name": "constant.character.escape.line-continuation.cpp",
        },
      },
    },
    "parentheses": {
      "name": "meta.parens.cpp",
      "begin": "\\(",
      "beginCaptures": {
        "0": {
          "name": "punctuation.section.parens.begin.bracket.round.cpp",
        },
      },
      "end": "\\)",
      "endCaptures": {
        "0": {
          "name": "punctuation.section.parens.end.bracket.round.cpp",
        },
      },
      "patterns": [
        {
          "include": "$base",
        },
      ],
    },
    "parentheses_block": {
      "name": "meta.parens.block.cpp",
      "begin": "\\(",
      "beginCaptures": {
        "0": {
          "name": "punctuation.section.parens.begin.bracket.round.cpp",
        },
      },
      "end": "\\)",
      "endCaptures": {
        "0": {
          "name": "punctuation.section.parens.end.bracket.round.cpp",
        },
      },
      "patterns": [
        {
          "include": "#block_context",
        },
        {
          "match": "(?-mix:(?<!:):(?!:))",
          "name": "colon.cpp punctuation.separator.range-based.cpp",
        },
      ],
    },
    "pragma_mark": {
      "captures": {
        "1": {
          "name": "meta.preprocessor.pragma.cpp",
        },
        "2": {
          "name": "keyword.control.directive.pragma.pragma-mark.cpp",
        },
        "3": {
          "name": "punctuation.definition.directive.cpp",
        },
        "4": {
          "name": "entity.name.tag.pragma-mark.cpp",
        },
      },
      "match": "^\\s*(((#)\\s*pragma\\s+mark)\\s+(.*))",
      "name": "meta.section.cpp",
    },
    "string_context_c": {
      "patterns": [
        {
          "begin": "\"",
          "beginCaptures": {
            "0": {
              "name": "punctuation.definition.string.begin.cpp",
            },
          },
          "end": "\"",
          "endCaptures": {
            "0": {
              "name": "punctuation.definition.string.end.cpp",
            },
          },
          "name": "string.quoted.double.cpp",
          "patterns": [
            {
              "include": "#string_escapes_context_c",
            },
            {
              "include": "#line_continuation_character",
            },
          ],
        },
        {
          "begin": "(?-mix:(?<![\\da-fA-F])')",
          "beginCaptures": {
            "0": {
              "name": "punctuation.definition.string.begin.cpp",
            },
          },
          "end": "'",
          "endCaptures": {
            "0": {
              "name": "punctuation.definition.string.end.cpp",
            },
          },
          "name": "string.quoted.single.cpp",
          "patterns": [
            {
              "include": "#string_escapes_context_c",
            },
            {
              "include": "#line_continuation_character",
            },
          ],
        },
      ],
    },
    "string_escapes_context_c": {
      "patterns": [
        {
          "match": "(?x)\\\\ (\n\\\\\t\t\t |\n[abefnprtv'\"?]   |\n[0-3]\\d{,2}\t |\n[4-7]\\d?\t\t|\nx[a-fA-F0-9]{,2} |\nu[a-fA-F0-9]{,4} |\nU[a-fA-F0-9]{,8} )",
          "name": "constant.character.escape.cpp",
        },
        {
          "match": "\\\\.",
          "name": "invalid.illegal.unknown-escape.cpp",
        },
        {
          "match": "(?x) %\n(\\d+\\$)?\t\t\t\t\t\t   # field (argument #)\n[#0\\- +']*\t\t\t\t\t\t  # flags\n[,;:_]?\t\t\t\t\t\t\t  # separator character (AltiVec)\n((-?\\d+)|\\*(-?\\d+\\$)?)?\t\t  # minimum field width\n(\\.((-?\\d+)|\\*(-?\\d+\\$)?)?)?\t# precision\n(hh|h|ll|l|j|t|z|q|L|vh|vl|v|hv|hl)? # length modifier\n[diouxXDOUeEfFgGaACcSspn%]\t\t   # conversion type",
          "name": "constant.other.placeholder.cpp",
        },
      ],
    },
    "vararg_ellipses": {
      "match": "(?<!\\.)\\.\\.\\.(?!\\.)",
      "name": "punctuation.vararg-ellipses.cpp",
    },
    "preprocessor_rule_conditional": {
      "begin": "^\\s*((#)\\s*if(?:n?def)?\\b)",
      "beginCaptures": {
        "0": {
          "name": "meta.preprocessor.cpp",
        },
        "1": {
          "name": "keyword.control.directive.conditional.cpp",
        },
        "2": {
          "name": "punctuation.definition.directive.cpp",
        },
      },
      "end": "^\\s*((#)\\s*endif\\b)",
      "endCaptures": {
        "0": {
          "name": "meta.preprocessor.cpp",
        },
        "1": {
          "name": "keyword.control.directive.conditional.cpp",
        },
        "2": {
          "name": "punctuation.definition.directive.cpp",
        },
      },
      "patterns": [
        {
          "begin": "\\G(?=.)(?!//|/\\*(?!.*\\\\\\s*\\n))",
          "end": "(?=//)|(?=/\\*(?!.*\\\\\\s*\\n))|(?<!\\\\)(?=\\n)",
          "name": "meta.preprocessor.cpp",
          "patterns": [
            {
              "include": "#preprocessor_rule_conditional_line_context",
            },
          ],
        },
        {
          "include": "#preprocessor_rule_enabled_elif",
        },
        {
          "include": "#preprocessor_rule_enabled_else",
        },
        {
          "include": "#preprocessor_rule_disabled_elif",
        },
        {
          "begin": "^\\s*((#)\\s*elif\\b)",
          "beginCaptures": {
            "1": {
              "name": "keyword.control.directive.conditional.cpp",
            },
            "2": {
              "name": "punctuation.definition.directive.cpp",
            },
          },
          "end": "(?=//)|(?=/\\*(?!.*\\\\\\s*\\n))|(?<!\\\\)(?=\\n)",
          "name": "meta.preprocessor.cpp",
          "patterns": [
            {
              "include": "#preprocessor_rule_conditional_line_context",
            },
          ],
        },
        {
          "include": "$base",
        },
      ],
    },
    "preprocessor_rule_conditional_block": {
      "begin": "^\\s*((#)\\s*if(?:n?def)?\\b)",
      "beginCaptures": {
        "0": {
          "name": "meta.preprocessor.cpp",
        },
        "1": {
          "name": "keyword.control.directive.conditional.cpp",
        },
        "2": {
          "name": "punctuation.definition.directive.cpp",
        },
      },
      "end": "^\\s*((#)\\s*endif\\b)",
      "endCaptures": {
        "0": {
          "name": "meta.preprocessor.cpp",
        },
        "1": {
          "name": "keyword.control.directive.conditional.cpp",
        },
        "2": {
          "name": "punctuation.definition.directive.cpp",
        },
      },
      "patterns": [
        {
          "begin": "\\G(?=.)(?!//|/\\*(?!.*\\\\\\s*\\n))",
          "end": "(?=//)|(?=/\\*(?!.*\\\\\\s*\\n))|(?<!\\\\)(?=\\n)",
          "name": "meta.preprocessor.cpp",
          "patterns": [
            {
              "include": "#preprocessor_rule_conditional_line_context",
            },
          ],
        },
        {
          "include": "#preprocessor_rule_enabled_elif_block",
        },
        {
          "include": "#preprocessor_rule_enabled_else_block",
        },
        {
          "include": "#preprocessor_rule_disabled_elif",
        },
        {
          "begin": "^\\s*((#)\\s*elif\\b)",
          "beginCaptures": {
            "1": {
              "name": "keyword.control.directive.conditional.cpp",
            },
            "2": {
              "name": "punctuation.definition.directive.cpp",
            },
          },
          "end": "(?=//)|(?=/\\*(?!.*\\\\\\s*\\n))|(?<!\\\\)(?=\\n)",
          "name": "meta.preprocessor.cpp",
          "patterns": [
            {
              "include": "#preprocessor_rule_conditional_line_context",
            },
          ],
        },
        {
          "include": "#block_context",
        },
      ],
    },
    "preprocessor_rule_conditional_line_context": {
      "patterns": [
        {
          "match": "(?:\\bdefined\\b\\s*$)|(?:\\bdefined\\b(?=\\s*\\(*\\s*(?:(?!defined\\b)[a-zA-Z_$][\\w$]*\\b)\\s*\\)*\\s*(?:\\n|//|/\\*|\\?|\\:|&&|\\|\\||\\\\\\s*\\n)))",
          "name": "keyword.control.directive.conditional.cpp",
        },
        {
          "match": "\\bdefined\\b",
          "name": "invalid.illegal.macro-name.cpp",
        },
        {
          "include": "#comments_context",
        },
        {
          "include": "#string_context_c",
        },
        {
          "include": "#number_literal",
        },
        {
          "begin": "\\?",
          "beginCaptures": {
            "0": {
              "name": "keyword.operator.ternary.cpp",
            },
          },
          "end": ":",
          "endCaptures": {
            "0": {
              "name": "keyword.operator.ternary.cpp",
            },
          },
          "patterns": [
            {
              "include": "#preprocessor_rule_conditional_line_context",
            },
          ],
        },
        {
          "include": "#operators",
        },
        {
          "include": "#language_constants",
        },
        {
          "match": "(?-mix:[a-zA-Z_$][\\w$]*)",
          "name": "entity.name.function.preprocessor.cpp",
        },
        {
          "include": "#line_continuation_character",
        },
        {
          "begin": "\\(",
          "beginCaptures": {
            "0": {
              "name": "punctuation.section.parens.begin.bracket.round.cpp",
            },
          },
          "end": "\\)|(?=//)|(?=/\\*(?!.*\\\\\\s*\\n))|(?<!\\\\)(?=\\n)",
          "endCaptures": {
            "0": {
              "name": "punctuation.section.parens.end.bracket.round.cpp",
            },
          },
          "patterns": [
            {
              "include": "#preprocessor_rule_conditional_line_context",
            },
          ],
        },
      ],
    },
    "preprocessor_rule_disabled": {
      "begin": "^\\s*((#)\\s*if\\b)(?=\\s*\\(*\\b0+\\b\\)*\\s*(?:$|//|/\\*))",
      "beginCaptures": {
        "0": {
          "name": "meta.preprocessor.cpp",
        },
        "1": {
          "name": "keyword.control.directive.conditional.cpp",
        },
        "2": {
          "name": "punctuation.definition.directive.cpp",
        },
      },
      "end": "^\\s*((#)\\s*endif\\b)",
      "endCaptures": {
        "0": {
          "name": "meta.preprocessor.cpp",
        },
        "1": {
          "name": "keyword.control.directive.conditional.cpp",
        },
        "2": {
          "name": "punctuation.definition.directive.cpp",
        },
      },
      "patterns": [
        {
          "begin": "\\G(?=.)(?!//|/\\*(?!.*\\\\\\s*\\n))",
          "end": "(?=//)|(?=/\\*(?!.*\\\\\\s*\\n))|(?=\\n)",
          "name": "meta.preprocessor.cpp",
          "patterns": [
            {
              "include": "#preprocessor_rule_conditional_line_context",
            },
          ],
        },
        {
          "include": "#comments_context",
        },
        {
          "include": "#preprocessor_rule_enabled_elif",
        },
        {
          "include": "#preprocessor_rule_enabled_else",
        },
        {
          "include": "#preprocessor_rule_disabled_elif",
        },
        {
          "begin": "^\\s*((#)\\s*elif\\b)",
          "beginCaptures": {
            "0": {
              "name": "meta.preprocessor.cpp",
            },
            "1": {
              "name": "keyword.control.directive.conditional.cpp",
            },
            "2": {
              "name": "punctuation.definition.directive.cpp",
            },
          },
          "end": "(?=^\\s*((#)\\s*(?:elif|else|endif)\\b))",
          "patterns": [
            {
              "begin": "\\G(?=.)(?!//|/\\*(?!.*\\\\\\s*\\n))",
              "end": "(?=//)|(?=/\\*(?!.*\\\\\\s*\\n))|(?<!\\\\)(?=\\n)",
              "name": "meta.preprocessor.cpp",
              "patterns": [
                {
                  "include": "#preprocessor_rule_conditional_line_context",
                },
              ],
            },
            {
              "include": "$base",
            },
          ],
        },
        {
          "contentName": "comment.block.preprocessor.if-branch",
          "begin": "\\n",
          "end": "(?=^\\s*((#)\\s*(?:else|elif|endif)\\b))",
          "patterns": [
            {
              "include": "#disabled",
            },
            {
              "include": "#pragma_mark",
            },
          ],
        },
      ],
    },
    "preprocessor_rule_disabled_block": {
      "begin": "^\\s*((#)\\s*if\\b)(?=\\s*\\(*\\b0+\\b\\)*\\s*(?:$|//|/\\*))",
      "beginCaptures": {
        "0": {
          "name": "meta.preprocessor.cpp",
        },
        "1": {
          "name": "keyword.control.directive.conditional.cpp",
        },
        "2": {
          "name": "punctuation.definition.directive.cpp",
        },
      },
      "end": "^\\s*((#)\\s*endif\\b)",
      "endCaptures": {
        "0": {
          "name": "meta.preprocessor.cpp",
        },
        "1": {
          "name": "keyword.control.directive.conditional.cpp",
        },
        "2": {
          "name": "punctuation.definition.directive.cpp",
        },
      },
      "patterns": [
        {
          "begin": "\\G(?=.)(?!//|/\\*(?!.*\\\\\\s*\\n))",
          "end": "(?=//)|(?=/\\*(?!.*\\\\\\s*\\n))|(?=\\n)",
          "name": "meta.preprocessor.cpp",
          "patterns": [
            {
              "include": "#preprocessor_rule_conditional_line_context",
            },
          ],
        },
        {
          "include": "#comments_context",
        },
        {
          "include": "#preprocessor_rule_enabled_elif_block",
        },
        {
          "include": "#preprocessor_rule_enabled_else_block",
        },
        {
          "include": "#preprocessor_rule_disabled_elif",
        },
        {
          "begin": "^\\s*((#)\\s*elif\\b)",
          "beginCaptures": {
            "0": {
              "name": "meta.preprocessor.cpp",
            },
            "1": {
              "name": "keyword.control.directive.conditional.cpp",
            },
            "2": {
              "name": "punctuation.definition.directive.cpp",
            },
          },
          "end": "(?=^\\s*((#)\\s*(?:elif|else|endif)\\b))",
          "patterns": [
            {
              "begin": "\\G(?=.)(?!//|/\\*(?!.*\\\\\\s*\\n))",
              "end": "(?=//)|(?=/\\*(?!.*\\\\\\s*\\n))|(?<!\\\\)(?=\\n)",
              "name": "meta.preprocessor.cpp",
              "patterns": [
                {
                  "include": "#preprocessor_rule_conditional_line_context",
                },
              ],
            },
            {
              "include": "#block_context",
            },
          ],
        },
        {
          "contentName": "comment.block.preprocessor.if-branch.in-block",
          "begin": "\\n",
          "end": "(?=^\\s*((#)\\s*(?:else|elif|endif)\\b))",
          "patterns": [
            {
              "include": "#disabled",
            },
            {
              "include": "#pragma_mark",
            },
          ],
        },
      ],
    },
    "preprocessor_rule_disabled_elif": {
      "begin": "^\\s*((#)\\s*elif\\b)(?=\\s*\\(*\\b0+\\b\\)*\\s*(?:$|//|/\\*))",
      "beginCaptures": {
        "0": {
          "name": "meta.preprocessor.cpp",
        },
        "1": {
          "name": "keyword.control.directive.conditional.cpp",
        },
        "2": {
          "name": "punctuation.definition.directive.cpp",
        },
      },
      "end": "(?=^\\s*((#)\\s*(?:elif|else|endif)\\b))",
      "patterns": [
        {
          "begin": "\\G(?=.)(?!//|/\\*(?!.*\\\\\\s*\\n))",
          "end": "(?=//)|(?=/\\*(?!.*\\\\\\s*\\n))|(?<!\\\\)(?=\\n)",
          "name": "meta.preprocessor.cpp",
          "patterns": [
            {
              "include": "#preprocessor_rule_conditional_line_context",
            },
          ],
        },
        {
          "include": "#comments_context",
        },
        {
          "contentName": "comment.block.preprocessor.elif-branch",
          "begin": "\\n",
          "end": "(?=^\\s*((#)\\s*(?:else|elif|endif)\\b))",
          "patterns": [
            {
              "include": "#disabled",
            },
            {
              "include": "#pragma_mark",
            },
          ],
        },
      ],
    },
    "preprocessor_rule_enabled": {
      "begin": "^\\s*((#)\\s*if\\b)(?=\\s*\\(*\\b0*1\\b\\)*\\s*(?:$|//|/\\*))",
      "beginCaptures": {
        "0": {
          "name": "meta.preprocessor.cpp",
        },
        "1": {
          "name": "keyword.control.directive.conditional.cpp",
        },
        "2": {
          "name": "punctuation.definition.directive.cpp",
        },
        "3": {
          "name": "constant.numeric.preprocessor.cpp",
        },
      },
      "end": "^\\s*((#)\\s*endif\\b)",
      "endCaptures": {
        "0": {
          "name": "meta.preprocessor.cpp",
        },
        "1": {
          "name": "keyword.control.directive.conditional.cpp",
        },
        "2": {
          "name": "punctuation.definition.directive.cpp",
        },
      },
      "patterns": [
        {
          "begin": "\\G(?=.)(?!//|/\\*(?!.*\\\\\\s*\\n))",
          "end": "(?=//)|(?=/\\*(?!.*\\\\\\s*\\n))|(?=\\n)",
          "name": "meta.preprocessor.cpp",
          "patterns": [
            {
              "include": "#preprocessor_rule_conditional_line_context",
            },
          ],
        },
        {
          "include": "#comments_context",
        },
        {
          "contentName": "comment.block.preprocessor.else-branch",
          "begin": "^\\s*((#)\\s*else\\b)",
          "beginCaptures": {
            "0": {
              "name": "meta.preprocessor.cpp",
            },
            "1": {
              "name": "keyword.control.directive.conditional.cpp",
            },
            "2": {
              "name": "punctuation.definition.directive.cpp",
            },
          },
          "end": "(?=^\\s*((#)\\s*endif\\b))",
          "patterns": [
            {
              "include": "#disabled",
            },
            {
              "include": "#pragma_mark",
            },
          ],
        },
        {
          "contentName": "comment.block.preprocessor.if-branch",
          "begin": "^\\s*((#)\\s*elif\\b)",
          "beginCaptures": {
            "0": {
              "name": "meta.preprocessor.cpp",
            },
            "1": {
              "name": "keyword.control.directive.conditional.cpp",
            },
            "2": {
              "name": "punctuation.definition.directive.cpp",
            },
          },
          "end": "(?=^\\s*((#)\\s*(?:else|elif|endif)\\b))",
          "patterns": [
            {
              "include": "#disabled",
            },
            {
              "include": "#pragma_mark",
            },
          ],
        },
        {
          "begin": "\\n",
          "end": "(?=^\\s*((#)\\s*(?:else|elif|endif)\\b))",
          "patterns": [
            {
              "include": "$base",
            },
          ],
        },
      ],
    },
    "preprocessor_rule_enabled_block": {
      "begin": "^\\s*((#)\\s*if\\b)(?=\\s*\\(*\\b0*1\\b\\)*\\s*(?:$|//|/\\*))",
      "beginCaptures": {
        "0": {
          "name": "meta.preprocessor.cpp",
        },
        "1": {
          "name": "keyword.control.directive.conditional.cpp",
        },
        "2": {
          "name": "punctuation.definition.directive.cpp",
        },
      },
      "end": "^\\s*((#)\\s*endif\\b)",
      "endCaptures": {
        "0": {
          "name": "meta.preprocessor.cpp",
        },
        "1": {
          "name": "keyword.control.directive.conditional.cpp",
        },
        "2": {
          "name": "punctuation.definition.directive.cpp",
        },
      },
      "patterns": [
        {
          "begin": "\\G(?=.)(?!//|/\\*(?!.*\\\\\\s*\\n))",
          "end": "(?=//)|(?=/\\*(?!.*\\\\\\s*\\n))|(?=\\n)",
          "name": "meta.preprocessor.cpp",
          "patterns": [
            {
              "include": "#preprocessor_rule_conditional_line_context",
            },
          ],
        },
        {
          "include": "#comments_context",
        },
        {
          "contentName": "comment.block.preprocessor.else-branch.in-block",
          "begin": "^\\s*((#)\\s*else\\b)",
          "beginCaptures": {
            "0": {
              "name": "meta.preprocessor.cpp",
            },
            "1": {
              "name": "keyword.control.directive.conditional.cpp",
            },
            "2": {
              "name": "punctuation.definition.directive.cpp",
            },
          },
          "end": "(?=^\\s*((#)\\s*endif\\b))",
          "patterns": [
            {
              "include": "#disabled",
            },
            {
              "include": "#pragma_mark",
            },
          ],
        },
        {
          "contentName": "comment.block.preprocessor.if-branch.in-block",
          "begin": "^\\s*((#)\\s*elif\\b)",
          "beginCaptures": {
            "0": {
              "name": "meta.preprocessor.cpp",
            },
            "1": {
              "name": "keyword.control.directive.conditional.cpp",
            },
            "2": {
              "name": "punctuation.definition.directive.cpp",
            },
          },
          "end": "(?=^\\s*((#)\\s*(?:else|elif|endif)\\b))",
          "patterns": [
            {
              "include": "#disabled",
            },
            {
              "include": "#pragma_mark",
            },
          ],
        },
        {
          "begin": "\\n",
          "end": "(?=^\\s*((#)\\s*(?:else|elif|endif)\\b))",
          "patterns": [
            {
              "include": "#block_context",
            },
          ],
        },
      ],
    },
    "preprocessor_rule_enabled_elif": {
      "begin": "^\\s*((#)\\s*elif\\b)(?=\\s*\\(*\\b0*1\\b\\)*\\s*(?:$|//|/\\*))",
      "beginCaptures": {
        "0": {
          "name": "meta.preprocessor.cpp",
        },
        "1": {
          "name": "keyword.control.directive.conditional.cpp",
        },
        "2": {
          "name": "punctuation.definition.directive.cpp",
        },
      },
      "end": "(?=^\\s*((#)\\s*endif\\b))",
      "patterns": [
        {
          "begin": "\\G(?=.)(?!//|/\\*(?!.*\\\\\\s*\\n))",
          "end": "(?=//)|(?=/\\*(?!.*\\\\\\s*\\n))|(?<!\\\\)(?=\\n)",
          "name": "meta.preprocessor.cpp",
          "patterns": [
            {
              "include": "#preprocessor_rule_conditional_line_context",
            },
          ],
        },
        {
          "include": "#comments_context",
        },
        {
          "begin": "\\n",
          "end": "(?=^\\s*((#)\\s*(?:endif)\\b))",
          "patterns": [
            {
              "contentName": "comment.block.preprocessor.elif-branch",
              "begin": "^\\s*((#)\\s*(else)\\b)",
              "beginCaptures": {
                "0": {
                  "name": "meta.preprocessor.cpp",
                },
                "1": {
                  "name": "keyword.control.directive.conditional.cpp",
                },
                "2": {
                  "name": "punctuation.definition.directive.cpp",
                },
              },
              "end": "(?=^\\s*((#)\\s*endif\\b))",
              "patterns": [
                {
                  "include": "#disabled",
                },
                {
                  "include": "#pragma_mark",
                },
              ],
            },
            {
              "contentName": "comment.block.preprocessor.elif-branch",
              "begin": "^\\s*((#)\\s*(elif)\\b)",
              "beginCaptures": {
                "0": {
                  "name": "meta.preprocessor.cpp",
                },
                "1": {
                  "name": "keyword.control.directive.conditional.cpp",
                },
                "2": {
                  "name": "punctuation.definition.directive.cpp",
                },
              },
              "end": "(?=^\\s*((#)\\s*(?:else|elif|endif)\\b))",
              "patterns": [
                {
                  "include": "#disabled",
                },
                {
                  "include": "#pragma_mark",
                },
              ],
            },
            {
              "include": "$base",
            },
          ],
        },
      ],
    },
    "preprocessor_rule_enabled_elif_block": {
      "begin": "^\\s*((#)\\s*elif\\b)(?=\\s*\\(*\\b0*1\\b\\)*\\s*(?:$|//|/\\*))",
      "beginCaptures": {
        "0": {
          "name": "meta.preprocessor.cpp",
        },
        "1": {
          "name": "keyword.control.directive.conditional.cpp",
        },
        "2": {
          "name": "punctuation.definition.directive.cpp",
        },
      },
      "end": "(?=^\\s*((#)\\s*endif\\b))",
      "patterns": [
        {
          "begin": "\\G(?=.)(?!//|/\\*(?!.*\\\\\\s*\\n))",
          "end": "(?=//)|(?=/\\*(?!.*\\\\\\s*\\n))|(?<!\\\\)(?=\\n)",
          "name": "meta.preprocessor.cpp",
          "patterns": [
            {
              "include": "#preprocessor_rule_conditional_line_context",
            },
          ],
        },
        {
          "include": "#comments_context",
        },
        {
          "begin": "\\n",
          "end": "(?=^\\s*((#)\\s*(?:endif)\\b))",
          "patterns": [
            {
              "contentName": "comment.block.preprocessor.elif-branch.in-block",
              "begin": "^\\s*((#)\\s*(else)\\b)",
              "beginCaptures": {
                "0": {
                  "name": "meta.preprocessor.cpp",
                },
                "1": {
                  "name": "keyword.control.directive.conditional.cpp",
                },
                "2": {
                  "name": "punctuation.definition.directive.cpp",
                },
              },
              "end": "(?=^\\s*((#)\\s*endif\\b))",
              "patterns": [
                {
                  "include": "#disabled",
                },
                {
                  "include": "#pragma_mark",
                },
              ],
            },
            {
              "contentName": "comment.block.preprocessor.elif-branch",
              "begin": "^\\s*((#)\\s*(elif)\\b)",
              "beginCaptures": {
                "0": {
                  "name": "meta.preprocessor.cpp",
                },
                "1": {
                  "name": "keyword.control.directive.conditional.cpp",
                },
                "2": {
                  "name": "punctuation.definition.directive.cpp",
                },
              },
              "end": "(?=^\\s*((#)\\s*(?:else|elif|endif)\\b))",
              "patterns": [
                {
                  "include": "#disabled",
                },
                {
                  "include": "#pragma_mark",
                },
              ],
            },
            {
              "include": "#block_context",
            },
          ],
        },
      ],
    },
    "preprocessor_rule_enabled_else": {
      "begin": "^\\s*((#)\\s*else\\b)",
      "beginCaptures": {
        "0": {
          "name": "meta.preprocessor.cpp",
        },
        "1": {
          "name": "keyword.control.directive.conditional.cpp",
        },
        "2": {
          "name": "punctuation.definition.directive.cpp",
        },
      },
      "end": "(?=^\\s*((#)\\s*endif\\b))",
      "patterns": [
        {
          "include": "$base",
        },
      ],
    },
    "preprocessor_rule_enabled_else_block": {
      "begin": "^\\s*((#)\\s*else\\b)",
      "beginCaptures": {
        "0": {
          "name": "meta.preprocessor.cpp",
        },
        "1": {
          "name": "keyword.control.directive.conditional.cpp",
        },
        "2": {
          "name": "punctuation.definition.directive.cpp",
        },
      },
      "end": "(?=^\\s*((#)\\s*endif\\b))",
      "patterns": [
        {
          "include": "#block_context",
        },
      ],
    },
    "preprocessor_rule_define_line_context": {
      "patterns": [
        {
          "include": "#vararg_ellipses",
        },
        {
          "match": "(?-mix:##?(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U000[0-9a-fA-F]))(?:(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U000[0-9a-fA-F])))*(?!\\w))",
          "name": "variable.other.macro.argument.cpp",
        },
        {
          "begin": "{",
          "beginCaptures": {
            "0": {
              "name": "punctuation.section.block.begin.bracket.curly.cpp",
            },
          },
          "end": "}|(?=\\s*#\\s*(?:elif|else|endif)\\b)|(?<!\\\\)(?=\\s*\\n)",
          "endCaptures": {
            "0": {
              "name": "punctuation.section.block.end.bracket.curly.cpp",
            },
          },
          "name": "meta.block.cpp",
          "patterns": [
            {
              "include": "#preprocessor_rule_define_line_blocks_context",
            },
          ],
        },
        {
          "match": "\\(",
          "name": "punctuation.section.parens.begin.bracket.round.cpp",
        },
        {
          "match": "\\)",
          "name": "punctuation.section.parens.end.bracket.round.cpp",
        },
        {
          "begin": "(?x)\n(?!(?:while|for|do|if|else|switch|catch|return|typeid|alignof|alignas|sizeof|and|and_eq|bitand|bitor|compl|not|not_eq|or|or_eq|typeid|xor|xor_eq|alignof|alignas|asm|__asm__|auto|bool|_Bool|char|_Complex|double|enum|float|_Imaginary|int|long|short|signed|struct|typedef|union|unsigned|void)\\s*\\()\n(?=\n  (?:[A-Za-z_][A-Za-z0-9_]*+|::)++\\s*\\(  # actual name\n  |\n  (?:(?<=operator)(?:[-*&<>=+!]+|\\(\\)|\\[\\]))\\s*\\(\n)",
          "end": "(?<=\\))(?!\\w)|(?<!\\\\)(?=\\s*\\n)",
          "name": "meta.function.cpp",
          "patterns": [
            {
              "include": "#preprocessor_rule_define_line_functions_context",
            },
          ],
        },
        {
          "begin": "\"",
          "beginCaptures": {
            "0": {
              "name": "punctuation.definition.string.begin.cpp",
            },
          },
          "end": "\"|(?<!\\\\)(?=\\s*\\n)",
          "endCaptures": {
            "0": {
              "name": "punctuation.definition.string.end.cpp",
            },
          },
          "name": "string.quoted.double.cpp",
          "patterns": [
            {
              "include": "#string_escapes_context_c",
            },
            {
              "include": "#line_continuation_character",
            },
          ],
        },
        {
          "begin": "'",
          "beginCaptures": {
            "0": {
              "name": "punctuation.definition.string.begin.cpp",
            },
          },
          "end": "'|(?<!\\\\)(?=\\s*\\n)",
          "endCaptures": {
            "0": {
              "name": "punctuation.definition.string.end.cpp",
            },
          },
          "name": "string.quoted.single.cpp",
          "patterns": [
            {
              "include": "#string_escapes_context_c",
            },
            {
              "include": "#line_continuation_character",
            },
          ],
        },
        {
          "include": "#method_access",
        },
        {
          "include": "#member_access",
        },
        {
          "include": "$base",
        },
      ],
    },
    "preprocessor_rule_define_line_blocks_context": {
      "patterns": [
        {
          "begin": "{",
          "beginCaptures": {
            "0": {
              "name": "punctuation.section.block.begin.bracket.curly.cpp",
            },
          },
          "end": "}|(?=\\s*#\\s*(?:elif|else|endif)\\b)|(?<!\\\\)(?=\\s*\\n)",
          "endCaptures": {
            "0": {
              "name": "punctuation.section.block.end.bracket.curly.cpp",
            },
          },
          "patterns": [
            {
              "include": "#preprocessor_rule_define_line_blocks_context",
            },
            {
              "include": "#preprocessor_rule_define_line_context",
            },
          ],
        },
        {
          "include": "#preprocessor_rule_define_line_context",
        },
      ],
    },
    "preprocessor_rule_define_line_functions_context": {
      "patterns": [
        {
          "include": "#comments_context",
        },
        {
          "include": "#storage_types",
        },
        {
          "include": "#vararg_ellipses",
        },
        {
          "include": "#method_access",
        },
        {
          "include": "#member_access",
        },
        {
          "include": "#operators",
        },
        {
          "begin": "(?x)\n(?!(?:while|for|do|if|else|switch|catch|return|typeid|alignof|alignas|sizeof|and|and_eq|bitand|bitor|compl|not|not_eq|or|or_eq|typeid|xor|xor_eq|alignof|alignas)\\s*\\()\n(\n(?:[A-Za-z_][A-Za-z0-9_]*+|::)++  # actual name\n|\n(?:(?<=operator)(?:[-*&<>=+!]+|\\(\\)|\\[\\]))\n)\n\\s*(\\()",
          "beginCaptures": {
            "1": {
              "name": "entity.name.function.cpp",
            },
            "2": {
              "name": "punctuation.section.arguments.begin.bracket.round.cpp",
            },
          },
          "end": "(\\))|(?<!\\\\)(?=\\s*\\n)",
          "endCaptures": {
            "1": {
              "name": "punctuation.section.arguments.end.bracket.round.cpp",
            },
          },
          "patterns": [
            {
              "include": "#preprocessor_rule_define_line_functions_context",
            },
          ],
        },
        {
          "begin": "\\(",
          "beginCaptures": {
            "0": {
              "name": "punctuation.section.parens.begin.bracket.round.cpp",
            },
          },
          "end": "(\\))|(?<!\\\\)(?=\\s*\\n)",
          "endCaptures": {
            "1": {
              "name": "punctuation.section.parens.end.bracket.round.cpp",
            },
          },
          "patterns": [
            {
              "include": "#preprocessor_rule_define_line_functions_context",
            },
          ],
        },
        {
          "include": "#preprocessor_rule_define_line_context",
        },
      ],
    },
    "function_context_c": {
      "patterns": [
        {
          "include": "#attributes_context",
        },
        {
          "include": "#comments_context",
        },
        {
          "include": "#storage_types",
        },
        {
          "include": "#operators",
        },
        {
          "include": "#vararg_ellipses",
        },
        {
          "include": "#legacy_function_definition",
        },
        {
          "begin": "\\(",
          "beginCaptures": {
            "0": {
              "name": "punctuation.section.parens.begin.bracket.round.cpp",
            },
          },
          "end": "\\)",
          "endCaptures": {
            "0": {
              "name": "punctuation.section.parens.end.bracket.round.cpp",
            },
          },
          "patterns": [
            {
              "include": "#function_context_c",
            },
          ],
        },
        {
          "include": "$base",
        },
      ],
    },
    "function_call_context_c": {
      "patterns": [
        {
          "include": "#attributes_context",
        },
        {
          "include": "#comments_context",
        },
        {
          "include": "#storage_types",
        },
        {
          "include": "#method_access",
        },
        {
          "include": "#member_access",
        },
        {
          "include": "#operators",
        },
        {
          "begin": "(?x)\n(?!(?:while|for|do|if|else|switch|catch|return|typeid|alignof|alignas|sizeof|and|and_eq|bitand|bitor|compl|not|not_eq|or|or_eq|typeid|xor|xor_eq|alignof|alignas)\\s*\\()\n(\n(?:new)\\s*((?-mix:(?:(?-mix:(?:(?<!<)<(?!<)(?:[\\s<>:,\\w])*>\\s*)))?)) # actual name\n|\n(?:(?<=operator)(?:[-*&<>=+!]+|\\(\\)|\\[\\]))\n)\n\\s*(\\()",
          "beginCaptures": {
            "1": {
              "name": "keyword.operator.wordlike.cpp memory.cpp keyword.operator.new.cpp",
            },
            "2": {
              "patterns": [
                {
                  "include": "#template_call_innards",
                },
              ],
            },
            "3": {
              "name": "punctuation.section.arguments.begin.bracket.round.cpp",
            },
          },
          "end": "\\)",
          "endCaptures": {
            "0": {
              "name": "punctuation.section.arguments.end.bracket.round.cpp",
            },
          },
          "patterns": [
            {
              "include": "#function_call_context_c",
            },
          ],
        },
        {
          "include": "#function_call",
        },
        {
          "begin": "\\(",
          "beginCaptures": {
            "0": {
              "name": "punctuation.section.parens.begin.bracket.round.cpp",
            },
          },
          "end": "\\)",
          "endCaptures": {
            "0": {
              "name": "punctuation.section.parens.end.bracket.round.cpp",
            },
          },
          "patterns": [
            {
              "include": "#function_call_context_c",
            },
          ],
        },
        {
          "include": "#block_context",
        },
      ],
    },
  },
}
objective_cpp_grammar[:"string_escaped_char"] = {
  patterns: [
    {
      match: "(?x)\\\\ (\n\\\\\t\t\t |\n[abefnprtv'\"?]   |\n[0-3]\\d{,2}\t |\n[4-7]\\d?\t\t|\nx[a-fA-F0-9]{,2} |\nu[a-fA-F0-9]{,4} |\nU[a-fA-F0-9]{,8} )",
      name: "constant.character.escape.c",
    },
    {
      match: "\\\\.",
      name: "invalid.illegal.unknown-escape.c",
    },
  ],
}
objective_cpp_grammar[:string_placeholder] = {
  patterns: [
    {
      match: "(?x) %\n(\\d+\\$)?\t\t\t\t\t\t   # field (argument #)\n[#0\\- +']*\t\t\t\t\t\t  # flags\n[,;:_]?\t\t\t\t\t\t\t  # separator character (AltiVec)\n((-?\\d+)|\\*(-?\\d+\\$)?)?\t\t  # minimum field width\n(\\.((-?\\d+)|\\*(-?\\d+\\$)?)?)?\t# precision\n(hh|h|ll|l|j|t|z|q|L|vh|vl|v|hv|hl)? # length modifier\n[diouxXDOUeEfFgGaACcSspn%]\t\t   # conversion type",
      name: "constant.other.placeholder.c",
    },
    {
      match: "(%)(?!\"\\s*(PRI|SCN))",
      captures: {
        "1" => {
          name: "invalid.illegal.placeholder.c",
        },
      },
    },
  ],
}
objective_cpp_grammar[:bracketed_content] = { "begin" => "\\[", "beginCaptures" => { "0" => { "name" => "punctuation.section.scope.begin" } }, "end" => "\\]", "endCaptures" => { "0" => { "name" => "punctuation.section.scope.end" } }, "name" => "meta.bracketed", "patterns" => [{ "begin" => "(?=predicateWithFormat:)(?<=NSPredicate )(predicateWithFormat:)", "beginCaptures" => { "1" => { "name" => "support.function.any-method" }, "2" => { "name" => "punctuation.separator.arguments" } }, "end" => "(?=\\])", "name" => "meta.function-call.predicate", "patterns" => [{ "captures" => { "1" => { "name" => "punctuation.separator.arguments" } }, "match" => "\\bargument(Array|s)(:)", "name" => "support.function.any-method.name-of-parameter" }, { "captures" => { "1" => { "name" => "punctuation.separator.arguments" } }, "match" => "\\b\\w+(:)", "name" => "invalid.illegal.unknown-method" }, { "begin" => "@\"", "beginCaptures" => { "0" => { "name" => "punctuation.definition.string.begin" } }, "end" => "\"", "endCaptures" => { "0" => { "name" => "punctuation.definition.string.end" } }, "name" => "string.quoted.double", "patterns" => [{ "match" => "\\b(AND|OR|NOT|IN)\\b", "name" => "keyword.operator.logical.predicate.cocoa" }, { "match" => "\\b(ALL|ANY|SOME|NONE)\\b", "name" => "constant.language.predicate.cocoa" }, { "match" => "\\b(NULL|NIL|SELF|TRUE|YES|FALSE|NO|FIRST|LAST|SIZE)\\b", "name" => "constant.language.predicate.cocoa" }, { "match" => "\\b(MATCHES|CONTAINS|BEGINSWITH|ENDSWITH|BETWEEN)\\b", "name" => "keyword.operator.comparison.predicate.cocoa" }, { "match" => "\\bC(ASEINSENSITIVE|I)\\b", "name" => "keyword.other.modifier.predicate.cocoa" }, { "match" => "\\b(ANYKEY|SUBQUERY|CAST|TRUEPREDICATE|FALSEPREDICATE)\\b", "name" => "keyword.other.predicate.cocoa" }, { "match" => "\\\\(\\\\|[abefnrtv'\"?]|[0-3]\\d{,2}|[4-7]\\d?|x[a-zA-Z0-9]+)", "name" => "constant.character.escape" }, { "match" => "\\\\.", "name" => "invalid.illegal.unknown-escape" }] }, { "include" => "#special_variables" }, { "include" => "#c_functions" }, { "include" => "$base" }] }, { "begin" => "(?=\\w)(?<=[\\w\\])\"] )(\\w+(?:(:)|(?=\\])))", "beginCaptures" => { "1" => { "name" => "support.function.any-method" }, "2" => { "name" => "punctuation.separator.arguments" } }, "end" => "(?=\\])", "name" => "meta.function-call", "patterns" => [{ "captures" => { "1" => { "name" => "punctuation.separator.arguments" } }, "match" => "\\b\\w+(:)", "name" => "support.function.any-method.name-of-parameter" }, { "include" => "#special_variables" }, { "include" => "#c_functions" }, { "include" => "$base" }] }, { "include" => "#special_variables" }, { "include" => "#c_functions" }, { "include" => "$self" }] }
objective_cpp_grammar[:c_functions] = { "patterns" => [{ "captures" => { "1" => { "name" => "punctuation.whitespace.support.function.leading.c" }, "2" => { "name" => "support.function.C99.c" } }, "match" => "(\\s*)\\b(hypot(f|l)?|s(scanf|ystem|nprintf|ca(nf|lb(n(f|l)?|ln(f|l)?))|i(n(h(f|l)?|f|l)?|gn(al|bit))|tr(s(tr|pn)|nc(py|at|mp)|c(spn|hr|oll|py|at|mp)|to(imax|d|u(l(l)?|max)|k|f|l(d|l)?)|error|pbrk|ftime|len|rchr|xfrm)|printf|et(jmp|vbuf|locale|buf)|qrt(f|l)?|w(scanf|printf)|rand)|n(e(arbyint(f|l)?|xt(toward(f|l)?|after(f|l)?))|an(f|l)?)|c(s(in(h(f|l)?|f|l)?|qrt(f|l)?)|cos(h(f)?|f|l)?|imag(f|l)?|t(ime|an(h(f|l)?|f|l)?)|o(s(h(f|l)?|f|l)?|nj(f|l)?|pysign(f|l)?)|p(ow(f|l)?|roj(f|l)?)|e(il(f|l)?|xp(f|l)?)|l(o(ck|g(f|l)?)|earerr)|a(sin(h(f|l)?|f|l)?|cos(h(f|l)?|f|l)?|tan(h(f|l)?|f|l)?|lloc|rg(f|l)?|bs(f|l)?)|real(f|l)?|brt(f|l)?)|t(ime|o(upper|lower)|an(h(f|l)?|f|l)?|runc(f|l)?|gamma(f|l)?|mp(nam|file))|i(s(space|n(ormal|an)|cntrl|inf|digit|u(nordered|pper)|p(unct|rint)|finite|w(space|c(ntrl|type)|digit|upper|p(unct|rint)|lower|al(num|pha)|graph|xdigit|blank)|l(ower|ess(equal|greater)?)|al(num|pha)|gr(eater(equal)?|aph)|xdigit|blank)|logb(f|l)?|max(div|abs))|di(v|fftime)|_Exit|unget(c|wc)|p(ow(f|l)?|ut(s|c(har)?|wc(har)?)|error|rintf)|e(rf(c(f|l)?|f|l)?|x(it|p(2(f|l)?|f|l|m1(f|l)?)?))|v(s(scanf|nprintf|canf|printf|w(scanf|printf))|printf|f(scanf|printf|w(scanf|printf))|w(scanf|printf)|a_(start|copy|end|arg))|qsort|f(s(canf|e(tpos|ek))|close|tell|open|dim(f|l)?|p(classify|ut(s|c|w(s|c))|rintf)|e(holdexcept|set(e(nv|xceptflag)|round)|clearexcept|testexcept|of|updateenv|r(aiseexcept|ror)|get(e(nv|xceptflag)|round))|flush|w(scanf|ide|printf|rite)|loor(f|l)?|abs(f|l)?|get(s|c|pos|w(s|c))|re(open|e|ad|xp(f|l)?)|m(in(f|l)?|od(f|l)?|a(f|l|x(f|l)?)?))|l(d(iv|exp(f|l)?)|o(ngjmp|cal(time|econv)|g(1(p(f|l)?|0(f|l)?)|2(f|l)?|f|l|b(f|l)?)?)|abs|l(div|abs|r(int(f|l)?|ound(f|l)?))|r(int(f|l)?|ound(f|l)?)|gamma(f|l)?)|w(scanf|c(s(s(tr|pn)|nc(py|at|mp)|c(spn|hr|oll|py|at|mp)|to(imax|d|u(l(l)?|max)|k|f|l(d|l)?|mbs)|pbrk|ftime|len|r(chr|tombs)|xfrm)|to(b|mb)|rtomb)|printf|mem(set|c(hr|py|mp)|move))|a(s(sert|ctime|in(h(f|l)?|f|l)?)|cos(h(f|l)?|f|l)?|t(o(i|f|l(l)?)|exit|an(h(f|l)?|2(f|l)?|f|l)?)|b(s|ort))|g(et(s|c(har)?|env|wc(har)?)|mtime)|r(int(f|l)?|ound(f|l)?|e(name|alloc|wind|m(ove|quo(f|l)?|ainder(f|l)?))|a(nd|ise))|b(search|towc)|m(odf(f|l)?|em(set|c(hr|py|mp)|move)|ktime|alloc|b(s(init|towcs|rtowcs)|towc|len|r(towc|len))))\\b" }, { "captures" => { "1" => { "name" => "punctuation.whitespace.function-call.leading.c" }, "2" => { "name" => "support.function.any-method.c" }, "3" => { "name" => "punctuation.definition.parameters.c" } }, "match" => "(?x) (?: (?= \\s )  (?:(?<=else|new|return) | (?<!\\w)) (\\s+))?\n            \t\t\t(\\b \n            \t\t\t\t(?!(while|for|do|if|else|switch|catch|enumerate|return|r?iterate)\\s*\\()(?:(?!NS)[A-Za-z_][A-Za-z0-9_]*+\\b | :: )++                  # actual name\n            \t\t\t)\n            \t\t\t \\s*(\\()", "name" => "meta.function-call.c" }] }
objective_cpp_grammar[:comment] = { "patterns" => [{ "begin" => "/\\*", "captures" => { "0" => { "name" => "punctuation.definition.comment" } }, "end" => "\\*/", "name" => "comment.block" }, { "begin" => "(^[ \\t]+)?(?=//)", "beginCaptures" => { "1" => { "name" => "punctuation.whitespace.comment.leading" } }, "end" => "(?!\\G)", "patterns" => [{ "begin" => "//", "beginCaptures" => { "0" => { "name" => "punctuation.definition.comment" } }, "end" => "\\n", "name" => "comment.line.double-slash", "patterns" => [{ "match" => "(?>\\\\\\s*\\n)", "name" => "punctuation.separator.continuation" }] }] }] }
objective_cpp_grammar[:disabled] = { "begin" => "^\\s*#\\s*if(n?def)?\\b.*$", "comment" => "eat nested preprocessor if(def)s", "end" => "^\\s*#\\s*endif\\b.*$", "patterns" => [{ "include" => "#disabled" }, { "include" => "#pragma-mark" }] }
objective_cpp_grammar[:implementation_innards] = { "patterns" => [{ "include" => "#preprocessor-rule-enabled-implementation" }, { "include" => "#preprocessor-rule-disabled-implementation" }, { "include" => "#preprocessor-rule-other-implementation" }, { "include" => "#property_directive" }, { "include" => "#special_variables" }, { "include" => "#method_super" }, { "include" => "$base" }] }
objective_cpp_grammar[:interface_innards] = { "patterns" => [{ "include" => "#preprocessor-rule-enabled-interface" }, { "include" => "#preprocessor-rule-disabled-interface" }, { "include" => "#preprocessor-rule-other-interface" }, { "include" => "#properties" }, { "include" => "#protocol_list" }, { "include" => "#method" }, { "include" => "$base" }] }
objective_cpp_grammar[:method] = { "begin" => "^(-|\\+)\\s*", "end" => "(?=\\{|#)|;", "name" => "meta.function", "patterns" => [{ "begin" => "(\\()", "beginCaptures" => { "1" => { "name" => "punctuation.definition.type.begin" } }, "end" => "(\\))\\s*(\\w+\\b)", "endCaptures" => { "1" => { "name" => "punctuation.definition.type.end" }, "2" => { "name" => "entity.name.function" } }, "name" => "meta.return-type", "patterns" => [{ "include" => "#protocol_list" }, { "include" => "#protocol_type_qualifier" }, { "include" => "$base" }] }, { "match" => "\\b\\w+(?=:)", "name" => "entity.name.function.name-of-parameter" }, { "begin" => "((:))\\s*(\\()", "beginCaptures" => { "1" => { "name" => "entity.name.function.name-of-parameter" }, "2" => { "name" => "punctuation.separator.arguments" }, "3" => { "name" => "punctuation.definition.type.begin" } }, "end" => "(\\))\\s*(\\w+\\b)?", "endCaptures" => { "1" => { "name" => "punctuation.definition.type.end" }, "2" => { "name" => "variable.parameter.function" } }, "name" => "meta.argument-type", "patterns" => [{ "include" => "#protocol_list" }, { "include" => "#protocol_type_qualifier" }, { "include" => "$base" }] }, { "include" => "#comment" }] }
objective_cpp_grammar[:method_super] = { "begin" => "^(?=-|\\+)", "end" => "(?<=\\})|(?=#)", "name" => "meta.function-with-body", "patterns" => [{ "include" => "#method" }, { "include" => "$base" }] }
objective_cpp_grammar[:'pragma-mark'] = { "captures" => { "1" => { "name" => "meta.preprocessor.c" }, "2" => { "name" => "keyword.control.import.pragma.c" }, "3" => { "name" => "meta.toc-list.pragma-mark.c" } }, "match" => "^\\s*(#\\s*(pragma\\s+mark)\\s+(.*))", "name" => "meta.section" }
objective_cpp_grammar[:'preprocessor-rule-disabled-implementation'] = { "begin" => "^\\s*(#(if)\\s+(0)\\b).*", "captures" => { "1" => { "name" => "meta.preprocessor.c" }, "2" => { "name" => "keyword.control.import.if.c" }, "3" => { "name" => "constant.numeric.preprocessor.c" } }, "end" => "^\\s*(#\\s*(endif)\\b.*?(?:(?=(?://|/\\*))|$))", "patterns" => [{ "begin" => "^\\s*(#\\s*(else)\\b)", "captures" => { "1" => { "name" => "meta.preprocessor.c" }, "2" => { "name" => "keyword.control.import.else.c" } }, "end" => "(?=^\\s*#\\s*endif\\b.*?(?:(?=(?://|/\\*))|$))", "patterns" => [{ "include" => "#interface_innards" }] }, { "begin" => "", "end" => "(?=^\\s*#\\s*(else|endif)\\b.*?(?:(?=(?://|/\\*))|$))", "name" => "comment.block.preprocessor.if-branch.c", "patterns" => [{ "include" => "#disabled" }, { "include" => "#pragma-mark" }] }] }
objective_cpp_grammar[:'preprocessor-rule-disabled-interface'] = { "begin" => "^\\s*(#(if)\\s+(0)\\b).*", "captures" => { "1" => { "name" => "meta.preprocessor.c" }, "2" => { "name" => "keyword.control.import.if.c" }, "3" => { "name" => "constant.numeric.preprocessor.c" } }, "end" => "^\\s*(#\\s*(endif)\\b.*?(?:(?=(?://|/\\*))|$))", "patterns" => [{ "begin" => "^\\s*(#\\s*(else)\\b)", "captures" => { "1" => { "name" => "meta.preprocessor.c" }, "2" => { "name" => "keyword.control.import.else.c" } }, "end" => "(?=^\\s*#\\s*endif\\b.*?(?:(?=(?://|/\\*))|$))", "patterns" => [{ "include" => "#interface_innards" }] }, { "begin" => "", "end" => "(?=^\\s*#\\s*(else|endif)\\b.*?(?:(?=(?://|/\\*))|$))", "name" => "comment.block.preprocessor.if-branch.c", "patterns" => [{ "include" => "#disabled" }, { "include" => "#pragma-mark" }] }] }
objective_cpp_grammar[:'preprocessor-rule-enabled-implementation'] = { "begin" => "^\\s*(#(if)\\s+(0*1)\\b)", "captures" => { "1" => { "name" => "meta.preprocessor.c" }, "2" => { "name" => "keyword.control.import.if.c" }, "3" => { "name" => "constant.numeric.preprocessor.c" } }, "end" => "^\\s*(#\\s*(endif)\\b.*?(?:(?=(?://|/\\*))|$))", "patterns" => [{ "begin" => "^\\s*(#\\s*(else)\\b).*", "captures" => { "1" => { "name" => "meta.preprocessor.c" }, "2" => { "name" => "keyword.control.import.else.c" } }, "contentName" => "comment.block.preprocessor.else-branch.c", "end" => "(?=^\\s*#\\s*endif\\b.*?(?:(?=(?://|/\\*))|$))", "patterns" => [{ "include" => "#disabled" }, { "include" => "#pragma-mark" }] }, { "begin" => "", "end" => "(?=^\\s*#\\s*(else|endif)\\b.*?(?:(?=(?://|/\\*))|$))", "patterns" => [{ "include" => "#implementation_innards" }] }] }
objective_cpp_grammar[:'preprocessor-rule-enabled-interface'] = { "begin" => "^\\s*(#(if)\\s+(0*1)\\b)", "captures" => { "1" => { "name" => "meta.preprocessor.c" }, "2" => { "name" => "keyword.control.import.if.c" }, "3" => { "name" => "constant.numeric.preprocessor.c" } }, "end" => "^\\s*(#\\s*(endif)\\b.*?(?:(?=(?://|/\\*))|$))", "patterns" => [{ "begin" => "^\\s*(#\\s*(else)\\b).*", "captures" => { "1" => { "name" => "meta.preprocessor.c" }, "2" => { "name" => "keyword.control.import.else.c" } }, "contentName" => "comment.block.preprocessor.else-branch.c", "end" => "(?=^\\s*#\\s*endif\\b.*?(?:(?=(?://|/\\*))|$))", "patterns" => [{ "include" => "#disabled" }, { "include" => "#pragma-mark" }] }, { "begin" => "", "end" => "(?=^\\s*#\\s*(else|endif)\\b.*?(?:(?=(?://|/\\*))|$))", "patterns" => [{ "include" => "#interface_innards" }] }] }
objective_cpp_grammar[:'preprocessor-rule-other-implementation'] = { "begin" => "^\\s*(#\\s*(if(n?def)?)\\b.*?(?:(?=(?://|/\\*))|$))", "captures" => { "1" => { "name" => "meta.preprocessor.c" }, "2" => { "name" => "keyword.control.import.c" } }, "end" => "^\\s*(#\\s*(endif)\\b).*?(?:(?=(?://|/\\*))|$)", "patterns" => [{ "include" => "#implementation_innards" }] }
objective_cpp_grammar[:'preprocessor-rule-other-interface'] = { "begin" => "^\\s*(#\\s*(if(n?def)?)\\b.*?(?:(?=(?://|/\\*))|$))", "captures" => { "1" => { "name" => "meta.preprocessor.c" }, "2" => { "name" => "keyword.control.import.c" } }, "end" => "^\\s*(#\\s*(endif)\\b).*?(?:(?=(?://|/\\*))|$)", "patterns" => [{ "include" => "#interface_innards" }] }
objective_cpp_grammar[:properties] = { "patterns" => [{ "begin" => "((@)property)\\s*(\\()", "beginCaptures" => { "1" => { "name" => "keyword.other.property" }, "2" => { "name" => "punctuation.definition.keyword" }, "3" => { "name" => "punctuation.section.scope.begin" } }, "end" => "(\\))", "endCaptures" => { "1" => { "name" => "punctuation.section.scope.end" } }, "name" => "meta.property-with-attributes", "patterns" => [{ "match" => "\\b(getter|setter|readonly|readwrite|assign|retain|copy|nonatomic|strong|weak)\\b", "name" => "keyword.other.property.attribute" }] }, { "captures" => { "1" => { "name" => "keyword.other.property" }, "2" => { "name" => "punctuation.definition.keyword" } }, "match" => "((@)property)\\b", "name" => "meta.property" }] }
objective_cpp_grammar[:property_directive] = { "captures" => { "1" => { "name" => "punctuation.definition.keyword" } }, "match" => "(@)(dynamic|synthesize)\\b", "name" => "keyword.other.property.directive" }
objective_cpp_grammar[:protocol_list] = { "begin" => "(<)", "beginCaptures" => { "1" => { "name" => "punctuation.section.scope.begin" } }, "end" => "(>)", "endCaptures" => { "1" => { "name" => "punctuation.section.scope.end" } }, "name" => "meta.protocol-list", "patterns" => [{ "match" => "\\bNS(GlyphStorage|M(utableCopying|enuItem)|C(hangeSpelling|o(ding|pying|lorPicking(Custom|Default)))|T(oolbarItemValidations|ext(Input|AttachmentCell))|I(nputServ(iceProvider|erMouseTracker)|gnoreMisspelledWords)|Obj(CTypeSerializationCallBack|ect)|D(ecimalNumberBehaviors|raggingInfo)|U(serInterfaceValidations|RL(HandleClient|DownloadDelegate|ProtocolClient|AuthenticationChallengeSender))|Validated(ToobarItem|UserInterfaceItem)|Locking)\\b", "name" => "support.other.protocol" }] }
objective_cpp_grammar[:protocol_type_qualifier] = { "match" => "\\b(in|out|inout|oneway|bycopy|byref)\\b", "name" => "storage.modifier.protocol" }
objective_cpp_grammar[:special_variables] = { "patterns" => [{ "match" => "\\b_cmd\\b", "name" => "variable.other.selector" }, { "match" => "\\b(self|super)\\b", "name" => "variable.language" }] }

@syntax_location = "../syntaxes/objcpp.tmLanguage"
objective_cpp_grammar.saveAsYamlTo(@syntax_location)
objective_cpp_grammar.saveAsJsonTo(@syntax_location)
objective_cpp_grammar.saveTagsTo("tags.txt")
# TODO, upgrade the code so this is not necessary
# for exporting to C
@cpp_grammar = objective_cpp_grammar
