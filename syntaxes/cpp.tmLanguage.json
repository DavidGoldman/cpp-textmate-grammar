{
    "information_for_contributors": [
        "This code was auto generated by a much-more-readble ruby file: https://github.com/jeff-hykin/cpp-textmate-grammar/blob/master/generate.rb",
        "It is a lot easier to modify the ruby file and have it generate the rest of the code",
        "Also the ruby source is very open to merge requests, so please make one if something could be improved",
        "This file essentially an updated/improved fork of the atom syntax https://github.com/atom/language-c/blob/master/grammars/c%2B%2B.cson"
    ],
    "version": "https://github.com/atom/language-c/commit/3a269f88b12e512fb9495dc006a1dabf325d3d7f",
    "name": "C++",
    "scopeName": "source.cpp",
    "patterns": [
        {
            "include": "#special_block"
        },
        {
            "include": "#strings"
        },
        {
            "match": "\\b(friend|explicit|virtual|override|final|noexcept)\\b",
            "name": "storage.modifier.cpp"
        },
        {
            "match": "\\b(private:|protected:|public:)",
            "name": "storage.type.modifier.access.cpp"
        },
        {
            "match": "\\b(catch|try|throw|using)\\b",
            "name": "keyword.control.cpp"
        },
        {
            "match": "\\bdelete\\b(\\s*\\[\\])?|\\bnew\\b(?!\\])",
            "name": "keyword.operator.memory.cpp"
        },
        {
            "match": "\\b(f|m)[A-Z]\\w*\\b",
            "name": "variable.other.readwrite.member.cpp"
        },
        {
            "match": "\\bthis\\b",
            "name": "variable.language.this.cpp"
        },
        {
            "match": "\\bnullptr\\b",
            "name": "constant.language.cpp"
        },
        {
            "include": "#template_definition"
        },
        {
            "match": "\\btemplate\\b\\s*",
            "name": "storage.type.template.cpp"
        },
        {
            "match": "\\b(const_cast|dynamic_cast|reinterpret_cast|static_cast)\\b\\s*",
            "name": "keyword.operator.cast.cpp"
        },
        {
            "include": "#scope_resolution"
        },
        {
            "match": "\\b(and|and_eq|bitand|bitor|compl|not|not_eq|or|or_eq|typeid|xor|xor_eq|alignof|alignas)\\b",
            "name": "keyword.operator.cpp"
        },
        {
            "match": "\\b(decltype|wchar_t|char16_t|char32_t)\\b",
            "name": "storage.type.cpp"
        },
        {
            "match": "\\b(constexpr|export|mutable|typename|thread_local)\\b",
            "name": "storage.modifier.cpp"
        },
        {
            "begin": "(?x)\n(?:\n  ^ |                  # beginning of line\n  (?:(?<!else|new|=))  # or word + space before name\n)\n((?:[A-Za-z_][A-Za-z0-9_]*::)*+~[A-Za-z_][A-Za-z0-9_]*) # actual name\n\\s*(\\()              # opening bracket",
            "beginCaptures": {
                "1": {
                    "name": "entity.name.function.cpp"
                },
                "2": {
                    "name": "punctuation.definition.parameters.begin.c"
                }
            },
            "end": "\\)",
            "endCaptures": {
                "0": {
                    "name": "punctuation.definition.parameters.end.c"
                }
            },
            "name": "meta.function.destructor.cpp",
            "patterns": [
                {
                    "include": "$base"
                }
            ]
        },
        {
            "begin": "(?x)\n(?:\n  ^ |                  # beginning of line\n  (?:(?<!else|new|=))  # or word + space before name\n)\n((?:[A-Za-z_][A-Za-z0-9_]*::)*+~[A-Za-z_][A-Za-z0-9_]*) # actual name\n\\s*(\\()              # opening bracket",
            "beginCaptures": {
                "1": {
                    "name": "entity.name.function.cpp"
                },
                "2": {
                    "name": "punctuation.definition.parameters.begin.c"
                }
            },
            "end": "\\)",
            "endCaptures": {
                "0": {
                    "name": "punctuation.definition.parameters.end.c"
                }
            },
            "name": "meta.function.destructor.prototype.cpp",
            "patterns": [
                {
                    "include": "$base"
                }
            ]
        },
        {
            "include": "source.c"
        }
    ],
    "repository": {
        "scope_resolution": {
            "name": "punctuation.separator.namespace.access.cpp",
            "match": "((?:[a-zA-Z_][a-zA-Z0-9_]*\\s*(?:<(?:[\\s<>,\\w])*>\\s*)?::)*)([a-zA-Z_][a-zA-Z0-9_]*)\\s*(?:(<(?:[\\s<>,\\w])*>\\s*))?(::)",
            "captures": {
                "1": {
                    "name": "entity.scope.c",
                    "patterns": [
                        {
                            "include": "#scope_resolution"
                        }
                    ]
                },
                "2": {
                    "name": "entity.scope.name.c"
                },
                "3": {
                    "patterns": [
                        {
                            "match": "(?<![a-zA-Z0-9_])(?:u_char|u_short|u_int|u_long|ushort|uint|u_quad_t|quad_t|qaddr_t|caddr_t|daddr_t|div_t|dev_t|fixpt_t|blkcnt_t|blksize_t|gid_t|in_addr_t|in_port_t|ino_t|key_t|mode_t|nlink_t|id_t|pid_t|off_t|segsz_t|swblk_t|uid_t|id_t|clock_t|size_t|ssize_t|time_t|useconds_t|suseconds_t|pthread_attr_t|pthread_cond_t|pthread_condattr_t|pthread_mutex_t|pthread_mutexattr_t|pthread_once_t|pthread_rwlock_t|pthread_rwlockattr_t|pthread_t|pthread_key_t|int8_t|int16_t|int32_t|int64_t|uint8_t|uint16_t|uint32_t|uint64_t|int_least8_t|int_least16_t|int_least32_t|int_least64_t|uint_least8_t|uint_least16_t|uint_least32_t|uint_least64_t|int_fast8_t|int_fast16_t|int_fast32_t|int_fast64_t|uint_fast8_t|uint_fast16_t|uint_fast32_t|uint_fast64_t|intptr_t|uintptr_t|intmax_t|intmax_t|uintmax_t|uintmax_t)(?![a-zA-Z0-9_])",
                            "name": "storage.type.built-in.cpp"
                        },
                        {
                            "match": "(?<![a-zA-Z0-9_])(?:auto|void|char|short|int|signed|unsigned|long|float|double|bool|wchar_t)(?![a-zA-Z0-9_])",
                            "name": "storage.type.built-in.primitive.cpp"
                        },
                        {
                            "match": "\\b[a-zA-Z_][a-zA-Z0-9_]*\\b",
                            "name": "storage.type.user-defined.cpp"
                        }
                    ]
                },
                "4": {
                    "name": "punctuation.separator.namespace.access.cpp"
                }
            }
        },
        "template_definition": {
            "begin": "\\b(template)\\s*(<)\\s*",
            "beginCaptures": {
                "1": {
                    "name": "storage.type.template.cpp"
                },
                "2": {
                    "name": "punctuation.section.angle-brackets.start.template.definition.cpp"
                }
            },
            "end": ">",
            "endCaptures": {
                "0": {
                    "name": "punctuation.section.angle-brackets.end.template.definition.cpp"
                }
            },
            "name": "template.definition",
            "patterns": [
                {
                    "include": "#template_definition_argument"
                }
            ]
        },
        "template_definition_argument": {
            "match": "\\s*(?:([a-zA-Z_][a-zA-Z_0-9]*\\s*)|((?:[a-zA-Z_][a-zA-Z_0-9]*\\s+)*)([a-zA-Z_][a-zA-Z_0-9]*)|([a-zA-Z_][a-zA-Z_0-9]*)\\s*(\\.\\.\\.)\\s*([a-zA-Z_][a-zA-Z_0-9]*)|((?:[a-zA-Z_][a-zA-Z_0-9]*\\s+)*)([a-zA-Z_][a-zA-Z_0-9]*)\\s*(=)\\s*(\\w+))(,|(?=>))",
            "captures": {
                "1": {
                    "name": "storage.type.template.cpp"
                },
                "2": {
                    "name": "storage.type.template.cpp"
                },
                "3": {
                    "name": "entity.name.type.template.cpp"
                },
                "4": {
                    "name": "storage.type.template.cpp"
                },
                "5": {
                    "name": "meta.template.operator.ellipsis"
                },
                "6": {
                    "name": "entity.name.type.template.cpp"
                },
                "7": {
                    "name": "storage.type.template.cpp"
                },
                "8": {
                    "name": "entity.name.type.template.cpp"
                },
                "9": {
                    "name": "keyword.operator.assignment.c"
                },
                "10": {
                    "name": "constant.language.cpp"
                },
                "11": {
                    "name": "meta.template.operator.comma.cpp"
                }
            }
        },
        "angle_brackets": {
            "begin": "<",
            "end": ">",
            "name": "meta.angle-brackets.cpp",
            "patterns": [
                {
                    "include": "#angle_brackets"
                },
                {
                    "include": "$base"
                }
            ]
        },
        "block": {
            "begin": "\\{",
            "beginCaptures": {
                "0": {
                    "name": "punctuation.section.block.begin.bracket.curly.c"
                }
            },
            "end": "\\}",
            "endCaptures": {
                "0": {
                    "name": "punctuation.section.block.end.bracket.curly.c"
                }
            },
            "name": "meta.block.cpp",
            "patterns": [
                {
                    "captures": {
                        "1": {
                            "name": "support.function.any-method.c"
                        },
                        "2": {
                            "name": "punctuation.definition.parameters.c"
                        }
                    },
                    "match": "(?x)\n(\n  (?!while|for|do|if|else|switch|catch|enumerate|return|r?iterate)\n  (?:\\b[A-Za-z_][A-Za-z0-9_]*+\\b|::)*+ # actual name\n)\n\\s*(\\() # opening bracket",
                    "name": "meta.function-call.c"
                },
                {
                    "include": "$base"
                }
            ]
        },
        "constructor": {
            "patterns": [
                {
                    "begin": "(?x)\n(?:^\\s*)  # beginning of line\n((?!while|for|do|if|else|switch|catch|enumerate|r?iterate)[A-Za-z_][A-Za-z0-9_:]*) # actual name\n\\s*(\\()  # opening bracket",
                    "beginCaptures": {
                        "1": {
                            "name": "entity.name.function.constructor.cpp"
                        },
                        "2": {
                            "name": "punctuation.definition.parameters.begin.c"
                        }
                    },
                    "end": "\\)",
                    "endCaptures": {
                        "0": {
                            "name": "punctuation.definition.parameters.end.c"
                        }
                    },
                    "name": "meta.function.constructor.cpp",
                    "patterns": [
                        {
                            "include": "#probably_a_parameter"
                        },
                        {
                            "include": "#function-innards"
                        }
                    ]
                },
                {
                    "begin": "(?x)\n(:)\n(\n  (?=\n    \\s*[A-Za-z_][A-Za-z0-9_:]* # actual name\n    \\s* (\\() # opening bracket\n  )\n)",
                    "beginCaptures": {
                        "1": {
                            "name": "punctuation.definition.parameters.c"
                        }
                    },
                    "end": "(?=\\{)",
                    "name": "meta.function.constructor.initializer-list.cpp",
                    "patterns": [
                        {
                            "include": "$base"
                        }
                    ]
                }
            ]
        },
        "special_block": {
            "patterns": [
                {
                    "begin": "\\b(using)\\b\\s*(namespace)\\b\\s*((?:[_A-Za-z][_A-Za-z0-9]*\\b(::)?)*)",
                    "beginCaptures": {
                        "1": {
                            "name": "keyword.control.cpp"
                        },
                        "2": {
                            "name": "storage.type.namespace.cpp"
                        },
                        "3": {
                            "name": "entity.name.type.cpp"
                        }
                    },
                    "end": ";",
                    "endCaptures": {
                        "0": {
                            "name": "punctuation.terminator.statement.c"
                        }
                    },
                    "name": "meta.using-namespace-declaration.cpp"
                },
                {
                    "begin": "\\b(namespace)\\b\\s*([_A-Za-z][_A-Za-z0-9]*\\b)?+",
                    "beginCaptures": {
                        "1": {
                            "name": "storage.type.namespace.cpp"
                        },
                        "2": {
                            "name": "entity.name.type.cpp"
                        }
                    },
                    "captures": {
                        "1": {
                            "name": "keyword.control.namespace.$2"
                        }
                    },
                    "end": "(?<=\\})|(?=(;|,|\\(|\\)|>|\\[|\\]|=))",
                    "name": "meta.namespace-block.cpp",
                    "patterns": [
                        {
                            "begin": "\\{",
                            "beginCaptures": {
                                "0": {
                                    "name": "punctuation.definition.scope.cpp"
                                }
                            },
                            "end": "\\}",
                            "endCaptures": {
                                "0": {
                                    "name": "punctuation.definition.scope.cpp"
                                }
                            },
                            "patterns": [
                                {
                                    "include": "#special_block"
                                },
                                {
                                    "include": "#constructor"
                                },
                                {
                                    "include": "$base"
                                }
                            ]
                        },
                        {
                            "include": "$base"
                        }
                    ]
                },
                {
                    "begin": "\\b(?:(class)|(struct))\\b\\s*([_A-Za-z][_A-Za-z0-9]*\\b)?+(\\s*:\\s*(public|protected|private)\\s*([_A-Za-z][_A-Za-z0-9]*\\b)((\\s*,\\s*(public|protected|private)\\s*[_A-Za-z][_A-Za-z0-9]*\\b)*))?",
                    "beginCaptures": {
                        "1": {
                            "name": "storage.type.class.cpp"
                        },
                        "2": {
                            "name": "storage.type.struct.cpp"
                        },
                        "3": {
                            "name": "entity.name.type.cpp"
                        },
                        "5": {
                            "name": "storage.type.modifier.access.cpp"
                        },
                        "6": {
                            "name": "entity.name.type.inherited.cpp"
                        },
                        "7": {
                            "patterns": [
                                {
                                    "match": "(public|protected|private)",
                                    "name": "storage.type.modifier.access.cpp"
                                },
                                {
                                    "match": "[_A-Za-z][_A-Za-z0-9]*",
                                    "name": "entity.name.type.inherited.cpp"
                                }
                            ]
                        }
                    },
                    "end": "(?<=\\})|(?=(;|\\(|\\)|>|\\[|\\]|=))",
                    "name": "meta.class-struct-block.cpp",
                    "patterns": [
                        {
                            "include": "#angle_brackets"
                        },
                        {
                            "begin": "\\{",
                            "beginCaptures": {
                                "0": {
                                    "name": "punctuation.section.block.begin.bracket.curly.cpp"
                                }
                            },
                            "end": "(\\})(\\s*\\n)?",
                            "endCaptures": {
                                "1": {
                                    "name": "punctuation.section.block.end.bracket.curly.cpp"
                                },
                                "2": {
                                    "name": "invalid.illegal.you-forgot-semicolon.cpp"
                                }
                            },
                            "patterns": [
                                {
                                    "include": "#special_block"
                                },
                                {
                                    "include": "#constructor"
                                },
                                {
                                    "include": "$base"
                                }
                            ]
                        },
                        {
                            "include": "$base"
                        }
                    ]
                },
                {
                    "begin": "\\b(extern)(?=\\s*\")",
                    "beginCaptures": {
                        "1": {
                            "name": "storage.modifier.cpp"
                        }
                    },
                    "end": "(?<=\\})|(?=\\w)|(?=\\s*#\\s*endif\\b)",
                    "name": "meta.extern-block.cpp",
                    "patterns": [
                        {
                            "begin": "\\{",
                            "beginCaptures": {
                                "0": {
                                    "name": "punctuation.section.block.begin.bracket.curly.c"
                                }
                            },
                            "end": "\\}|(?=\\s*#\\s*endif\\b)",
                            "endCaptures": {
                                "0": {
                                    "name": "punctuation.section.block.end.bracket.curly.c"
                                }
                            },
                            "patterns": [
                                {
                                    "include": "#special_block"
                                },
                                {
                                    "include": "$base"
                                }
                            ]
                        },
                        {
                            "include": "$base"
                        }
                    ]
                }
            ]
        },
        "strings": {
            "patterns": [
                {
                    "begin": "(u|u8|U|L)?\"",
                    "beginCaptures": {
                        "0": {
                            "name": "punctuation.definition.string.begin.cpp"
                        },
                        "1": {
                            "name": "meta.encoding.cpp"
                        }
                    },
                    "end": "\"",
                    "endCaptures": {
                        "0": {
                            "name": "punctuation.definition.string.end.cpp"
                        }
                    },
                    "name": "string.quoted.double.cpp",
                    "patterns": [
                        {
                            "match": "\\\\u\\h{4}|\\\\U\\h{8}",
                            "name": "constant.character.escape.cpp"
                        },
                        {
                            "match": "\\\\['\"?\\\\abfnrtv]",
                            "name": "constant.character.escape.cpp"
                        },
                        {
                            "match": "\\\\[0-7]{1,3}",
                            "name": "constant.character.escape.cpp"
                        },
                        {
                            "match": "\\\\x\\h+",
                            "name": "constant.character.escape.cpp"
                        },
                        {
                            "include": "source.c#string_placeholder"
                        }
                    ]
                },
                {
                    "begin": "(u|u8|U|L)?R\"(?:([^ ()\\\\\\t]{0,16})|([^ ()\\\\\\t]*))\\(",
                    "beginCaptures": {
                        "0": {
                            "name": "punctuation.definition.string.begin.cpp"
                        },
                        "1": {
                            "name": "meta.encoding.cpp"
                        },
                        "3": {
                            "name": "invalid.illegal.delimiter-too-long.cpp"
                        }
                    },
                    "end": "\\)\\2(\\3)\"",
                    "endCaptures": {
                        "0": {
                            "name": "punctuation.definition.string.end.cpp"
                        },
                        "1": {
                            "name": "invalid.illegal.delimiter-too-long.cpp"
                        }
                    },
                    "name": "string.quoted.double.raw.cpp"
                }
            ]
        }
    }
}